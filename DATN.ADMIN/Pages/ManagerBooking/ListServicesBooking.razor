@page "/ListServicesBooking"
@using System.Net.Http.Json
@using DATN.ADMIN.IServices
@using DATN.ADMIN.Pages.ManagerBill
@using DATN.Data.Enum
@using DATN.Utilites
@using DATN.ViewModels.Common
@using DATN.ViewModels.DTOs.ActionBooking
@using DATN.ViewModels.DTOs.Authenticate
@using DATN.ViewModels.DTOs.Booking
@using DATN.ViewModels.Enum
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IDialogService _dialogservice;
@inject IAddressService _addressServive;
<PageTitle>Danh sách đặt dịch vụ</PageTitle>
<MudText Typo="Typo.h4" Style="text-align:center">Danh sách đặt dịch vụ</MudText>
<div style="display: flex; justify-content: flex-end;">
    <MudButton Variant="Variant.Filled" Style="margin-bottom: 10px;" StartIcon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Primary" OnClick="@ExpandAllGroups">Mở hết danh sách</MudButton>
    <MudButton Variant="Variant.Filled" Style="margin-bottom: 10px; margin-left: 10px;" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@(async()=>await OpenDialogCreateBooking())">Đặt dịch vụ</MudButton>
</div>

<MudDataGrid Items="@lstBookingServices" Hover="true" Filterable="true" @ref="dataGrid" Hideable="true" Groupable="true" GroupExpanded="false" MultiSelection="true">
    <ToolBarContent>
        <MudSpacer />
    </ToolBarContent>
    <Columns>
        <TemplateColumn Title="Ngày" GroupBy="@_groupBy" Sortable="false" Filterable="false">
            <GroupTemplate>
                <span style="font-weight:bold">@context.Grouping.Key</span>
            </GroupTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x=>x.NameGuest" Title="Tên khách hàng" Sortable="false" Filterable="false" />
        <PropertyColumn Property="x=>x.PhoneNumber" Title="SĐT" Sortable="false" Filterable="false" />
        <TemplateColumn Title="Địa chỉ" Sortable="false" Filterable="false">
            <CellTemplate>
                <span DataLabel="Địa chỉ">@(_addressServive.GetAddress(context.Item.Address!) ?? "Không có địa chỉ")</span>
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Thời gian đặt" Sortable="false" Filterable="false">
            <CellTemplate>
                <span>
                    @context.Item.BookingTime.ToString("dd/MM/yyyy HH:mm")
                </span>
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Trạng thái" Sortable="false" Filterable="false">
            <CellTemplate>
                @if (context.Item.Status == BookingStatus.PendingConfirmation)
                {
                    <MudChip  Color="Color.Warning">Chờ xác nhận</MudChip>
                }
                @if (context.Item.Status == BookingStatus.Confirmed)
                {
                    <MudChip  Color="Color.Success">Đã xác nhận</MudChip>

                }@if (context.Item.Status == BookingStatus.Arrived)
                {
                    <MudChip  Color="Color.Success">Khách đã đến</MudChip>

                }@if (context.Item.Status == BookingStatus.InProgress)
                {
                    <MudChip  Color="Color.Primary">Đang thực hiện</MudChip>

                }@if (context.Item.Status == BookingStatus.Completed)
                {
                    <MudChip  Color="Color.Success">Đã hoàn thành</MudChip>

                }@if (context.Item.Status == BookingStatus.NoShow)
                {
                    <MudChip  Color="Color.Surface">Khách không đến</MudChip>

                }@if (context.Item.Status == BookingStatus.CustomerCancelled)
                {
                    <MudChip  Color="Color.Error">Khách huỷ</MudChip>
                }@if (context.Item.Status == BookingStatus.StaffCancelled)
                {
                    <MudChip  Color="Color.Error">Nhân viên huỷ</MudChip>

                }@if (context.Item.Status == BookingStatus.AdminCancelled)
                {
                    <MudChip  Color="Color.Error">Quản trị viên huỷ</MudChip>

                }
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Hành động" Filterable="false" Sortable="false">
            <CellTemplate>
                    <MudButtonGroup Variant="Variant.Filled">
                        <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.RemoveRedEye" Title="Xem danh sách chi tiết" OnClick="@(async()=>await OpenDialog(context.Item.IdGuest.Value,context.Item.BookingTime))"></MudIconButton>
                        <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Cancel" Title="Huỷ" OnClick="@(async()=>await CanncelSerices())"></MudIconButton>
                    <MudIconButton Color="Color.Success" Icon="@Icons.Material.Filled.DoneAll" Title="Hoàn thành" OnClick="@(async()=>await CompleteServicesAll())"></MudIconButton>
                        <MudIconButton Color="Color.Primary" Title="Thanh toán" OnClick="@(async()=>await OpenDialogBill(context.Item.IdGuest.Value,context.Item.BookingTime))">Thanh toán</MudIconButton>
                    </MudButtonGroup>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="BookingView" />
    </PagerContent>
</MudDataGrid>

@code {

    private List<BookingView> lstBookingServices = new List<BookingView>();
    bool _customizeGroupTemplate;
    static bool _customizeGroupBy;
    static bool _customizeGroupByCus;

    MudDataGrid<BookingView> dataGrid;
    [Inject] private BookingService bookingService { get; set; }
    [Inject]
    private IHttpContextAccessor _httpContextAccessor { get; set; }

    [Inject]
    private IBookingViewServices _client { get; set; }

    private HubConnection hubConnection;
    private NavigationManager navigation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        var respone = await _client.GetAll();
        lstBookingServices = respone.Data;
        StateHasChanged();
    }

    //group ngày
    private Func<BookingView, string> _groupBy = x =>
    {
        if (_customizeGroupBy)
        {
            return x.NameGuest;
        }
        else
        {
            return x.BookingTime.ToString("dd/MM/yyyy");
        }
    };
    void ExpandAllGroups()
    {
        dataGrid?.ExpandAllGroups();
    }


    private async Task OpenDialog(Guid id, DateTime dateBooking)
    {
        var parameters = new DialogParameters();
        string nameDialog = "Chi tiết khách đặt lịch";
        string id2 = Convert.ToString(id);
        DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Large,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true
            };
        parameters.Add("id", id2);
        parameters.Add("dateBooking", dateBooking);
        var createUpdateDialog = await _dialogservice.ShowAsync<ViewDetailsBooking>(nameDialog, parameters, options);
        var result = await createUpdateDialog.Result;
        if (!result.Canceled)
        {
            createUpdateDialog.Close();
            await LoadData();
        }
    }
    //bill
    private async Task OpenDialogBill(Guid? id, DateTime date)
    {
        var parameters = new DialogParameters();
        string nameDialog = "";

        DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Large,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true
            };
        parameters.Add("guid", id);
        parameters.Add("date", date);
        var createUpdateDialog = await _dialogservice.ShowAsync<ViewBillCustomer>(nameDialog,parameters, options);
        var result = await createUpdateDialog.Result;
        if (!result.Canceled)
        {
            createUpdateDialog.Close();
            await LoadData();
        }
    }
    private async Task CompleteServicesAll()
    {
        ActionView actionView = new ActionView()
            {
                IdBokingOrDetail = ,
                Token = _httpContextAccessor.HttpContext.Session.GetString("Key")
            };
        var respone = await _client.CompleteBooking(actionView);
        if (respone.IsSuccess)
        {
            Message(respone.Data, Severity.Success);
            await LoadData();
        }else
        {
            Message(respone.Error, Severity.Error);
        }
    }
    
    private async Task CanncelSerices()
    {
        var parameters = new DialogParameters();
        string nameDialog = "Huỷ dịch vụ";
        DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Large,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true
            };
        // parameters.Add("id", id);
        var createUpdateDialog = await _dialogservice.ShowAsync<CanelBookingg>(nameDialog, parameters, options);
        var result = await createUpdateDialog.Result;
        if (!result.Canceled)
        {
            createUpdateDialog.Close();
            await LoadData();
        }
    }

    private void ClearBookingRequests()
    {
        bookingService.lstBooking.Clear();
    }

    private async Task OpenDialogCreateBooking()
    {
        string nameDialog = "Đặt lịch tại quầy";
        DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Large,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true
            };
        var createUpdateDialog = await _dialogservice.ShowAsync<CreateBookingCustomer1>(nameDialog, options);
        var result = await createUpdateDialog.Result;
        ClearBookingRequests();
        if (!result.Canceled)
        {
            createUpdateDialog.Close();
            await LoadData();
        }
    }
    private void Message(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add(message, severity);
    }

}