<AuthorizeView>
    <Authorized>
        @using DATN.ADMIN.IServices
        @using DATN.Utilites
        @using DATN.ViewModels.DTOs.Booking
        @using DATN.ViewModels.DTOs.ServiceDetail
        @inject IDialogService _dialogservice;

        <MudDataGrid Items="@lstServiceName" QuickFilter="@_quickFilter" Filterable="true">
            <ToolBarContent>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0" MaxLength="50"></MudTextField>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="@(async()=>await CreateBooking())" Color="Color.Primary" Disabled="@(!IsAnyUserSelected)" Style="margin-bottom: 10px" title="Tiếp tục">Lấy dịch vụ đã chọn</MudButton>

            </ToolBarContent>
            <Columns>
                <TemplateColumn Title="Chọn" Sortable="false" Filterable="false">
                    <CellTemplate Context="data">
                        <MudCheckBox @bind-Checked="selectedServices[lstServiceName.IndexOf(data.Item)]" />
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="STT" Sortable="false" Filterable="false">
                    <CellTemplate Context="data">
                        @(lstServiceName.IndexOf(data.Item) + 1)
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="x=>x.Description" Title="Tên dịch vụ" Sortable="false" Filterable="false" />
                <TemplateColumn Title="Giá" Sortable="false" Filterable="false">
                    <CellTemplate Context="data">
                        @(CurrencyHelper.FormatCurrency(data.Item.Price))
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="Thời gian làm dự kiến" Sortable="false" Filterable="false">
                    <CellTemplate Context="data">
                        @data.Item.Duration <span>Phút</span>
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="x=>x.ServiceName" Title="Loại dịch vụ" Sortable="false" Filterable="false" />
            </Columns>
            <PagerContent>
                <MudDataGridPager T="GetServiceNameVM" />
            </PagerContent>
        </MudDataGrid>
        @code {
        [Parameter]
        public Guid idCustomer { get; set; }
        [Parameter]
        public DateTime? bookingDate { get; set; }
        [Parameter]
        public TimeSpan? timeStart { get; set; }
        [Parameter]
        public int idPet { get; set; }


        private List<GetServiceNameVM> lstServiceName = new List<GetServiceNameVM>();
        [Inject]
        public IServiceDetailServices _serviceDetailService { get; set; }

        [CascadingParameter] MudDialogInstance _dialogBox { get; set; }

        private bool IsAnyUserSelected => selectedServices.Any(selected => selected);
        private List<CreateBookingDetailRequest> bookingDetailRequests = new List<CreateBookingDetailRequest>();

        private List<bool> selectedServices = new List<bool>();

        [Inject] private BookingService bookingService { get; set; }


        private string searchString = "";

        protected override async Task OnInitializedAsync()
        {
            var result = await _serviceDetailService.GetServiceName();
            if (result != null)
            {
                lstServiceName = result.Where(c => c.IsDeleted == false).ToList();
            }
            selectedServices = Enumerable.Repeat(false, lstServiceName.Count).ToList();
        }
        private Func<GetServiceNameVM, bool> _quickFilter => x =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (x.ServiceName.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{x.Duration} {x.Price} {x.Description}".Contains(searchString.Trim()))
                return true;
            return false;
        };

        protected async Task CreateBooking()
        {
            var selectServiceIndex = selectedServices.Select((value, index) => (value, index)).Where(pair => pair.value).Select(pair => pair.index).ToList();
            var selectServiceIndex2 = selectServiceIndex.Select(index => lstServiceName[index]).ToList();

            foreach (var item in selectServiceIndex2)
            {
                bookingDetailRequests.Add(new CreateBookingDetailRequest
                {
                    // Gán các giá trị từ dịch vụ đã chọn vào đối tượng CreateBookingDetailRequest
                    ServiceDetailName = item.Description,
                    ServiceDetailId = item.ServiceDetailId,
                    DateBooking = bookingDate.Value,
                    EndDateTime = timeStart.Value,
                    StartDateTime = timeStart.Value,
                    PetId = idPet,
                    Price = item.Price,
                });
            }
            bookingService.AddBooking(bookingDetailRequests);
            // Đóng dialog sau khi thêm xong
            _dialogBox.Close(DialogResult.Ok(true));
            StateHasChanged();
        }
        }
    </Authorized>
    <NotAuthorized>
        <p>Không có quyền truy cập</p>
    </NotAuthorized>
</AuthorizeView>