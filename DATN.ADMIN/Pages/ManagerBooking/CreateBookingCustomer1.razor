<AuthorizeView>
    <Authorized>
        @page "/CreateBookingCustomer"
        @using DATN.ADMIN.Components
        @using DATN.ADMIN.IServices
        @using DATN.ADMIN.Pages.ManagerGuest
        @using DATN.ADMIN.Pages.ManagerServices
        @using DATN.Data.Entities
        @using DATN.Utilites
        @using DATN.ViewModels.DTOs.Authenticate
        @using DATN.ViewModels.DTOs.Booking
        @using DATN.ViewModels.DTOs.Guest
        @using DATN.ViewModels.DTOs.Pet
        @using DATN.ViewModels.DTOs.ServiceDetail
        @inject IDialogService _dialogservice;
        @inject ISnackbar Snackbar
        <DATN.ADMIN.Components.Loadding _isVisible="isLoading" />
        <MudForm Style="text-align:center;margin-bottom:20px">
            <MudItem xs="12" sm="6" md="4">
                <div style="display: flex; justify-content: flex-end; width: 1240px; margin-left: auto;margin-left:10px">
                    <MudAutocomplete T="GuestViewModel" @bind-Value="value1" Label="Chọn khách hàng *" SearchFunc="@Search" ToStringFunc="@(e => e == null ? null : $"{e.Name} ({e.PhoneNumber})")" style="flex: 1; margin-right: 10px;" Disabled="@(!CanSelectGuest)" />
                    @if (value1 != null)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Clear"
                                       Color="Color.Error"
                                       Size="MudBlazor.Size.Small"
                                       Disabled="@isEditing"
                                       OnClick="ClearGuestSelection"
                                       Style="margin-left: 8px; margin-top:10px"
                                       ToolTip="Xoá lựa chọn khách hàng">
                        </MudIconButton>
                    }
                    <MudAutocomplete T="PetVM" Label="Chọn thú cưng" @bind-Value="value2" SearchFunc="@Search2" ToStringFunc="@(e=> e==null?null : $"{e.Name}")" Disabled="@(!CanSelectPet)" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"/>
@*                     @if (value2 != null)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Clear"
                                       Color="Color.Error"
                                       Size="MudBlazor.Size.Small"
                                       Disabled="@isEditing2"
                                       OnClick="ClearPetSelection"
                                       Style="margin-left: 8px;"
                                       ToolTip="Xoá lựa chọn thú cưng">
                        </MudIconButton>
                    } *@
                    <MudIconButton Icon="@Icons.Material.Filled.Add" @onclick="@(async()=>await OpeListPetDialog())" Variant="Variant.Outlined" Color="Color.Primary" Size="MudBlazor.Size.Small" />
                    <div style="display: flex; align-items: center;padding-left:200px">
                        <MudButton Disabled=@isOpenDialog OnClick="@(async () => await OpenDialog())" Style="margin-top: 10px; margin-left: 10px;" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Success">Thêm khách hàng</MudButton>
                        @if (bookingService.lstBooking.Count > 0 && value1 != null)
                        {
                            <MudButton OnClick="@(async () => await CreateBookingInDb())" Style="margin-top: 10px; margin-left: 10px;" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary">Thêm lịch hẹn</MudButton>
                        }
                        else
                        {
                            <MudButton OnClick="@(async () => await CreateBookingInDb())" Style="margin-top: 10px; margin-left: 10px;" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" Disabled> Thêm lịch hẹn</MudButton>

                        }
                    </div>
                </div>
                <div style="display: flex; justify-content: flex-end; width: 650px; margin-left: auto;margin-left:10px">
                    <MudTimePicker Label="Chọn thời gian" @bind-Time="timeStart" Disabled="@(!CanSelectTime)" Style="margin-right:10px"/>
                    @if (timeStart != null)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Clear"
                                       Color="Color.Error"
                                       Size="MudBlazor.Size.Small"
                                       Disabled="@isEditing"
                                       OnClick="ClearTimeStart"
                                       Style="margin-left: 8px; margin-top:10px"
                                       ToolTip="Xoá thời gian">
                        </MudIconButton>
                    }
                    <MudDatePicker @bind-Date="bookingDate" Label="Ngày hẹn" Editable="true" DateFormat="dd/MM/yyyy" Disabled="@(!CanSelectBookingDate)" Mask="@(new DateMask("dd/MM/yyyy"))" />
                    @if (bookingDate != null)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Clear"
                                       Color="Color.Error"
                                       Size="MudBlazor.Size.Small"
                                       Disabled="@isEditing"
                                       OnClick="ClearTimeEnd"
                                       Style="margin-left: 8px; margin-top:10px"
                                       ToolTip="Xoá ngày">
                        </MudIconButton>
                    }
                    <div style="width: 200px">
                    <MudButton OnClick="@(async()=>await Create())" StartIcon="@Icons.Material.Filled.Add" Style="margin-top: 10px; margin-left: 10px;" Variant="Variant.Filled" Color="Color.Primary">Chọn dịch vụ</MudButton>
                    </div>
                    </div>
            </MudItem>
            <MudTable Items="@bookingService.lstBooking" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
                <HeaderContent>
                    <MudTh>Tên dịch vụ</MudTh>
                    <MudTh>Thú cưng</MudTh>
                    <MudTh>Giá</MudTh>
                    <MudTh>Hành động</MudTh>
                </HeaderContent>
                <RowTemplate Context="data">
                    <MudTd DataLabel="Sign">@data.ServiceDetailName</MudTd>
                    <MudTd DataLabel="Sign">@lstPet.Where(c => c.Id == data.PetId).FirstOrDefault().Name</MudTd>
                    <MudTd DataLabel="Sign">@CurrencyHelper.FormatCurrency((float)data.Price)</MudTd>
                    <MudTd>
                        <MudButton Variant="Variant.Filled" OnClick="@(() => RemoveBooking(data))" Color="Color.Error">Xoá</MudButton>
                    </MudTd>
                </RowTemplate>

            </MudTable>
        </MudForm>

        @code {
        [Inject]
        private BookingService bookingService { get; set; }
        [Inject]
        private IGuestManagerClient _guestService { get; set; }
        private List<GuestViewModel> lstGuest = new List<GuestViewModel>();
        [Inject]
        public IServiceDetailServices _serviceDetailService { get; set; }
        [Inject]
        private IBookingViewServices _BookingSer { get; set; }
        [Inject]
        private IUserClientSev _userClientSev { get; set; }
        //gắn cờ
        private bool isEditing = false;
        private bool isEditing2;
        private bool isLoading;
        // disable nếu chọn khách và đã có dịch vụ
        private bool CanSelectGuest => value1 == null && bookingService.lstBooking.Count == 0;

        private bool CanSelectPet => value2 == null && bookingService.lstBooking.Count == 0;
        private bool CanSelectTime => timeStart == null && bookingService.lstBooking.Count == 0;
        private bool CanSelectBookingDate => bookingDate == null && bookingService.lstBooking.Count == 0;
        [Inject]
        public IPetServiceClient petService { get; set; }
        public List<PetVM> lstPet = new List<PetVM>();

        private PetVM value2;


        TimeSpan? timeStart;
        TimeSpan? timeEnd;
        DateTime? bookingDate;

        [Inject]
        HttpContextAccessor _httpContextAccessor { get; set; }
        private bool isOpenDialog = false;
        protected override async Task OnInitializedAsync()
        {
            await LoadData();
            StateHasChanged();
            bookingService.OnChange += HandleStateChange;
        }
        protected async Task LoadData()
        {
            var response = await _guestService.GetGuest();
            lstGuest = response.Data;
            //lấy dịch vụ theo id truyền ra
            StateHasChanged();

        }
        private void HandleStateChange()
        {
            // Xử lý sự kiện thay đổi danh sách booking
            StateHasChanged();
        }

        //tìm kiếm khách hàng
        private GuestViewModel value1;
        [CascadingParameter] MudDialogInstance _dialogBox { get; set; }

        private async Task<IEnumerable<GuestViewModel>> Search(string value)
        {
            await Task.Delay(5); // Simulate async operation
            if (lstGuest.Count < 0)
            {
                return lstGuest = new List<GuestViewModel>();
            }
            else
            {
                if (string.IsNullOrEmpty(value))
                {
                    value1 = null;
                    return lstGuest;
                }
                return lstGuest.Where(x => x.Name.Contains(value.TrimStart().TrimEnd(), StringComparison.InvariantCultureIgnoreCase) || x.PhoneNumber.StartsWith(value.Trim(), StringComparison.InvariantCultureIgnoreCase));
            }
        }
        private async void RemoveBooking(CreateBookingDetailRequest booking)
        {
            // Gọi phương thức từ BookingService để xóa booking
            if (await Confirm() == true)
            {
                bookingService.RemoveBooking(booking);
                Snackbar.Add("Đã xoá thành công.", Severity.Success);
            }
            // Hiển thị thông báo hoặc cập nhật giao diện sau khi xoá thành công
        }
        private void ClearBookingRequests()
        {
            bookingService.lstBooking.Clear();
            StateHasChanged();
        }
        private async Task CloseComponent()
        {
            // Gọi dialog hoặc thực hiện hành động cần thiết trước khi đóng component
            ClearBookingRequests(); // Gọi phương thức để xoá danh sách bookingRequest
        }

        // xoá khách nếu chọn nhầm
        private void ClearGuestSelection()
        {
            value1 = null;
            value2 = null;
            // Cập nhật lại trạng thái giao diện
            StateHasChanged();
        }
        private void ClearTimeStart()
        {
            timeStart = null;
            // Cập nhật lại trạng thái giao diện
            StateHasChanged();
        }
        private void ClearTimeEnd()
        {
            bookingDate = null;
            // Cập nhật lại trạng thái giao diện
            StateHasChanged();
        }
        private void ClearPetSelection()
        {
            value2 = null;
            // Cập nhật lại trạng thái giao diện
            StateHasChanged();
        }
        private async Task<bool?> Confirm()
        {
            var confirm = await _dialogservice.ShowMessageBox("Thông báo",
            "Xác nhận xóa dịch vụ?",
            yesText: "Xác nhận",
            cancelText: "Hủy", noText: null, options: new DialogOptions { Position = DialogPosition.TopCenter, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true });
            StateHasChanged();
            return confirm;
        }

        private async Task<bool?> Confirm2()
        {
            var confirm = await _dialogservice.ShowMessageBox("Thông báo",
            "Xác nhận thêm lịch hẹn?",
            yesText: "Xác nhận",
            cancelText: "Hủy", noText: null, options: new DialogOptions { Position = DialogPosition.Center, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true });
            StateHasChanged();
            return confirm;
        }

        public async Task OpenDialog()
        {
            isLoading = true;
            await Task.Delay(1);
            isOpenDialog = true;
            string nameDialog = "Thêm mới khách hàng";
            DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Small,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true,
            };
            var createUpdateDialog = await _dialogservice.ShowAsync<CreateUpdateGuest>(nameDialog, options);
            var result = await createUpdateDialog.Result;
            if (!result.Canceled)
            {
                createUpdateDialog.Close();
                await LoadData();
                StateHasChanged();
            }
            isLoading = false;
            isOpenDialog = false;

        }

        public async Task CreateBookingInDb()
        {
            try
            {
                isLoading = true;
                StateHasChanged();
                if (timeStart == null)
                {
                    Snackbar.Add("Vui lòng không để giờ trống", Severity.Warning);
                    isLoading = false;
                    return;
                }
                if (bookingDate == null)
                {
                    Snackbar.Add("Vui lòng không để ngày trống!", Severity.Warning);
                    isLoading = false;
                    return;
                }
                if (await Confirm2() == true)
                {

                    CreateBookingRequest createBookingRequest = new CreateBookingRequest()
                    {
                        GuestId = value1.Id,
                        ListIdServiceDetail = bookingService.lstBooking,
                        PaymentTypeId = 1,
                    };
                    var repos = await _BookingSer.CreateBookingStore(createBookingRequest, _httpContextAccessor.HttpContext.Session.GetString("Key"));
                    if (repos.IsSuccess)
                    {
                        Snackbar.Add(repos.Data, Severity.Success);
                        StateHasChanged();
                        _dialogBox.Close();
                    }
                    else
                    {
                        Snackbar.Add(repos.Error, Severity.Error);
                    }
                    isLoading = false;
                }
                isLoading = false;

            }
            catch (Exception)
            {

                throw;
                isLoading = false;
            }
        }
        //tìm kiếm pet
        private async Task<IEnumerable<PetVM>> Search2(string value)
        {
            var responsePet = await petService.GetAll();
            if (responsePet.Data.Count > 0)
            {
                lstPet = responsePet.Data.Where(x => x.OwnerId == value1.Id).ToList();
            }
            else
            {
                lstPet = new List<PetVM>();
            }
            if (lstPet.Count() < 0)
            {
                return lstPet = new List<PetVM>();
            }
            else
            {
                if (string.IsNullOrEmpty(value))
                {
                    return lstPet;
                }
                return lstPet.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
            }
        }
        //tìm kiếm dịch vụ
        protected async Task Create()
        {
            if (value1 == null)
            {
                Snackbar.Add("Vui lòng chọn khách hàng.", Severity.Warning);
                return;
            }
            if (value2 == null)
            {
                Snackbar.Add("Vui lòng chọn thú cưng trước khi tìm.", Severity.Warning);
                return;
            }
            if (timeStart == null)
            {
                Snackbar.Add("Vui lòng chọn giờ.", Severity.Warning);
                return;
            }
            if (bookingDate == null)
            {
                Snackbar.Add("Vui lòng chọn ngày.", Severity.Warning);
                return;
            }
            var now = DateTime.Now;
            var selectedDateTime = bookingDate.Value.Date.Add(timeStart.Value);

            if (selectedDateTime < now)
            {
                Snackbar.Add("Ngày và giờ đã chọn không hợp lệ. Vui lòng chọn lại ngày và giờ", Severity.Warning);
                return;
            }

            var parameters = new DialogParameters();

            parameters.Add("bookingDate", bookingDate);
            parameters.Add("timeStart", timeStart);
            //id pet
            parameters.Add("idPet", value2.Id);

            DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraLarge,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true,
            };
            var createUpdateDialog = await _dialogservice.ShowAsync<SelectServicesBooking3>("Chọn dịch vụ", parameters, options);
            var result2 = await createUpdateDialog.Result;
            if (!result2.Canceled)
            {
                createUpdateDialog.Close();
                StateHasChanged();
            }
        }
        // mở component thêm pet
        public async Task OpeListPetDialog()
        {
            if (value1 == null)
            {
                Snackbar.Add("Vui lòng chọn khách hàng!", Severity.Warning);
                return;
            }
            var parameters = new DialogParameters();
            parameters.Add("Id", value1.Id);
            string nameDialog = "Danh sách thú cưng";
            DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Large,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true,
            };
            var createUpdateDialog = await _dialogservice.ShowAsync<ViewPetOfGuest>(nameDialog, parameters, options);
            var result = await createUpdateDialog.Result;
            if (result.Canceled)
            {
                createUpdateDialog.Close();
                StateHasChanged();
            }
        }
        }
    </Authorized>
    <NotAuthorized>
        <p>Không có quyền truy cập</p>
    </NotAuthorized>
</AuthorizeView>