@page "/selectBooking"
@using DATN.ADMIN.IServices
@using DATN.ADMIN.Pages.ManagerGuest
@using DATN.Utilites
@using DATN.ViewModels.DTOs.Authenticate
@using DATN.ViewModels.DTOs.Booking
@using DATN.ViewModels.DTOs.Pet
@using DATN.ViewModels.DTOs.ServiceDetail
@inject IDialogService _diagService;
@inject ISnackbar Snackbar
@inject BookingService bookingService;

<div style="display:flex;width:500px;margin-left:10px">
    <MudAutocomplete T="PetVM" Label="Chọn thú cưng" @bind-Value="value2" SearchFunc="@Search2" ToStringFunc="@(e=> e==null?null : $"{e.Name}")" />
    <MudButton @onclick="@(async()=>await OpeListPetDialog())">Thêm thú cưng</MudButton>
</div>
<div style="display:flex;width:500px;margin-left:10px">
    <MudTimePicker Label="Chọn thời gian" @bind-Time="timeStart" />
    <MudDatePicker @bind-Date="bookingDate" Label="Ngày hẹn" Editable="true" DateFormat="dd/MM/yyyy" Mask="@(new DateMask("dd/MM/yyyy"))" />
    <MudButton OnClick="@(async()=>await Create())">Tìm Kiếm</MudButton>
</div>
@code {
    [Parameter]
    public Guid idCus { get; set; }
    [Inject]
    private IBookingViewServices _iBooking { get; set; }
    [Inject]
    public IPetServiceClient petService { get; set; }
    [Inject]
    private IUserClientSev _clienById { get; set; }


    private List<GetServiceNameVM> lstServiceName = new List<GetServiceNameVM>();
    [Inject]
    public IServiceDetailServices _serviceDetailService { get; set; }
    public List<PetVM> lstPet = new List<PetVM>();
    [CascadingParameter] MudDialogInstance _dialogBox { get; set; }

    private PetVM value2;
    private IBookingViewServices _BookingSer { get; set; }
    [Inject]
    HttpContextAccessor _httpContextAccessor { get; set; }

    private List<NumberOfScheduleView> lstFreeTime = new List<NumberOfScheduleView>();
    TimeSpan? timeStart;
    TimeSpan? timeEnd;
    DateTime? bookingDate;

    private async Task<IEnumerable<PetVM>> Search2(string value)
    {
        var responsePet = await petService.GetAll();
        if (responsePet.Data.Count > 0)
        {
            lstPet = responsePet.Data.Where(x => x.OwnerId == idCus).ToList();
        }
        else
        {
            lstPet = new List<PetVM>();
        }
        if (lstPet.Count() < 0)
        {
            return lstPet = new List<PetVM>();
        }
        else
        {
            if (string.IsNullOrEmpty(value))
            {
                return lstPet;
            }
            return lstPet.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        }
    }

    protected async Task Create()
    {

        if (value2 == null)
        {
            Message("Vui lòng chọn thú cưng trước khi tìm nhân viên.", Severity.Warning);
            return;
        }
        if (timeStart == null || bookingDate == null)
        {
            Message("Vui lòng chọn ngày giờ.", Severity.Warning);
            return;
        }
        //gọi api thêm
        // int time = (int)duration / 60;
        // timeEnd = timeStart.Value.Add(new TimeSpan(time, (int)(duration - (time * 60)), 0));

        var parameters = new DialogParameters();

        parameters.Add("bookingDate", bookingDate);
        parameters.Add("timeStart", timeStart);
        //id pet
        parameters.Add("idPet",value2.Id);

            DialogOptions options = new DialogOptions()
                {
                    CloseOnEscapeKey = true,
                    Position = DialogPosition.Center,
                    MaxWidth = MaxWidth.ExtraLarge,
                    CloseButton = true,
                    FullWidth = true,
                    DisableBackdropClick = true,
                };
            var createUpdateDialog = await _diagService.ShowAsync<SelectServicesBooking3>("Chọn dịch vụ",parameters, options);
            var result2 = await createUpdateDialog.Result;
            if (!result2.Canceled)
            {
                createUpdateDialog.Close();
                StateHasChanged();
            }
            _dialogBox.Close();
    }

    public async Task OpeListPetDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("Id", idCus);
        string nameDialog = "Danh sách thú cưng";
        DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Large,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true,
            };
        var createUpdateDialog = await _diagService.ShowAsync<ViewPetOfGuest>(nameDialog, parameters, options);
        var result = await createUpdateDialog.Result;
        if (result.Canceled)
        {
            createUpdateDialog.Close();
            StateHasChanged();
        }
    }


    // protected async Task CreateBooking(Guid? id, string name)
    // {
    //     CreateBookingDetailRequest bookingCreate = new CreateBookingDetailRequest()
    //         {
    //             PetId = value2.Id,
    //             ServiceDetailName = servicedetailname,
    //             StaffName = name,
    //             StaffId = id,
    //             ServiceDetailId = idDetailsServices,
    //             Price = (double)priceServicesDetails,
    //             StartDateTime = timeStart.Value,
    //             EndDateTime = timeEnd.Value,
    //             DateBooking = bookingDate.Value,
    //         };
    //     bookingService.AddBooking(bookingCreate);
    //     // Đóng dialog sau khi thêm xong
    //     _dialogBox.Close(DialogResult.Ok(true));
    //     StateHasChanged();
    // }

    public async Task CreateBookingInDb()
    {
        try
        {
            if (await Confirm2() == true)
            {
                CreateBookingRequest createBookingRequest = new CreateBookingRequest()
                    {
                        GuestId = idCus,
                        ListIdServiceDetail = bookingService.lstBooking,
                        PaymentTypeId = 1,
                    };
                var repos = await _BookingSer.CreateBookingStore(createBookingRequest, _httpContextAccessor.HttpContext.Session.GetString("Key"));
                if (repos.IsSuccess)
                {
                    Message(repos.Data, Severity.Success);
                    StateHasChanged();
                    _dialogBox.Close();
                }
                else
                {
                    Message(repos.Error, Severity.Error);
                }
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    private async Task<bool?> Confirm2()
    {
        var confirm = await _diagService.ShowMessageBox("Thông báo",
                    "Xác nhận thêm dịch vụ?",
           yesText: "Xác nhận",
                    cancelText: "Hủy", noText: null, options: new DialogOptions { Position = DialogPosition.Center, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true });
        StateHasChanged();
        return confirm;
    }
    //thông báo
    private void Message(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add(message, severity);
    }

}
