@page "/selectBooking"
@using DATN.ADMIN.IServices
@using DATN.ADMIN.Pages.ManagerGuest
@using DATN.ViewModels.DTOs.Authenticate
@using DATN.ViewModels.DTOs.Booking
@using DATN.ViewModels.DTOs.Pet
@inject IDialogService _diagService;
@inject ISnackbar Snackbar
@inject BookingService bookingService;

<div style="display:flex;width:500px;margin-left:10px">
    <MudAutocomplete T="PetVM" Label="Chọn thú cưng" @bind-Value="value2" SearchFunc="@Search2" ToStringFunc="@(e=> e==null?null : $"{e.Name}")" />
    <MudButton @onclick="@(async()=>await OpeListPetDialog())">Thêm thú cưng</MudButton>
</div>
<div style="display:flex;width:500px;margin-left:10px">
    <MudTimePicker Label="Chọn thời gian" @bind-Time="timeStart" />
    <MudButton OnClick="@(async()=>await Create())">Tìm Kiếm</MudButton>
</div>
@if (lstFreeTime.Count > 0 && lstFreeTime != null)
{
    <MudDataGrid Items="@lstFreeTime" Groupable="false" QuickFilter="@_quickFilter" Hover="true" Filterable="true" Style="margin-top:5px">
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" MaxLength="50"></MudTextField>
        </ToolBarContent>
        <Columns>
            <TemplateColumn Title="STT" Sortable="false" Filterable="false">
                <CellTemplate>
                    <span>@(lstFreeTime.IndexOf(context.Item) + 1)</span>
                </CellTemplate>
            </TemplateColumn>

            <PropertyColumn Property="x => x.FullName" Title="Tên nhân viên" Sortable="false" Filterable="false" />
            <PropertyColumn Property="x => x.UserName" Title="Mã nhân viên" Sortable="false" Filterable="false" />
            <TemplateColumn Title="Hành động" Sortable="false" Filterable="false">
                <CellTemplate>
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Done" OnClick="@(async()=>await CreateBooking(context.Item.IdStaff,context.Item.FullName))" Color="Color.Success" title="Chọn">Chọn</MudButton>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="NumberOfScheduleView" />
        </PagerContent>
    </MudDataGrid>
}
@code {
    [Parameter]
    public double duration { get; set; }
    [Parameter]
    public Guid idCus { get; set; }
    [Parameter]
    public int idDetailsServices { get; set; }
    [Parameter]
    public float priceServicesDetails { get; set; }
    [Parameter]
    public string servicedetailname { get; set; }
    [Inject]
    private IBookingViewServices _iBooking { get; set; }

    [Inject]
    public IPetServiceClient petService { get; set; }
    [Inject]
    private IUserClientSev _clienById { get; set; }

    public List<PetVM> lstPet = new List<PetVM>();
    [CascadingParameter] MudDialogInstance _dialogBox { get; set; }
    private string searchString = "";

    private PetVM value2;

    private List<NumberOfScheduleView> lstFreeTime = new List<NumberOfScheduleView>();
    TimeSpan? timeStart;
    TimeSpan? timeEnd;
    protected async override Task OnInitializedAsync()
    {
        LoadData();
    }

    private IEnumerable<NumberOfScheduleView> LoadData()
    {
        if (lstFreeTime.Count > 0)
        {
            return lstFreeTime;
        }
        else
        {
            return lstFreeTime = new List<NumberOfScheduleView>();
        }
    }
    private async Task<IEnumerable<PetVM>> Search2(string value)
    {
        var responsePet = await petService.GetAll();
        if (responsePet.Data.Count > 0)
        {
            lstPet = responsePet.Data.Where(x => x.OwnerId == idCus).ToList();
        }
        else
        {
            lstPet = new List<PetVM>();
        }
        if (lstPet.Count() < 0)
        {
            return lstPet = new List<PetVM>();
        }
        else
        {
            if (string.IsNullOrEmpty(value))
            {
                return lstPet;
            }
            return lstPet.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        }
    }
    private Func<NumberOfScheduleView, bool> _quickFilter => x =>
       {
           if (string.IsNullOrWhiteSpace(searchString))
               return true;

           if (x.FullName.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
               return true;

           if (x.UserName.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
               return true;
           return false;
       };


    protected async Task Create()
    {

        if (value2 == null)
        {
            Message("Vui lòng chọn thú cưng trước khi tìm nhân viên.", Severity.Warning);
            return;
        }
        if (timeStart == null)
        {
            Message("Vui lòng chọn giờ.", Severity.Warning);
            return;
        }
        //gọi api thêm
        int time = (int)duration / 60;
        timeEnd = timeStart.Value.Add(new TimeSpan(time, (int)(duration - (time * 60)), 0));
        var result = await _iBooking.ListStaffFreeInTime(timeStart.Value.ToString(), timeEnd.Value.ToString());
        if (result.IsSuccess)
        {
            Message("Tìm thành công", Severity.Success);
            lstFreeTime = result.Data;
            StateHasChanged();
        }
        else
        {
            Message(result.Error, Severity.Error);
        }
    }

    public async Task OpeListPetDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("Id", idCus);
        string nameDialog = "Danh sách thú cưng";
        DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Large,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true,
            };
        var createUpdateDialog = await _diagService.ShowAsync<ViewPetOfGuest>(nameDialog, parameters, options);
        var result = await createUpdateDialog.Result;
        if (result.Canceled)
        {
            createUpdateDialog.Close();
            StateHasChanged();
        }
    }


    protected async Task CreateBooking(Guid? id,string name)
    {
        CreateBookingDetailRequest bookingCreate = new CreateBookingDetailRequest()
            {
                PetId = value2.Id,
                ServiceDetailName = servicedetailname,
                StaffName = name,
                StaffId = id,
                ServiceDetailId = idDetailsServices,
                Price = (double)priceServicesDetails,
                StartDateTime = timeStart.Value,
                EndDateTime = timeEnd.Value
            };
        bookingService.AddBooking(bookingCreate);
        // Đóng dialog sau khi thêm xong
        _dialogBox.Close(DialogResult.Ok(true));
        StateHasChanged();
    }

    //thông báo
    private void Message(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add(message, severity);
    }

}
