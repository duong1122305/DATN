@page "/booking"
@page "/"
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Popups
@using System.Collections.Generic
@using System.Globalization
<style>
	.e-date-header, .weather-text, .date-text {
		text-align: center !important;
		font-weight: 500;
		font-size: 14px;
	}

	.weather-text {
		font-size: 17px;
		color: cornflowerblue;
	}
</style>
<MudGrid>

	<MudItem xs="12" lg="2" Class="d-flex  mud-width-full py-8" Style="margin-top: -60px!important;  ">
	

		<MudCard Style=" width:100%; padding: 20px; text-align: center; " Outlined=true>
	
			<MudText >Bộ lọc</MudText>
			<MudGrid>
				<MudItem xs="2" lg="12" >
					<MudDatePicker Variant="Variant.Filled" Style="margin-bottom: 10px" Label="Tuần xem" @bind-Date="date" />
					<MudLayout Class="align-start d-flex" Style="">
						<MudButton Variant="Variant.Filled" Style="text-align: center" StartIcon="@Icons.Material.Filled.NavigateBefore" Color="Color.Primary">   </MudButton>
						<MudSpacer />
						<MudButton Variant="Variant.Filled" Style="text-align: center" StartIcon="@Icons.Material.Filled.NavigateNext" Color="Color.Primary">  </MudButton>
					</MudLayout>
				</MudItem>
				<MudItem xs="2" lg="12">
				</MudItem>
			</MudGrid>


		</MudCard>
	</MudItem>

	<MudItem xs="12" lg="10" Class="d-flex mud-width-full py-8" Style="width:100%">

		<MudPaper MaxWidth="100%" MinWidth="100%">
			<MudDynamicTabs @ref="@DynamicTabs" @bind-ActivePanelIndex="@UserIndex"
							AddTab="@AddTabCallback" CloseTab="@CloseTabCallback"
							AddIconToolTip="Click to add a new tab" CloseIconToolTip="Đóng hoá đơn hoá đơn sẽ bị huỷ"
							PanelClass="px-4 py-6" Style="margin-top: -60px!important;" Elevation="4" Rounded ApplyEffectsToContainer>

				<MudTabPanel Text="Lịch dịch vụ" ShowCloseIcon="false">

					<div>
						<SfSchedule TValue="AppointmentData" Width="100%" Height="650px" SelectedDate="CurrentDate" CurrentView="@CurrentView" StartHour="07:00" EndHour="22:00"
									TimeFormat="HH:mm" DateFormat="dd/MM/yyyy" EnableAdaptiveUI="true">
							<ScheduleEvents OnPopupOpen="OnPopupOpen" TValue="AppointmentData" EventRendered="OnEventRendered" OnDragStart="OnScheduleDag" OnResizeStart="OnScheduleResize">

							</ScheduleEvents>
							<ScheduleEventSettings DataSource="@dataSource">
								@* 	<ScheduleField>
								<FieldSubject Name="Subject" Validation="@validationRules"></FieldSubject>
								</ScheduleField> *@
							</ScheduleEventSettings>
							<ScheduleTemplates>

								<DateHeaderTemplate>
									<div class="date-text">
										@(getDateHeaderText((context as TemplateContext).Date))
										@{
											@switch ((int)(context as TemplateContext).Date.DayOfWeek)
											{
												case 0:
													<div class="weather-text">Chủ nhật</div>
													break;
												case 1:
													<div class="weather-text">Thứ Hai</div>
													break;
												case 2:
													<div class="weather-text">Thứ Ba</div>
													break;
												case 3:
													<div class="weather-text">Thứ Tư</div>
													break;
												case 4:
													<div class="weather-text">Thứ Năm</div>
													break;
												case 5:
													<div class="weather-text">Thứ Sáu</div>
													break;
												case 6:
													<div class="weather-text">Thứ Bảy</div>
													break;
											}
										}
									</div>
								</DateHeaderTemplate>
							</ScheduleTemplates>
							<ScheduleViews>
								<ScheduleView Option="View.Day" DisplayName="Ngày"></ScheduleView>
								<ScheduleView Option="View.Week" DisplayName="Tuần"></ScheduleView>
								<ScheduleView Option="View.Month" DisplayName="Tháng"></ScheduleView>
								<ScheduleView Option="View.Agenda" DisplayName="Các lịch gần"></ScheduleView>
							</ScheduleViews>
						</SfSchedule>
					</div>

					<SfDialog @bind-Visible="@IsPopupVisible" Width="300px" ShowCloseIcon="true" Header="Thông tin lịch đặt" AllowDragging="true">
						<div>
							<div class="form-group">
								<label>Tên khách hàng:</label>
								<p>@CurrentAppointment?.Subject</p>
							</div>
							<div class="form-group">
								<label>Start Time:</label>
								<p>@CurrentAppointment?.StartTime</p>
							</div>
							<div class="form-group">
								<label>End Time:</label>
								<p>@CurrentAppointment?.EndTime</p>
							</div>
							<div class="form-group">
								<label>Status Color:</label>
								<div style="background-color:@CurrentAppointment?.Status; width:100%; height:20px;"></div>
							</div>
						</div>
					</SfDialog>

				</MudTabPanel>


				@foreach (var tab in UserTabs)
				{
					<MudTabPanel ID="@tab.Id" Text="@tab.Label">
						<MudPaper Width="100%"  Height="650px">

						</MudPaper>

					</MudTabPanel>
				}
			</MudDynamicTabs>
		</MudPaper>
		


	</MudItem>
</MudGrid>
@code {


	public class TabView
	{
		public string Label { get; set; }
		public string Content { get; set; }
		public Guid Id { get; set; }
		public int Index { get; set; }
	}
	DateTime? date = DateTime.Today;
	public MudDynamicTabs DynamicTabs;
	public List<TabView> UserTabs = new();
	public int UserIndex;
	bool _stateHasChanged;
	bool _showCloseIcon = false;

	void RestoreUserTabs()
	{
		UserTabs.Clear();
		UserTabs.Add(new TabView { Id = Guid.NewGuid(), Label = "Hoá đơn 1", Index = 1 });
		UserIndex = 0;
		_stateHasChanged = true;
	}

	protected override async Task OnInitializedAsync()
	{
		RestoreUserTabs();
		CurrentDate = new DateTime(2024, 6, 18, 10, 0, 0);
		GetScheduleData();
	}

	protected override void OnAfterRender(bool firstRender)
	{
		base.OnAfterRender(firstRender);
		if (_stateHasChanged)
		{
			_stateHasChanged = false;
			StateHasChanged();
		}
	}


	public void AddTab(Guid id)
	{
		int NewTabIndex = UserTabs.Count() == 0 ? 1 : UserTabs.Last().Index + 1;
		UserTabs.Add(new TabView { Id = id, Label = $"Hoá đơn {NewTabIndex} ", Content = $"Tab ID: {id}", Index = NewTabIndex });
		UserIndex = UserTabs.Count - 1; // Automatically switch to the new tab.
		_stateHasChanged = true;
	}

	public void RemoveTab(Guid id)
	{
		var tabView = UserTabs.SingleOrDefault((t) => Equals(t.Id, id));
		if (tabView is not null)
		{
			UserTabs.Remove(tabView);
			_stateHasChanged = true;
		}
	}

	void AddTabCallback() => AddTab(Guid.NewGuid());
	void CloseTabCallback(MudTabPanel panel) => RemoveTab((Guid)panel.ID);

	/// <summary>
	/// lịch
	/// </summary>
	public View CurrentView { get; set; } = View.Week;    ///
	private DateTime CurrentDate { get; set; }
	private List<AppointmentData> dataSource = new List<AppointmentData>();
	private bool IsPopupVisible { get; set; } = false;
	private AppointmentData CurrentAppointment { get; set; }
	ValidationRules validationRules = new ValidationRules
		{
			Required = true,
			RegexPattern = "^[a-zA-Z0-9- ]*$",
			Messages = new Dictionary<string, object>() { { "regex", "Tên dài vào" } }
		};

	public void OnPopupOpen(PopupOpenEventArgs<AppointmentData> args)
	{
		if (args.Type == PopupType.QuickInfo && args.Data.Id != 0)
		{
			args.Cancel = true; // Hủy bỏ popup mặc định
			CurrentAppointment = args.Data; // Lấy dữ liệu cuộc hẹn hiện tại
			IsPopupVisible = true; // Hiển thị popup tùy chỉnh
		}
	}

	public async Task GetScheduleData(NavigatingEventArgs args = null)
	{
		dataSource = new List<AppointmentData>
		{
			new AppointmentData { Id = 1 , Subject = "Chờ xác nhận", StartTime = new DateTime(2024, 6, 18, 10, 0, 0) , EndTime = new DateTime(2024, 6, 18, 12, 0, 0), Status=BookingStatus.PendingConfirmation },
			new AppointmentData { Id =2, Subject = "Chờ khách đến",  StartTime = new DateTime(2024, 6, 19, 10, 0, 0) , EndTime = new DateTime(2024, 6, 19, 12, 0, 0),Status=BookingStatus.Confirmed},
			new AppointmentData { Id = 3, Subject = "Đang Chờ",  StartTime = new DateTime(2024, 6, 20, 10, 0, 0) , EndTime = new DateTime(2024, 6, 20, 12, 0, 0),Status=BookingStatus.Arrived },
			new AppointmentData { Id =4, Subject = "Đang làm",  StartTime = new DateTime(2024, 6, 21, 10, 0, 0) , EndTime = new DateTime(2024, 6, 21, 12, 0, 0),Status=BookingStatus.InProgress },
			new AppointmentData { Id = 5, Subject = "Làm xong",  StartTime = new DateTime(2024, 6, 22, 10, 0, 0) , EndTime = new DateTime(2024, 6, 22, 12, 0, 0),Status=BookingStatus.Completed }
		};
	}

	public void OnEventRendered(EventRenderedArgs<AppointmentData> args)
	{
		Dictionary<string, object> attributes = new Dictionary<string, object>();
		if (CurrentView == View.Agenda)
		{
			attributes.Add("style", "border-left-color: ");
		}
		else
		{
			switch (args.Data.Status)
			{
				case BookingStatus.PendingConfirmation:
					attributes.Add("style", $"background: #e0e0e0; color : black; padding: 10px;  border-radius: 10px;");
					break;
				case BookingStatus.Confirmed:
					attributes.Add("style", $"background: #7e7e7e;  padding: 10px;  border-radius: 10px;");
					break;
				case BookingStatus.Arrived:
					attributes.Add("style", $"background: #fbc192;  color : black; padding: 10px;  border-radius: 10px;");
					break;
				case BookingStatus.InProgress:
					attributes.Add("style", $"background: #179e74;  padding: 10px;  border-radius: 10px;");
					break;
				case BookingStatus.Completed:
					attributes.Add("style", $"background: #92bbe6; color : #213762; padding: 10px;  border-radius: 10px;");
					break;
			}

		}
		args.Attributes = attributes;
	}


	public class AppointmentData
	{
		public int Id { get; set; }
		public string Subject { get; set; }//tên khách hàng
		public string Description { get; set; }// tên dịch bụ
		public int BookingId { get; set; }//
		public int BookingServiceID { get; set; }
		public DateTime StartTime { get; set; }
		public DateTime EndTime { get; set; }
		public BookingStatus Status { get; set; }
	}

	public enum BookingStatus
	{
		PendingConfirmation, // Chờ xác nhận
		Confirmed,           // Đã xác nhận
		Arrived,             // Đã đến nơi
		InProgress,          // Đang thực hiện
		Completed,           // Đã hoàn thành
		NoShow,              // Khách không đến
		CustomerCancelled,   // Khách huỷ
		StaffCancelled,      // Nhân viên huỷ
		AdminCancelled       // Admin huỷ
	}
	public async Task OnScheduleResize(ResizeEventArgs<AppointmentData> args)
	{
		args.Interval = 5;

	}
	public async Task OnScheduleDag(DragEventArgs<AppointmentData> args)
	{
		args.Interval = 5;
	}
	public static string getDateHeaderText(DateTime date)
	{
		return "Ngày: " + date.ToString("dd-MM");
	}
}