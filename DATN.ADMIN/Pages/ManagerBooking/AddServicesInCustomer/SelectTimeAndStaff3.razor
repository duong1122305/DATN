@using DATN.ADMIN.Components
@using DATN.ADMIN.IServices
@using DATN.ADMIN.Pages.ManagerGuest
@using DATN.Utilites
@using DATN.ViewModels.DTOs.Authenticate
@using DATN.ViewModels.DTOs.Booking
@using DATN.ViewModels.DTOs.Pet
@using DATN.ViewModels.DTOs.ServiceDetail
@using DATN.ViewModels.Enum
@inject IDialogService _diagService;
@inject ISnackbar Snackbar
<MudDataGrid Items="@lstServiceName" QuickFilter="@_quickFilter" Filterable="true">
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0" MaxLength="50"></MudTextField>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="@(async()=>await CreateBooking())" Color="Color.Primary" Disabled="@(!IsAnyUserSelected)" Style="margin-bottom: 10px" title="Tiếp tục">Lấy dịch vụ đã chọn</MudButton>

    </ToolBarContent>
    <Columns>
        <TemplateColumn Title="Chọn" Sortable="false" Filterable="false">
            <CellTemplate>
                <MudCheckBox @bind-Checked="selectedServices[lstServiceName.IndexOf(context.Item)]" />
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="STT" Sortable="false" Filterable="false">
            <CellTemplate>
                @(lstServiceName.IndexOf(context.Item) + 1)
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x=>x.ServiceName" Title="Tên chi dịch vụ" Sortable="false" Filterable="false" />
        <TemplateColumn Title="Giá" Sortable="false" Filterable="false">
            <CellTemplate>
                @(CurrencyHelper.FormatCurrency(context.Item.Price))
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Thời gian làm" Sortable="false" Filterable="false">
            <CellTemplate>
                @context.Item.Duration <span>Phút</span>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x=>x.Description" Title="Mô tả" Sortable="false" Filterable="false" />
        <TemplateColumn Sortable="false" Filterable="false" Title="Trạng thái">
            <CellTemplate>
                @if (!context.Item.IsDeleted)
                {
                    <span>
                        <MudChip Color="Color.Success" title="Hoạt động">Phục vụ</MudChip>
                    </span>
                }
                else
                {
                    <span>
                        <MudChip Color="Color.Error" title="Hoạt động">Ngưng phục vụ</MudChip>
                    </span>
                }
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="GetServiceNameVM" />
    </PagerContent>
</MudDataGrid>
@code {
    [Parameter]
    public Guid idCustomer { get; set; }
    [Parameter]
    public DateTime? bookingDate { get; set; }
    [Parameter]
    public TimeSpan? timeStart { get; set; }
    [Parameter]
    public int idBooking { get; set; }
    [Parameter]
    public int idPet { get; set; }

    private List<GetServiceNameVM> lstServiceName = new List<GetServiceNameVM>();
    [Inject]
    public IServiceDetailServices _serviceDetailService { get; set; }

    [CascadingParameter] MudDialogInstance _dialogBox { get; set; }

    private bool IsAnyUserSelected => selectedServices.Any(selected => selected);

    private List<bool> selectedServices = new List<bool>();

    [Inject]
    private BookingService bookingService { get; set; }

    [Inject]
    private IBookingViewServices _iBooking { get; set; }

    private string searchString = "";

    [Inject]
    HttpContextAccessor _httpContextAccessor { get; set; }


    protected async override Task OnInitializedAsync()
    {
        var result = await _serviceDetailService.GetServiceName();
        if (result != null)
        {
            lstServiceName = result;
        }
        selectedServices = Enumerable.Repeat(false, lstServiceName.Count).ToList();
    }

    private Func<GetServiceNameVM, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (x.ServiceName.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{x.Duration} {x.Price} {x.Description}".Contains(searchString.Trim()))
            return true;
        return false;
    };

    public async Task OpeListPetDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("Id", idCustomer);
        string nameDialog = "Danh sách thú cưng";
        DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Large,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true,
            };
        var createUpdateDialog = await _diagService.ShowAsync<ViewPetOfGuest>(nameDialog, parameters, options);
        var result = await createUpdateDialog.Result;
        if (result.Canceled)
        {
            createUpdateDialog.Close();
            StateHasChanged();
        }
    }


    private async Task CreateBooking()
    {
        try
        {

            if (await Confirm2() == true)
            {
                var selectServiceIndex = selectedServices.Select((value, index) => (value, index)).Where(pair => pair.value).Select(pair => pair.index).ToList();
                var selectServiceIndex2 = selectServiceIndex.Select(index => lstServiceName[index]).ToList();
                List<BookingDetailView> listAdd = new List<BookingDetailView>();

                foreach (var item in selectServiceIndex2)
                {
                    var booking = new BookingDetailView
                        {
                            ServiceDetailName = item.Description,
                            ServiceDetailId = item.ServiceDetailId,
                            DateBooking = bookingDate.Value,
                            EndDateTime = timeStart.Value,
                            StartDateTime = timeStart.Value,
                            Price = item.Price,
                        };
                    listAdd.Add(booking);
                }
                var bookingDetail = new AddBookingDetail
                    {
                        // Gán các giá trị từ dịch vụ đã chọn vào đối tượng CreateBookingDetailRequest
                        PetId = idPet,
                        ListServiceDetail = listAdd,
                        BookingId = idBooking,
                        Token = _httpContextAccessor.HttpContext.Session.GetString("Key")
                    };
                var options = new DialogOptions { CloseOnEscapeKey = false, CloseButton = false, FullScreen = true };
                var dialog = await _diagService.ShowAsync<LoadingIndicator>("", options);
                StateHasChanged();
                var respone = await _iBooking.AddService(bookingDetail);
                if (respone.IsSuccess)
                {
                    Message(respone.Data, Severity.Success);
                    StateHasChanged();
                    dialog.Close();
                    _dialogBox.Close();
                }
                else
                {
                    Message(respone.Error, Severity.Error);
                }
            }
            else
            {
                Message("Đã có lỗi!", Severity.Error);
            }
        }
        catch (Exception e)
        {

            throw;
        }
    }

    private async Task<bool?> Confirm2()
    {
        var confirm = await _diagService.ShowMessageBox("Thông báo",
                    "Xác nhận thêm dịch vụ?",
           yesText: "Xác nhận",
                    cancelText: "Hủy", noText: null, options: new DialogOptions { Position = DialogPosition.Center, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true });
        StateHasChanged();
        return confirm;
    }
    //thông báo
    private void Message(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add(message, severity);
    }

}
