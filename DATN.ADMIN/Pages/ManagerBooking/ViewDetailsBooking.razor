<AuthorizeView>
    <Authorized>
        @inject ISnackbar Snackbar
        @inject IDialogService _diagService;
        @inject HttpClient httpClient
        @using DATN.ADMIN.IServices
        @using DATN.ADMIN.Pages.ManagerBooking.AddServicesInCustomer
        @using DATN.ADMIN.Pages.ManagerGuest
        @using DATN.Data.Enum
        @using DATN.Utilites
        @using DATN.ViewModels.Common
        @using DATN.ViewModels.DTOs.ActionBooking
        @using DATN.ViewModels.DTOs.Authenticate
        @using DATN.ViewModels.DTOs.Booking
        @using DATN.ViewModels.DTOs.Pet
        @using DATN.ViewModels.Enum
        @inject IDialogService _dialogservice;

        @if (lstBooking != null && lstBooking.Count > 0)
        {
            <MudDataGrid MultiSelection="true" Items="@lstBooking" Filterable="true"
                         Hideable="true" Groupable="true" GroupExpanded="false">
                <ToolBarContent>
                    @if (status == BookingStatus.AdminCancelled || status == BookingStatus.StaffCancelled ||status == BookingStatus.Completed)
                    {
                        <MudButton Disabled OnClick="@(async () => await OpenDialogServices())" Style="margin-top: 10px; margin-left: 10px;" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary">Thêm</MudButton>
                        <MudButton Disabled @onclick="@(async() => await OpeListPetDialog())" Style="margin-top: 10px; margin-left: 10px;" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary">Thêm thú cưng</MudButton>

                    }
                    else
                    {
                        <MudButton OnClick="@(async () => await OpenDialogServices())" Style="margin-top: 10px; margin-left: 10px;" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary">Thêm</MudButton>
                        <MudButton @onclick="@(async() => await OpeListPetDialog())" Style="margin-top: 10px; margin-left: 10px;" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary">Thêm thú cưng</MudButton>

                    }
                    <MudSpacer />

                    <div style="display: flex">
                        <!-- Time Picker Section -->
                        <div style="display: flex; flex-direction: column; margin-bottom: 10px;margin-right:10px">
                            @if (!payment && status != BookingStatus.AdminCancelled || status != BookingStatus.StaffCancelled || status != BookingStatus.Completed)
                            {
                                <MudTimePicker Label="Chọn thời gian" @bind-Time="timeStart" />
                                @if (timeStart != null)
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.Clear"
                                                   Color="Color.Error"
                                                   Size="MudBlazor.Size.Small"
                                                   Disabled="@isEditing"
                                                   OnClick="ClearTimeStart"
                                                   Style="margin-left: 8px;"
                                                   ToolTip="Xoá thời gian">
                                    </MudIconButton>
                                }
                            }
                            else
                            {
                                <MudTimePicker Disabled Label="Chọn thời gian" @bind-Time="timeStart" />
                            }
                        </div>

                        <!-- Pet Selection Section -->
                        <div style="display: flex; flex-direction: column;">
                            @if (!payment && status != BookingStatus.AdminCancelled || status != BookingStatus.StaffCancelled || status == BookingStatus.Completed)
                            {
                                <MudAutocomplete T="PetVM" Label="Chọn thú cưng" @bind-Value="value2" SearchFunc="@Search2" ToStringFunc="@(e => e == null ? null : $"{e.Name}")" />
                                @if (value2 != null)
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.Clear"
                                                   Color="Color.Error"
                                                   Size="MudBlazor.Size.Small"
                                                   Disabled="@isEditing2"
                                                   OnClick="ClearPetSelection"
                                                   Style="margin-left: 8px;"
                                                   ToolTip="Xoá lựa chọn thú cưng">
                                    </MudIconButton>
                                }
                            }
                            else
                            {
                                <MudAutocomplete Disabled T="PetVM" Label="Chọn thú cưng" @bind-Value="value2" SearchFunc="@Search2" ToStringFunc="@(e => e == null ? null : $"{e.Name}")" />
                                <MudButton Disabled @onclick="@(async() => await OpeListPetDialog())">Thêm thú cưng</MudButton>
                            }
                        </div>
                    </div>
                </ToolBarContent>
                <Columns>
                    <TemplateColumn Title="STT" Sortable="false" Filterable="false">
                        <CellTemplate Context="data">
                            <span>@(lstBooking.IndexOf(data.Item) + 1)</span>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.NameStaffService" Title="Nhân viên làm" Filterable="false" Groupable="false" />
                    <PropertyColumn Property="x => x.PetName" Title="Thú cưng" Filterable="false" Groupable="false" />
                    <PropertyColumn Property="x => x.ServiceDetaiName" Title="Dịch vụ làm" Filterable="false" Groupable="false" />
                    <TemplateColumn Title="Giờ bắt đầu(Dự kiến)" Sortable="false" Filterable="false">
                        <CellTemplate Context="data">
                            <span style="text-align:center;">@data.Item.StartDate</span>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Giờ kết thúc(Dự kiến)" Sortable="false" Filterable="false">
                        <CellTemplate Context="data">
                            <span style="text-align:center;">@data.Item.EndDate</span>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Thời gian đặt" Sortable="false" Filterable="false">
                        <CellTemplate Context="data">
                            <span style="text-align:center;">@data.Item.BookingTime.ToString("dd/MM/yyyy")</span>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Giá" Sortable="false" Filterable="false">
                        <CellTemplate Context="data">
                            <span style="text-align:center;">@CurrencyHelper.FormatCurrency((float)data.Item.Price)</span>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Trạng thái" Sortable="false" Filterable="false">
                        <CellTemplate Context="data">
                            @if (data.Item.Status == BookingDetailStatus.Completed)
                            {
                                <MudChip Color="Color.Success">Đã hoàn thành</MudChip>
                            }
                            else if (data.Item.Status == BookingDetailStatus.Cancelled)
                            {
                                <MudChip Color="Color.Error">Đã hủy</MudChip>
                            }
                            else if (data.Item.Status == BookingDetailStatus.Processing)
                            {
                                <MudChip Color="Color.Info">Đang thực hiện</MudChip>
                            }
                            else
                            {
                                <MudChip Color="Color.Secondary">Chưa hoàn thành</MudChip>
                            }
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Hành động" Sortable="false" Filterable="false">
                        <CellTemplate Context="data">
                            <MudButton StartIcon="@Icons.Material.Filled.Done" Color="Color.Success" OnClick="@(async()=>await SuccessServices(data.Item.IdBookingDetail.Value))">Hoàn thành</MudButton>
                            <MudButton StartIcon="@Icons.Material.Filled.Start" Color="Color.Success" OnClick="@(async()=>await StartServices(data.Item.IdBookingDetail.Value))">Thực hiện</MudButton>
                            <MudButton StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Error" OnClick="@(async()=>await CancelServices(data.Item.IdBookingDetail.Value))">Huỷ dịch vụ</MudButton>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="ListBokingDetailInDay" />
                </PagerContent>
            </MudDataGrid>
        }
        else
        {
            <div style="justify-content:center; justify-items:center">
                <MudProgressCircular Color="Color.Default" Indeterminate="true" />
            </div>
        }
        @code {
        [Parameter]
        public int id { get; set; }
        [Parameter]
        public bool payment { get; set; }
        [Parameter]
        public DateTime bookingDate { get; set; }
        [Parameter]
        public BookingStatus status { get; set; }

        private bool isEditing = false;
        private bool isEditing2;
        [Parameter]
        public Guid idGuest { get; set; }
        [Inject]
        IBookingViewServices _client { get; set; }
        TimeSpan? timeStart;
        public List<PetVM> lstPet = new List<PetVM>();
        private PetVM value2;

        public List<ListBokingDetailInDay> lstBooking { get; set; } = new List<ListBokingDetailInDay>();
        [Inject]
        public IPetServiceClient petService { get; set; }
        [Inject]
        private IHttpContextAccessor _httpContextAccessor { get; set; }

        [Inject] private BookingService bookingService { get; set; }

        private bool CanSelectPet => value2 == null && lstBooking.Count == 0;
        private bool CanSelectTime => timeStart == null && lstBooking.Count == 0;

        protected async override Task OnInitializedAsync()
        {
            await LoadData();
            timeStart = lstBooking.OrderByDescending(c => c.EndDate).ToList().FirstOrDefault().EndDate.Value.TimeOfDay;
        }

        protected async Task LoadData()
        {
            var respone = await _client.ListBookingDetailInDay(id);
            if (respone.IsSuccess)
            {
                lstBooking = respone.Data.OrderBy(x => x.StartDate).ToList();
            }
            else
            {
                lstBooking = new List<ListBokingDetailInDay>();
            }
        }
        private void ClearTimeStart()
        {
            timeStart = null;
            // Cập nhật lại trạng thái giao diện
            StateHasChanged();
        }

        private void ClearPetSelection()
        {
            value2 = null;
            // Cập nhật lại trạng thái giao diện
            StateHasChanged();
        }
        private async Task SuccessServices(int idS)
        {
            var confirm = await Confirm("hoàn thành");
            if (!confirm)
            {
                return;
            }
            ActionView actionView = new ActionView()
            {
                IdBokingOrDetail = idS,
                Token = _httpContextAccessor.HttpContext.Session.GetString("Key")

            };
            var respone = await _client.CompleteBookingDetail(actionView);
            if (respone.IsSuccess)
            {
                Snackbar.Add(respone.Data, Severity.Success);
                await LoadData();
                StateHasChanged();
            }
            else
            {
                Snackbar.Add(respone.Error, Severity.Error);
            }
        }

        private async Task StartServices(int id)
        {
            var confirm = await Confirm("bắt đầu");
            if (!confirm)
            {
                return;
            }
            ActionView actionView = new ActionView()
            {
                IdBokingOrDetail = id,
                Token = _httpContextAccessor.HttpContext.Session.GetString("Key")

            };
            var respone = await _client.StartBookingDetail(actionView);
            if (respone.IsSuccess)
            {
                Snackbar.Add(respone.Data, Severity.Success);
                await LoadData();
                StateHasChanged();
            }
            else
            {
                Snackbar.Add(respone.Error, Severity.Error);
            }
        }
        private async Task CancelServices(int id)
        {
            var parameters = new DialogParameters();
            string nameDialog = "Huỷ dịch vụ";
            DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Small,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true
            };
            parameters.Add("id", id);
            var createUpdateDialog = await _diagService.ShowAsync<CanelBookinggDetails>(nameDialog, parameters, options);
            var result = await createUpdateDialog.Result;
            if (!result.Canceled)
            {
                createUpdateDialog.Close();
                await LoadData();
            }
        }

        private async Task<bool> Confirm(string text)
        {
            var confirm = await _diagService.ShowMessageBox("Thông báo", $"Xác nhận {text} dịch vụ?",
            yesText: "Xác nhận",
            cancelText: "Hủy", noText: null,
            options: new DialogOptions { Position = DialogPosition.TopCenter, MaxWidth = MaxWidth.Small, FullWidth = true });
            StateHasChanged();
            if (!confirm.HasValue) return false;
            return confirm.Value;
        }
        public async Task OpenDialogServices()
        {
            if (timeStart == null)
            {
                Snackbar.Add("Vui lòng chọn giờ!", Severity.Warning);
                return;
            }
            if (value2 == null)
            {
                Snackbar.Add("Vui lòng chọn thú cưng!", Severity.Warning);
                return;
            }
            string nameDialog = "Chọn dịch vụ";
            var parameters = new DialogParameters();
            // parameters.Add("idCus", idGuest);
            parameters.Add("idBooking", id);

            parameters.Add("bookingDate", bookingDate);
            parameters.Add("timeStart", timeStart);
            //id pet
            parameters.Add("idPet", value2.Id);
            DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Medium,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true,
            };
            var createUpdateDialog = await _dialogservice.ShowAsync<SelectTimeAndStaff3>(nameDialog, parameters, options);
            var result = await createUpdateDialog.Result;
            if (!result.Cancelled)
            {
                createUpdateDialog.Close();
                StateHasChanged();
                timeStart = null;
                value2 = null;
                await LoadData();
            }

        }
        private async Task<IEnumerable<PetVM>> Search2(string value)
        {
            var responsePet = await petService.GetAll();
            if (responsePet.Data.Count > 0)
            {
                lstPet = responsePet.Data.Where(x => x.OwnerId == idGuest).ToList();
            }
            else
            {
                lstPet = new List<PetVM>();
            }
            if (lstPet.Count() < 0)
            {
                return lstPet = new List<PetVM>();
            }
            else
            {
                if (string.IsNullOrEmpty(value))
                {
                    return lstPet;
                }
                return lstPet.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
            }
        }
        public async Task OpeListPetDialog()
        {
            var parameters = new DialogParameters();
            parameters.Add("Id", idGuest);
            string nameDialog = "Danh sách thú cưng";
            DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Large,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true,
            };
            var createUpdateDialog = await _diagService.ShowAsync<ViewPetOfGuest>(nameDialog, parameters, options);
            var result = await createUpdateDialog.Result;
            if (result.Canceled)
            {
                createUpdateDialog.Close();
                StateHasChanged();
            }
        }

        }
    </Authorized>
    <NotAuthorized>
        <p>Không có quyền truy cập</p>
    </NotAuthorized>
</AuthorizeView>