@page "/CreateBookingCustomer"
@using DATN.ADMIN.IServices
@using DATN.ADMIN.Pages.ManagerGuest
@using DATN.ADMIN.Pages.ManagerServices
@using DATN.ViewModels.DTOs.Guest
@using DATN.ViewModels.DTOs.Pet
@inject IDialogService _dialogservice;
@inject ISnackbar Snackbar
<MudForm Style="text-align:center;margin-bottom:20px">
    <MudItem xs="12" sm="6" md="4">
        <div style="display:flex;width:400px;text-align:center;margin-left:10px">
            <MudAutocomplete T="GuestViewModel" Label="Chọn khách hàng" ValueChanged="Change" SearchFunc="@Search" ToStringFunc="@(e=> e==null?null : $"{e.Name} ({e.PhoneNumber})")"/>
        </div>
        <div style="display:flex;width:400px;text-align:justify">
            <MudButton OnClick="@(async()=>await OpenDialog())" Style="margin-top:10px" StartIcon="@Icons.Material.Filled.Add" Color="Color.Secondary">Thêm khách hàng</MudButton>
            <MudButton OnClick="@(async()=>await OpenDialogServices())" Style="margin-top:10px" StartIcon="@Icons.Material.Filled.Add" Color="Color.Secondary">Chọn dịch vụ</MudButton>
        </div>
    </MudItem>
</MudForm>

@code {
    [Inject]
    private IGuestManagerClient _guestService { get; set; }
    private List<GuestViewModel> lstGuest = new List<GuestViewModel>();

    [Inject]
    public IPetServiceClient petService { get; set; }
    public List<PetVM> lstPet = new List<PetVM>();


    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    protected async Task LoadData()
    {
        //var response = await _client.GetGuest();
        var response = await _guestService.GetGuest();
        lstGuest = response.Data;

        //var response = await _client.lstpet();

        StateHasChanged();
    }

    //tìm kiếm khách hàng
    private GuestViewModel value1;
    private string[] guest;
    private async Task<IEnumerable<GuestViewModel>> Search(string value)
    {
        await Task.Delay(5); // Simulate async operation
        if (lstGuest.Count < 0)
        {
            return lstGuest = new List<GuestViewModel>();
        }
        else
        {
            if (string.IsNullOrEmpty(value))
            {
                value1 = null;
                return lstGuest;
            }
            return lstGuest.Where(x => x.Name.Contains(value.TrimStart().TrimEnd(), StringComparison.InvariantCultureIgnoreCase));
        }
    }

    private async Task<IEnumerable<PetVM>> Search2(string value)
    {
        if (lstPet.Count() < 0)
        {
            return lstPet = new List<PetVM>();
        }
        else
        {
            if (string.IsNullOrEmpty(value))
            {
                return lstPet;
            }
            return lstPet.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        }
    }
    private async Task Change(GuestViewModel value)
    {
        value1 = value;
        var responsePet = await petService.GetAll();
        if (responsePet.Data.Count > 0)
        {
            lstPet = responsePet.Data.Where(x => x.OwnerId == value.Id).ToList();
        }
        else
        {
            lstPet = new List<PetVM>();
        }
    }

    public async Task OpenDialog()
    {

        string nameDialog = "Thêm mới khách hàng";
        DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Small,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true,
            };
        var createUpdateDialog = await _dialogservice.ShowAsync<CreateUpdateGuest>(nameDialog, options);
        var result = await createUpdateDialog.Result;
        if (!result.Canceled)
        {
            createUpdateDialog.Close();
            await LoadData();
            StateHasChanged();
        }
    }
    public async Task OpenDialogServices()
    {
        if (value1 == null)
        {
            Message("Vui lòng chọn khách hàng trước khi chọn dịch vụ.", Severity.Warning);
            return;
        }
        var id = value1.Id;
        string nameDialog = "Chọn dịch vụ";
        var parameters = new DialogParameters();
        parameters.Add("idCustomer",id);
        DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraLarge,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true,
            };
        var createUpdateDialog = await _dialogservice.ShowAsync<SelectServicesBooking>(nameDialog,parameters, options);
        var result = await createUpdateDialog.Result;
        if (!result.Canceled)
        {
            createUpdateDialog.Close();
            await LoadData();
            StateHasChanged();
        }

    }
    private void Message(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add(message, severity);
    }
}