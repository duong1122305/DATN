@page "/ViewListShudule"
@using System.Net.Http.Json
@using DATN.ADMIN.IServices
@using DATN.ViewModels.Common
@using DATN.ViewModels.DTOs.Authenticate
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IDialogService _dialogservice;
<PageTitle>Lịch làm việc</PageTitle>
<MudButton Variant="Variant.Filled" Style="margin-bottom:10px" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@(async()=>await CreateCa())" title="Thêm ca 1 tháng tiếp theo">Thêm ca 1 tháng tiếp theo</MudButton>
<MudButton Variant="Variant.Filled" Style="margin-bottom:10px" StartIcon="@Icons.Material.Filled.Add" OnClick="@(async()=>await CreateMonthNow())" Color="Color.Primary" title="Danh sách nhân viên">Thêm ca cho tháng hiện tại</MudButton>
<MudButton Variant="Variant.Filled" Style="margin-bottom:10px" StartIcon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Primary" OnClick="@ExpandAllGroups">Mở hết danh sách</MudButton>

<MudSelect T="int" Label="Chọn khoảng thời gian" ValueChanged="Change">
    <MudSelectItem Value="-90">90 ngày trước</MudSelectItem>
    <MudSelectItem Value="-60">60 ngày trước</MudSelectItem>
    <MudSelectItem Value="-30">30 ngày trước</MudSelectItem>
    <MudSelectItem Value="-14">14 ngày trước</MudSelectItem>
    <MudSelectItem Value="-7">7 ngày trước</MudSelectItem>
    <MudSelectItem Value="7">7 ngày tới</MudSelectItem>
    <MudSelectItem Value="14">14 ngày tới</MudSelectItem>
    <MudSelectItem Value="30">30 ngày tới</MudSelectItem>
    <MudSelectItem Value="60">60 ngày tới</MudSelectItem>
    <MudSelectItem Value="90">90 ngày tới</MudSelectItem>
</MudSelect>

@if (lstUser.Count > 0 && lstUser != null)
{
    <MudDataGrid @ref="dataGrid" MultiSelection="true" Items="@lstUser" Filterable="true"
                 Hideable="true" Groupable="true" GroupExpanded="false" QuickFilter="_quickFilter">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Ca làm của nhân viên</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" MaxLength="50"></MudTextField>
        </ToolBarContent>
        <Columns>
            <TemplateColumn Title="Ngày thực hiện" Grouping GroupBy="@_groupBy" Sortable="false" Filterable="false">
                <GroupTemplate>
                    <span style="font-weight:bold">@context.Grouping.Key</span>
                </GroupTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.Shift" Title="Ca làm" Filterable="false" Groupable="false" />
            <PropertyColumn Property="x => x.Name" Title="Số người" Filterable="false" Groupable="false" />
            <TemplateColumn Title="Giờ bắt đầu" Sortable="false" Filterable="false">
                <CellTemplate>
                    <span style="text-align:center;">@context.Item.From.ToString(@"hh\:mm")</span>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Giờ kết thúc" Sortable="false" Filterable="false">
                <CellTemplate>
                    <span style="text-align:center;">@context.Item.To.ToString(@"hh\:mm")</span>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Ngày làm" Sortable="false" Filterable="false">
                <CellTemplate>
                    <span style="text-align:center;">@context.Item.WorkDate.ToString("dd/MM/yyyy")</span>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Trạng thái" Sortable="false" Filterable="false">
                <CellTemplate>
                    @if (dateNow.Month == context.Item.WorkDate.Month && dateNow.Day == context.Item.WorkDate.Day && dateNow.Year == context.Item.WorkDate.Year)
                    {
                        @if (dateNow.Hour < context.Item.From.Hours)
                        {
                            <span DataLabel="WorkDate" Style="text-align:center;">Chưa diễn ra</span>
                        }
                        else if (dateNow.Hour > context.Item.From.Hours && dateNow.Hour < context.Item.To.Hours)
                        {
                            <span DataLabel="WorkDate" Style="text-align:center;">Đang diễn ra</span>
                        }
                        else if (dateNow.Hour > context.Item.To.Hours)
                        {
                            <span DataLabel="WorkDate" Style="text-align:center;">Đã diễn ra</span>

                        }
                    }
                    else
                    {
                        <span DataLabel="WorkDate" Style="text-align:center;">Chưa diễn ra</span>
                    }
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x=>x.ShiftID" Title="Hành động" Filterable="false" Sortable="false">
                <CellTemplate>
                    <MudTd Style="text-align:center;">
                        <MudButtonGroup Variant="Variant.Filled">
                            <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.RemoveRedEye" Title="Xem nhân viên trong ca" OnClick="@(async()=>await OpenDialog(context.Item.ShiftID,context.Item.WorkDate,context.Item.From.Hours,context.Item.To.Hours))"></MudIconButton>
                        </MudButtonGroup>
                    </MudTd>
                </CellTemplate>
            </PropertyColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="ScheduleView" />
        </PagerContent>
    </MudDataGrid>
}
else
{
    <div style="justify-content:center; justify-items:center">
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    </div>
}
@code {
    private DateTime dateNow = DateTime.Now;
    private int selectedTimeRange;
    MudDataGrid<ScheduleView> dataGrid;
    bool _customizeGroupTemplate;
    static bool _customizeGroupBy;
    //button trạng thái
    private bool _disableElevation = false;
    //hiệu ứng hover
    private bool hover = true;

    private string searchString = "";
    private List<ScheduleView> lstUser = new List<ScheduleView>();
    [Inject]
    IUserClientSev _client { get; set; }
    [Inject]
    IEmployeeScheduleSer _Employyes { get; set; }
    private Func<ScheduleView, string> _groupBy = x =>
     {
         if (_customizeGroupBy)
         {
             return x.Name;
         }
         else
         {
             return x.WorkDate.ToString("dd/MM/yyyy");
         }
     };
    void ExpandAllGroups()
    {
        dataGrid?.ExpandAllGroups();
    }
    protected async Task LoadData()
    {
        try
        {
            var user = await _client.GetAllCaNhanVien();
            if (!user.IsSuccess)
            {
                lstUser = new List<ScheduleView>();
            }
            else
            {
                if (selectedTimeRange > 0)
                {
                    lstUser = user.Data.Where(c => c.WorkDate.Month > dateNow.Month ? c.WorkDate.Day > 0 : c.WorkDate.Day >= dateNow.Day && c.WorkDate.Month >= dateNow.Month && c.WorkDate.Year == dateNow.Year).Take(selectedTimeRange).ToList();
                }
                else if (selectedTimeRange < 0)
                {
                    lstUser = user.Data.Where(c => c.WorkDate.Day <= dateNow.Day && c.WorkDate.Month <= dateNow.Month && c.WorkDate.Year == dateNow.Year).OrderByDescending(c => c.WorkDate).Take(-selectedTimeRange).OrderBy(c => c.WorkDate).ToList();
                }
                else
                {
                    lstUser = user.Data.Where(c => c.WorkDate.Day >= dateNow.Day && c.WorkDate.Month >= dateNow.Month && c.WorkDate.Year == dateNow.Year).Take(7).ToList();
                }
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions if needed
            Console.WriteLine($"Lỗi không xác định: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private Func<ScheduleView, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (x.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Shift.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{x.From} {x.To} {x.WorkDate} {x.Shift}".Contains(searchString))
            return true;
        return false;
    };

    private async Task Change(int selected)
    {
        selectedTimeRange = selected;
        await LoadData();
    }

    private MudTable<ScheduleView> _tableRef;

    private TableGroupDefinition<ScheduleView> _groupDefinition = new()
        {
            GroupName = "Ngày làm",
            Indentation = false,
            Expandable = true,
            IsInitiallyExpanded = false,
            Selector = (e) => e.WorkDate
        };
    // private bool FilterFunc(ScheduleView element)
    // {
    //     if (string.IsNullOrWhiteSpace(searchString))
    //         return true;
    //     if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
    //         return true;
    //     if (element.Shift.Contains(searchString, StringComparison.OrdinalIgnoreCase))
    //         return true;
    //     if ($"{element.From} {element.To} {element.WorkDate} {element.Shift}".Contains(searchString))
    //         return true;
    //     return false;
    // }

    private async Task OpenDialog(int id, DateTime workDate, int from, int to)
    {
        var parameters = new DialogParameters();
        string nameDialog = "Xem thông tin chi tiết ca làm";
        DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Large,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true
            };
        parameters.Add("id", id);
        parameters.Add("workDate", workDate);
        parameters.Add("from", from);
        parameters.Add("to", to);
        var createUpdateDialog = await _dialogservice.ShowAsync<DetailsShedule>(nameDialog, parameters, options);
        var result = await createUpdateDialog.Result;
        if (!result.Canceled)
        {
            createUpdateDialog.Close();
            await LoadData();
        }
    }

    //thông báo khi thêm ca làm cho 1 tháng tiếp theo
    private async Task<bool> Confirm(string text)
    {
        var confirm = await _dialogservice.ShowMessageBox("Thông báo", $"Xác nhận {text}?",
                    yesText: "Xác nhận",
                    cancelText: "Hủy", noText: null,
                    options: new DialogOptions { Position = DialogPosition.TopCenter, MaxWidth = MaxWidth.Small, FullWidth = true });
        StateHasChanged();
        if (!confirm.HasValue) return false;
        return confirm.Value;
    }
    //thêm ca làm 1 tháng khi chưa có ca nào trong 1 tháng tới
    private async Task CreateCa()
    {
        var confirm = await Confirm("thêm ca cho tháng sau");
        if (!confirm)
        {
            return;
        }
        var result = await _Employyes.AddShuduleMonth();
        if (result.IsSuccess)
        {
            Message(result.Data, Severity.Success);
        }
        else
        {
            Message(result.Error, Severity.Error);
        }

    }

    private async Task CreateMonthNow()
    {
        var confirm = await Confirm("thêm ca cho tháng hiện tại");
        if (!confirm)
        {
            return;
        }
        var result = await _Employyes.AddSchuduleToMonth();
        if (result.IsSuccess)
        {
            Message(result.Data, Severity.Success);
        }
        else
        {
            Message(result.Error, Severity.Error);
        }
    }
    //thông báo
    private void Message(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add(message, severity);
    }

}