@inject ISnackbar Snackbar
@inject IDialogService _diagService;
@inject HttpClient httpClient
@using DATN.ViewModels.Common
@using DATN.ViewModels.DTOs.Authenticate
<EditForm Model="@Shedule">
    <MudItem xs="12" sm="12">
        <MudCard>
            <MudCardContent>
                <MudTextField T="string" @bind-Value="Shedule.Shift" Label="Họ tên" For="@(() => Shedule.Shift)" />
                <MudTextField T="string" @bind-Value="Shedule.Name" Label="Tên đăng nhập" For="@(() => Shedule.Name)" Disabled="display" />
                <hr class="hr" />
                <div class="mt-5" style="text-align: end;">
                    @* <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">@_nameButton</MudButton> *@
                </div>
            </MudCardContent>
        </MudCard>
    </MudItem>
</EditForm>

@code {
    [Parameter]
    public int id { get; set; }
    public DateTime WorkDate { get; set; }
    [CascadingParameter] MudDialogInstance _dialogBox { get; set; }
    private string _nameButton = "Thêm mới";

    private bool display = false;
    //nó đây
    [Parameter]
    public ScheduleView Shedule { get; set; } = new ScheduleView();


    protected async override Task OnInitializedAsync()
    {
        if (id != null || id > 0)
        {
        }
    }

    //thêm
    protected async Task Create()
    {
    }
    //thông báo xác nhận
    private async Task<bool?> Confirm()
    {
        var confirm = await _diagService.ShowMessageBox("Thông báo",
    "Xác nhận cập nhật nhân viên?",
           yesText: "Xác nhận",
                    cancelText: "Hủy", noText: null, options: new DialogOptions { Position = DialogPosition.TopCenter, MaxWidth = MaxWidth.Small, FullWidth = true });
        StateHasChanged();
        return confirm;
    }
    //cập nhật
    public async Task Update()
    {
    }
    private async Task Submid()
    {
    }

    //thông báo
    private void Message(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add(message, severity);
    }
    bool success = false;
}