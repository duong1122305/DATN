@page "/ViewShudule"
@using System.Net.Http.Json
@using DATN.ADMIN.IServices
@using DATN.ViewModels.Common
@using DATN.ViewModels.DTOs.Authenticate
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IDialogService _dialogservice;
<PageTitle>Danh sách ca làm</PageTitle>
<MudButton Variant="Variant.Filled" Style="margin-bottom:10px" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@(async()=>await CreateCa())" title="Thêm ca 1 tháng tiếp theo">Thêm ca 1 tháng tiếp theo</MudButton>
<MudButton Variant="Variant.Filled" Style="margin-bottom:10px" StartIcon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Primary" Href="/ListStaff" title="Danh sách nhân viên">Danh sách nhân viên</MudButton>
@if (lstUser.Count > 0 && lstUser != null)
{
  <MudTable Items="@lstUser" Hover="@hover" Filter="new Func<ScheduleView,bool>(FilterFunc)">
        <ToolBarContent>
            <MudText Typo="Typo.h3">Danh sách ca làm</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Tìm kiếm, tên" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="text-align:center;">ID</MudTh>
            <MudTh Style="text-align:center;">Ca làm</MudTh>
            <MudTh Style="text-align:center;">Tên nhân viên</MudTh>
            <MudTh Style="text-align:center;">Giờ bắt đầu</MudTh>
            <MudTh Style="text-align:center;">Giờ kết thúc</MudTh>
            <MudTh Style="text-align:center;">Ngày làm</MudTh>
            <MudTh Style="text-align:center;">Hành động</MudTh>

        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="STT" Style="text-align:center;">
                @(lstUser.IndexOf(context) + 1)
            </MudTd>
            <MudTd DataLabel="Name" Style="text-align:center;">@context.Shift</MudTd>
            <MudTd DataLabel="Shift" Style="text-align:center;">@context.Name</MudTd>
            <MudTd DataLabel="From" Style="text-align:center;">@context.From.ToString(@"hh\:mm")</MudTd>
            <MudTd DataLabel="To" Style="text-align:center;">@context.To.ToString(@"hh\:mm")</MudTd>
            <MudTd DataLabel="WorkDate" Style="text-align:center;">@context.WorkDate.ToString("dd/MM/yyyy")</MudTd>
            <MudTd Style="text-align:center;">
                <MudButton StartIcon="@Icons.Material.Filled.Edit" IconColor="Color.Warning" IconSize="Size.Large" title="Sửa"></MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.RemoveRedEye" IconColor="Color.Info" IconSize="Size.Large" title="Xem chi tiết"></MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager TransformOrigin="Origin.TopCenter" />
        </PagerContent>
    </MudTable>
}
else
{
    <div style="justify-content:center; justify-items:center">
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    </div>
}


@code {
    //button trạng thái
    private bool _disableElevation = false;
    //hiệu ứng hover
    private bool hover = true;
    private string searchString = "";
    private List<ScheduleView> lstUser = new List<ScheduleView>();

    [Inject]
    IUserClientSev _client{get;set;}

    protected async Task LoadData()
    {
        try
        {
            var user = await _client.GetAllCaNhanVien();
            if (!user.IsSuccess)
            {
                lstUser = null;
            }
            else
            {
                lstUser = user.Data;
            }
        }
        catch (Exception)
        { 
            throw;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }


    private bool FilterFunc(ScheduleView element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Shift.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.From} {element.To} {element.WorkDate} {element.Shift}".Contains(searchString))
            return true;
        return false;
    }

    private async Task OpenDialog(string? username)
    {
        var parameters = new DialogParameters();
        string nameDialog = "Thêm ca làm cho nhân viên";
        if (username != null)
        {
            parameters.Add("username", username);
            nameDialog = "Cập nhật ca làm cho nhân viên";
        }
        DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Small,
                CloseButton = true,
                FullWidth = true
            };
        var createUpdateDialog = await _dialogservice.ShowAsync<CreateShudule>(nameDialog, parameters, options);
        var result = await createUpdateDialog.Result;
        if (!result.Canceled)
        {
            createUpdateDialog.Close();
            await LoadData();
        }
    }

    //thông báo khi thêm ca làm cho 1 tháng tiếp theo
    private async Task<bool?> Confirm()
    {
        var confirm = await _dialogservice.ShowMessageBox("Thông báo",
    "Xác nhận thêm ca làm cho 1 tháng tiếp theo?",
           yesText: "Xác nhận",
                    cancelText: "Hủy", noText: null, options: new DialogOptions { Position = DialogPosition.TopCenter, MaxWidth = MaxWidth.Small, FullWidth = true });
        StateHasChanged();
        return confirm;
    }
    //thêm ca làm 1 tháng khi chưa có ca nào trong 1 tháng tới
    private async Task CreateCa()
    {
        if (await Confirm()==true)
        {
            var result = await httpClient.GetFromJsonAsync<ResponseData<string>>("/api/UserLogin/them-ca-for-all-staff");
            if (result.IsSuccess)
            {
                Message(result.Data, Severity.Success);
            }
            else
            {
                Message(result.Error, Severity.Error);
            }
        }else
        {
            Message("Bạn đã huỷ thao tác", Severity.Warning);
        }
    }

    private async Task CreateCaNhanVien()
    {
        
    }
    //thông báo
    private void Message(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add(message, severity);
    }

}