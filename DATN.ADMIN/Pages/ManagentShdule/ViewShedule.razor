@page "/ViewShudule"
@using System.Net.Http.Json
@using DATN.ViewModels.Common
@using DATN.ViewModels.DTOs.Authenticate
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IDialogService _dialogservice;
<PageTitle>Danh sách ca làm</PageTitle>
<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@(async()=>await OpenDialog(null))">Thêm</MudButton>

@if (lstUser.Count > 0 && lstUser != null)
{
  <MudTable Items="@lstUser" Hover="@hover" Filter="new Func<ScheduleView,bool>(FilterFunc)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Danh sách ca làm</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Tìm kiếm, tên" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="text-align:center;">ID</MudTh>
            <MudTh Style="text-align:center;">Ca làm</MudTh>
            <MudTh Style="text-align:center;">Từ</MudTh>
            <MudTh Style="text-align:center;">Đến</MudTh>
            <MudTh Style="text-align:center;">Thời gian</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="STT" Style="text-align:center;">
                @(lstUser.IndexOf(context) + 1)
            </MudTd>
            <MudTd DataLabel="Name" Style="text-align:center;">@context.Name</MudTd>
            <MudTd DataLabel="Shift" Style="text-align:center;">@context.Shift</MudTd>
            <MudTd DataLabel="From" Style="text-align:center;">@context.From</MudTd>
            <MudTd DataLabel="To" Style="text-align:center;">@context.To</MudTd>
            <MudTd DataLabel="WorkDate" Style="text-align:center;">@context.WorkDate</MudTd>
            <MudTd Style="text-align:center;">
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Warning" >Sửa</MudButton>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Details" Color="Color.Tertiary" >Xem</MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager TransformOrigin="Origin.TopCenter" />
        </PagerContent>
    </MudTable>
}
else
{
    <div style="justify-content:center; justify-items:center">
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    </div>
}


@code {
    //button trạng thái
    private bool _disableElevation = false;
    //hiệu ứng hover
    private bool hover = true;
    private string searchString = "";
    private List<ScheduleView> lstUser = new List<ScheduleView>();

    protected async Task LoadData()
    {
    }

    protected override async Task OnInitializedAsync()
    {
        
    }


    private bool FilterFunc(ScheduleView element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Shift.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.From} {element.To} {element.WorkDate} {element.Shift}".Contains(searchString))
            return true;
        return false;
    }

    private void Message(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add(message, severity);
    }

    // thông báo
    private async Task<bool?> Confirm()
    {
        var confirm = await _dialogservice.ShowMessageBox("Thông báo",
                    "Xác nhận xóa ca làm?",
           yesText: "Xác nhận",
                    cancelText: "Hủy", noText: null, options: new DialogOptions { Position = DialogPosition.TopCenter, MaxWidth = MaxWidth.Small, FullWidth = true });
        StateHasChanged();
        return confirm;
    }

    private async Task OpenDialog(string username)
    {
        var parameters = new DialogParameters();
        string nameDialog = "Thêm mới ca làm";
        if (username != null)
        {
            parameters.Add("username", username);
            nameDialog = "Cập nhật ca làm";
        }
        DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Small,
                CloseButton = true,
                FullWidth = true
            };
        var createUpdateDialog = await _dialogservice.ShowAsync<CreateShedule>(nameDialog, parameters, options);
        var result = await createUpdateDialog.Result;
        if (!result.Canceled)
        {
            createUpdateDialog.Close();
            await LoadData();
        }
    }
  
}