<AuthorizeView Roles="Admin">
	<Authorized>
		@page "/lstBillStatiscal"
		@using System.Net.Http.Json
		@using DATN.ADMIN.Components
		@using DATN.ADMIN.IServices
		@using DATN.ADMIN.Services
		@using DATN.Data.Entities
		@using DATN.ViewModels.Common
		@using DATN.ViewModels.DTOs.Authenticate
		@using DATN.ViewModels.DTOs.Booking
		@using DATN.ViewModels.DTOs.Guest
		@using System.Timers
		@using DATN.ViewModels.DTOs.Report
		<PageTitle>Danh sách hoá đơn</PageTitle>

		@inject ISnackbar Snackbar
		<DATN.ADMIN.Components.Loadding _isVisible="isLoading" />
		<MudText Typo="Typo.h4" Style="text-align:center;margin-bottom:5px">Danh sách hóa đơn</MudText>

		<div style="display:flex"
			<div style="width:400px">
				<MudSelect Value=@type T="int" Label="Thống kê theo" Variant="Variant.Outlined" style="width: 200px; margin-bottom: 10px;"
						   ValueChanged="(e)=>ChangeType(e)" AnchorOrigin="Origin.BottomCenter">
					<MudSelectItem Value="@((int)1)">Ngày</MudSelectItem>
					<MudSelectItem Value="@((int)2)">Tuần</MudSelectItem>
					<MudSelectItem Value="@((int)3)">Tháng</MudSelectItem>
					<MudSelectItem Value="@((int)4)">Tùy chọn</MudSelectItem>
				</MudSelect>
			</div>
			@if (isDisplayDate)
			{
				<div style="margin-left:15px;display:flex">
					<div>
						<MudStack>
							<MudDateRangePicker @ref="_picker" Label="Chọn khoảng ngày cần tìm" @bind-DateRange="_dateRange"
												TitleDateFormat="dd, MM, yyyy" AutoClose="true" PickerVariant="PickerVariant.Dialog">
								<PickerActions Context="data">
									<MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Xoá</MudButton>
									<MudButton OnClick="@(() => _picker.Close(false))">Đóng</MudButton>
									<MudButton Color="Color.Primary" OnClick="@(() => _picker.Close())">Ok</MudButton>
								</PickerActions>
							</MudDateRangePicker>
						</MudStack>
					</div>
					<div style="margin-top:20px">
						<MudButton OnClick="()=>LoadData(4)">Tìm kiếm</MudButton>
					</div>
				</div>
			}

		</div>
		@if (lstBill != null)
		{

			<MudDrawerContainer Class="mud-height-full" Style=" width:100%">

				<MudTable Items="@lstBill" Hover="true" Style="width:100%" SortLabel="Sort By" Filter="new Func<StatiscalBill,bool>(FilterFunc)">
					<ToolBarContent>
						<MudSpacer />
						<MudTextField @bind-Value="searchString" Placeholder="Tìm kiếm" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>
					</ToolBarContent>
					<HeaderContent>
						<MudTh>STT</MudTh>
						<MudTh><MudTableSortLabel SortBy="new Func<StatiscalBill, object>(x=>x.TimeComplete)">Thời gian</MudTableSortLabel></MudTh>
						<MudTh><MudTableSortLabel SortBy="new Func<StatiscalBill, object>(x=>x.CusName)">Tên khách hàng</MudTableSortLabel></MudTh>
						<MudTh><MudTableSortLabel SortBy="new Func<StatiscalBill, object>(x=>x.AmountReal)">Tổng giá trị(VND)</MudTableSortLabel></MudTh>
						<MudTh><MudTableSortLabel SortBy="new Func<StatiscalBill, object>(x=>x.AmountReduced)">Tổng giảm voucher(VND)</MudTableSortLabel></MudTh>
						<MudTh><MudTableSortLabel SortBy="new Func<StatiscalBill, object>(x=>x.Amount)">Tổng khách trả(VND)</MudTableSortLabel></MudTh>
						<MudTh><MudTableSortLabel SortBy="new Func<StatiscalBill, object>(x=>x.Status)">Trạng thái đơn hàng</MudTableSortLabel></MudTh>
						<MudTh><MudTableSortLabel SortBy="new Func<StatiscalBill, object>(x=>x.StaffName)">Nhân viên thực hiện</MudTableSortLabel></MudTh>
						<MudTh>Chi tiết</MudTh>
					</HeaderContent>
					<RowTemplate Context="data">
						@{
							var stt = 1;
						}
						<MudTd>@(lstBill.IndexOf(data) + 1)</MudTd>
						<MudTd>@data.TimeComplete</MudTd>
						<MudTd>@data.CusName</MudTd>
						<MudTd>@data.AmountReal</MudTd>
						<MudTd>@data.AmountReduced</MudTd>
						<MudTd>@data.Amount</MudTd>
						<MudTd>@data.Status</MudTd>
						<MudTd>@data.StaffName</MudTd>

						<MudTd>
							<MudButtonGroup Variant="Variant.Filled">
								<MudIconButton OnClick="()=>ViewDetail(data)" Color="Color.Error" Icon="@Icons.Material.Filled.ViewTimeline" Title="Xem chi tiết hóa đơn"></MudIconButton>

							</MudButtonGroup>
						</MudTd>
					</RowTemplate>
					<PagerContent>
						<MudTablePager />
					</PagerContent>
				</MudTable>
			</MudDrawerContainer>


		}
		else
		{
			<LoadingIndicator></LoadingIndicator>
		}
		<style>
			.my-custom-class {
				backdrop-filter: blur(10px);
			}
		</style>
		@code {
			private bool isLoading;
		int type = 1;
		private MudDateRangePicker _picker;
		private DateRange _dateRange;
		private bool isDisplayDate = false;
		string searchString = "";
		private List<StatiscalBill> lstBill = new List<StatiscalBill>();
		[Inject]
		private IStatiscalClient _ser { get; set; }
		string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
		[Inject]
		private IDialogService _dialogService { get; set; }
		protected override async Task OnInitializedAsync()
		{
			type = 1;
			await LoadData(1);
		}

		// load lai du lieu
		protected async Task LoadData(int type = 3)
		{
			ResponseData<List<StatiscalBill>> response;
			if (type == 4)
			{
				response = await _ser.StatisticalBill(_dateRange.Start.Value.ToString("MM/dd/yyy"), _dateRange.End.Value.ToString("MM/dd/yyy"), type);
			}
			else
			{

				response = await _ser.StatisticalBill(null, null, type);
			}
			if (response.IsSuccess)
			{
				lstBill = response.Data;
				if (lstBill.Count()==0)
				{
					Snackbar.Add("Chưa có data");
				}
				StateHasChanged();
			}
			else
			{
				lstBill= new List<StatiscalBill>();
				Snackbar.Add(response.Error, Severity.Warning);
			}

		}

		private async Task ChangeType(int value = 3)
		{
			type = value;
			if (type!=4)
			{
				await LoadData(type);
				isDisplayDate = false;
			}
			else
			{
				isDisplayDate = true;
			}
		}

		private async Task ViewDetail(StatiscalBill staticalBill)
		{
			isLoading = true;
			await Task.Delay(10);
			var parameters = new DialogParameters();
			string nameDialog = " ";

			parameters.Add("bookingData", staticalBill);
			DialogOptions options = new DialogOptions()
			{
				CloseOnEscapeKey = true,
				Position = DialogPosition.Center,
				MaxWidth = MaxWidth.Large,
				CloseButton = true,
				FullWidth = true,
				DisableBackdropClick = true
			};
			var createUpdateDialog = await _dialogService.ShowAsync<BillDetails>(nameDialog, parameters, options);
			var result = await createUpdateDialog.Result;

			isLoading = false;
			if (!result.Canceled)
			{
				createUpdateDialog.Close();
				
			}
		
			await LoadData();
			

		}

		private bool FilterFunc(StatiscalBill element)// lọc data
		{
			if (string.IsNullOrWhiteSpace(searchString.Trim()))
				return true;
			if (element.CusName.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
				return true;
			if (element.StaffName.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
				return true;
			return false;
		}


		}
	</Authorized>
	<NotAuthorized>
		<p>Không có quyền truy cập</p>
	</NotAuthorized>
</AuthorizeView>
