@page "/billDetails"
@using System.Net.Http.Json
@using DATN.ADMIN.Components
@using DATN.ADMIN.IServices
@using DATN.ADMIN.Services
@using DATN.Data.Entities
@using DATN.ViewModels.Common
@using DATN.ViewModels.DTOs.Authenticate
@using DATN.ViewModels.DTOs.Booking
@using DATN.ViewModels.DTOs.Guest
@using System.Timers
@using DATN.ViewModels.DTOs.Report
@inject ISnackbar Snackbar
<DATN.ADMIN.Components.Loadding _isVisible="isLoading" />
@if (billData != null && billData.OderData != null && billData.BookingDetailData != null)
{
<div class="d-flex justify-content-between align-items-center">
	<div class="text-center flex-grow-1">
		<MudText Typo="Typo.h3" Class="invoice-label" Style="color: hotpink;text-align:center;">THÔNG TIN HOÁ ĐƠN</MudText>
	</div>
	<div class="text-right">
		<MudButton Class="invoice-label" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.History" Color="Color.Primary" OnClick="OpenHistory" Style="margin:15px">Lịch sử</MudButton>
	</div>
</div>


<MudText Typo="Typo.body2" Class="invoice-info" Style="margin-left:10px">
	<span><b>Thời gian thanh toán:</b> @bookingData.TimeComplete</span><br />
		<span><b>Tên khách hàng:</b> @bookingData.CusName</span><br />
		<span><b>Tổng giá trị:</b> @bookingData.AmountReal vnd</span><br />
		<span><b>Số tiền giảm:</b> @bookingData.AmountReduced vnd</span><br />
		<span><b>Tổng thực trả:</b> @bookingData.Amount vnd</span><br />
		<span><b>Trạng thái:</b> @bookingData.Status</span><br />
		<span><b>Nhân viên thanh toán:</b> @bookingData.CusName</span><br />
</MudText>

	<div style="padding:20px">

		<MudText Typo="Typo.h6" Style="margin-bottom:5px">Thông tin hóa đơn</MudText>
		<MudDrawerContainer Class="mud-height-full" Style=" width:100%">

			<MudTable Items="@billData.BookingDetailData" Hover="true" Style="width:100%" SortLabel="Sort By">
				
				<HeaderContent>
					<MudTh>STT</MudTh>
					<MudTh><MudTableSortLabel SortBy="new Func<StatiscalBookingDetail, object>(x=>x.ServiceName)">Tên dịch vu</MudTableSortLabel></MudTh>
					<MudTh><MudTableSortLabel SortBy="new Func<StatiscalBookingDetail, object>(x=>x.StartTime)">Thời gian bắt đầu</MudTableSortLabel></MudTh>
					<MudTh><MudTableSortLabel SortBy="new Func<StatiscalBookingDetail, object>(x=>x.EndTime)">Thời gian kết thúc</MudTableSortLabel></MudTh>
					<MudTh><MudTableSortLabel SortBy="new Func<StatiscalBookingDetail, object>(x=>x.Amount)">Giá tiền(VND)</MudTableSortLabel></MudTh>
					<MudTh><MudTableSortLabel SortBy="new Func<StatiscalBookingDetail, object>(x=>x.StaffName)">Nhân viên thực hiện</MudTableSortLabel></MudTh>
					<MudTh><MudTableSortLabel SortBy="new Func<StatiscalBookingDetail, object>(x=>x.Status)">Trạng thái đơn hàng</MudTableSortLabel></MudTh>

				</HeaderContent>
				<RowTemplate Context="data">
					@{
						var stt = 1;
					}
					<MudTd>@(billData.BookingDetailData.IndexOf(data) + 1)</MudTd>
					<MudTd>@data.ServiceName</MudTd>
					<MudTd>@data.StartTime</MudTd>
					<MudTd>@data.EndTime</MudTd>
					<MudTd>@data.Amount</MudTd>
					<MudTd>@data.StaffName</MudTd>
					<MudTd>@data.Status</MudTd>
				</RowTemplate>
				<FooterContent>
					
					<MudTFootRow >
						
					</MudTFootRow>
				</FooterContent>
			</MudTable>
		</MudDrawerContainer>
		@if (billData.BookingDetailData.Count==0)
		{
			<MudText Style="margin-bottom:5px; text-align:center; opacity:0.3">Không có dịch vụ nào trong hóa đơn</MudText>
		}
		<br />
		<MudText Typo="Typo.h6" Style="margin-bottom:5px">Danh sách sản phẩm bán ra</MudText>
		<MudDrawerContainer Class="mud-height-full" Style=" width:100%">

			<MudTable Items="@billData.OderData" Hover="true" Style="width:100%" SortLabel="Sort By">
				
				<HeaderContent>
					<MudTh>STT</MudTh>
					<MudTh><MudTableSortLabel SortBy="new Func<OderStatiscal, object>(x=>x.ProductName)">Tên sản phẩm</MudTableSortLabel></MudTh>
					<MudTh><MudTableSortLabel SortBy="new Func<OderStatiscal, object>(x=>x.Price)">Giá bán(VND)</MudTableSortLabel></MudTh>
					<MudTh><MudTableSortLabel SortBy="new Func<OderStatiscal, object>(x=>x.Quantity)">Số lượng</MudTableSortLabel></MudTh>
					<MudTh><MudTableSortLabel SortBy="new Func<OderStatiscal, object>(x=>x.Amount)">Tổng tiền(VND)</MudTableSortLabel></MudTh>
				</HeaderContent>
				<RowTemplate Context="data">
					@{
						var stt = 1;
					}
					<MudTd>@(billData.OderData.IndexOf(data) + 1)</MudTd>
					<MudTd>@data.ProductName</MudTd>
					<MudTd>@data.Price</MudTd>
					<MudTd>@data.Quantity</MudTd>
					<MudTd>@data.Amount</MudTd>
				</RowTemplate>
				
				<FooterContent>

					<MudTFootRow>

					</MudTFootRow>
				</FooterContent>
			</MudTable>
		</MudDrawerContainer>
		@if (billData.OderData.Count == 0)
		{
			<MudText Style="margin-bottom:5px; text-align:center; opacity:0.3">Không có sản phẩm nào trong hóa đơn</MudText>
		}
	</div>
}
else
{
}
<style>
	.my-custom-class {
		backdrop-filter: blur(10px);
	}
</style>
@code {
	[Parameter]
	public StatiscalBill bookingData { get; set; }
	private bool isLoading;
	private MudDateRangePicker _picker;
	private DateRange _dateRange;
	private bool isDisplayDate = false;
	string searchString = "";
	private BookingDataStatiscal billData = new BookingDataStatiscal();
	[Inject]
	private IStatiscalClient _ser { get; set; }
	string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
	[Inject]
	private IDialogService _dialogService { get; set; }
	protected override async Task OnInitializedAsync()
	{

		await LoadData();
	}

	// load lai du lieu
	protected async Task LoadData(int type = 3)
	{

		var response = await _ser.GetDataBooking(bookingData.ID);

		if (response.IsSuccess)
		{
			billData = response.Data;
			StateHasChanged();
		}
		else
		{
			billData = new BookingDataStatiscal();
			Snackbar.Add(response.Error, Severity.Warning);
		}

	}

	private async Task OpenHistory()
	{
		isLoading = true;
		await Task.Delay(10);
		var parameters = new DialogParameters();
		string nameDialog = " ";

		parameters.Add("bookingData", bookingData);
		DialogOptions options = new DialogOptions()
			{
				CloseOnEscapeKey = true,
				Position = DialogPosition.Center,
				MaxWidth = MaxWidth.Large,
				CloseButton = true,
				FullWidth = true,
				DisableBackdropClick = true
			};
		var createUpdateDialog = await _dialogService.ShowAsync<HistoryBooking>(nameDialog, parameters, options);
		var result = await createUpdateDialog.Result;

		isLoading = false;
		if (!result.Canceled)
		{
			createUpdateDialog.Close();
			await LoadData();
			StateHasChanged();
		}
		StateHasChanged();
		await LoadData();
		StateHasChanged();

	}

	private bool FilterFunc(StatiscalBill element)// lọc data
	{
		if (string.IsNullOrWhiteSpace(searchString.Trim()))
			return true;
		if (element.CusName.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
			return true;
		if (element.StaffName.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}


}