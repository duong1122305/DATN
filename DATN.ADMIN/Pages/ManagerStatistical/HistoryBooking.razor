
@using System.Net.Http.Json
@using DATN.ADMIN.Components
@using DATN.ADMIN.IServices
@using DATN.ADMIN.Services
@using DATN.Data.Entities
@using DATN.ViewModels.Common
@using DATN.ViewModels.DTOs.Authenticate
@using DATN.ViewModels.DTOs.Booking
@using DATN.ViewModels.DTOs.Guest
@using System.Timers
@using DATN.ViewModels.DTOs.Report
@inject ISnackbar Snackbar
@if (lstHistory != null )
{
	<div class="d-flex justify-content-between align-items-center">
		<div class="text-center flex-grow-1">
			<MudText Typo="Typo.h3" Class="invoice-label" Style="color: hotpink;text-align:center;">LỊCH SỬ HOÁ ĐƠN</MudText>
		</div>
		
	</div>


	<MudText Typo="Typo.body2" Class="invoice-info" Style="margin-left:10px">
		<span><b>Thời gian thanh toán:</b> @bookingData.TimeComplete</span><br />
		<span><b>Tên khách hàng:</b> @bookingData.CusName</span><br />
		<span><b>Tổng giá trị:</b> @bookingData.AmountReal vnd</span><br />
		<span><b>Số tiền giảm:</b> @bookingData.AmountReduced vnd</span><br />
		<span><b>Tổng thực trả:</b> @bookingData.Amount vnd</span><br />
		<span><b>Trạng thái:</b> @bookingData.Status</span><br />
		<span><b>Nhân viên thanh toán:</b> @bookingData.CusName</span><br />
	</MudText>

	<div style="padding:20px">

		
		<MudDrawerContainer Class="mud-height-full" Style=" width:100%">

			<MudTable Items="@lstHistory" Hover="true" Style="width:100%" SortLabel="Sort By">

				<HeaderContent>
					<MudTh>STT</MudTh>
					<MudTh><MudTableSortLabel SortBy="new Func<HistoryBookingVM, object>(x=>x.TimeAction)">Thời gian</MudTableSortLabel></MudTh>
					<MudTh><MudTableSortLabel SortBy="new Func<HistoryBookingVM, object>(x=>x.ActionName)">Hành động</MudTableSortLabel></MudTh>
					<MudTh><MudTableSortLabel SortBy="new Func<HistoryBookingVM, object>(x=>x.ActionBy)">Thực hiện bởi</MudTableSortLabel></MudTh>
					<MudTh><MudTableSortLabel SortBy="new Func<HistoryBookingVM, object>(x=>x.Description)">Mô tả</MudTableSortLabel></MudTh>

				</HeaderContent>
				<RowTemplate Context="data">
					@{
						var stt = 1;
					}
					<MudTd>@(lstHistory.IndexOf(data) + 1)</MudTd>
					<MudTd>@data.TimeAction</MudTd>
					<MudTd>@data.ActionName</MudTd>
					<MudTd>@data.ActionBy</MudTd>
					<MudTd>@data.Description</MudTd>
				</RowTemplate>
				<FooterContent>

					<MudTFootRow>

					</MudTFootRow>
				</FooterContent>
			</MudTable>
		</MudDrawerContainer>
		</div>
	}
else
{
	<LoadingIndicator></LoadingIndicator>
}
<style>
	.my-custom-class {
		backdrop-filter: blur(10px);
	}
</style>
@code {
	[Parameter]
	public StatiscalBill bookingData { get; set; }
	private List<HistoryBookingVM> lstHistory = new List<HistoryBookingVM>();
	[Inject]
	private IStatiscalClient _ser { get; set; }
	protected override async Task OnInitializedAsync()
	{

		await LoadData();
	}

	// load lai du lieu
	protected async Task LoadData(int type = 3)
	{

		var response = await _ser.GetHistoryBooking(bookingData.ID);

		if (response.IsSuccess)
		{
			lstHistory = response.Data;
			StateHasChanged();
		}
		else
		{
			lstHistory = new List<HistoryBookingVM>();
			Snackbar.Add(response.Error, Severity.Warning);
		}

	}
}