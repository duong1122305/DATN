@inject ISnackbar Snackbar
@inject IDialogService _diagService;
@inject HttpClient httpClient
@using DATN.Data.Entities
@using DATN.ViewModels.Common
@using DATN.ViewModels.DTOs.Authenticate
@using Newtonsoft.Json
<EditForm Model="@shiftView">
   <DataAnnotationsValidator/>
    <MudItem xs="12" sm="12">
        <MudCard>
            <MudCardContent>
                <MudTextField T="string" @bind-Value="shiftView.Name" Label="Tên ca làm" For="@(() => shiftView.Name)" />
                <MudTextField T="int" @bind-Value="shiftView.From" Label="Giờ bắt đầu" For="@(() => shiftView.From)" />
                <MudTextField T="int" @bind-Value="shiftView.To" Label="Giờ kết thúc" For="@(() => shiftView.To)" />
                <hr class="hr" />
                <div class="mt-5" style="text-align: end;">
                    <MudButton ButtonType="ButtonType.Submit" OnClick="@(async()=>await Submid())" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">@_nameButton</MudButton>
                </div>
            </MudCardContent>
        </MudCard>
    </MudItem>
</EditForm>

@code {
    [Parameter]
    public int id { get; set; }
    [CascadingParameter] MudDialogInstance _dialogBox { get; set; }
    private string _nameButton = "Thêm mới";

    private bool display = false;
    //đây là thêm mới
    [Parameter]
    public ShiftView shiftView { get; set; } = new ShiftView();
    protected async override Task OnInitializedAsync()
    {
        if (id != 0)
        {
            _nameButton = "Cập nhật";
        }
    }

    //thêm
    protected async Task Create()
    {
        //gọi api thêm
        var result = await httpClient.PostAsJsonAsync<ShiftView>("api/UserLogin/Create-shift", shiftView);
        var val = JsonConvert.DeserializeObject<ResponseData<string>>(await result.Content.ReadAsStringAsync());
        if (val.IsSuccess)
        {
            Message(val.Data, Severity.Success);
            _dialogBox.Close(DialogResult.Ok(true));
        }
        else
        {
            Message(val.Error, Severity.Error);
        }
    }
    //thông báo xác nhận
    private async Task<bool?> Confirm()
    {
        var confirm = await _diagService.ShowMessageBox("Thông báo",
    "Xác nhận cập nhật ca làm?",
           yesText: "Xác nhận",
                    cancelText: "Hủy", noText: null, options: new DialogOptions { Position = DialogPosition.TopCenter, MaxWidth = MaxWidth.Small, FullWidth = true });
        StateHasChanged();
        return confirm;
    }
    //cập nhật
    public async Task Update()
    {
        if (await Confirm() == true)
        {
            var viewShift = await httpClient.PutAsJsonAsync<ShiftView>($"api/UserLogin/Update-shift?id={idShift}", shiftView);
            var val = JsonConvert.DeserializeObject<ResponseData<string>>(await viewShift.Content.ReadAsStringAsync());

            if (val.IsSuccess)
            {
                Message(val.Data, Severity.Success);
                _dialogBox.Close(DialogResult.Ok(true));
            }
            else
            {
                Message(val.Error, Severity.Error);
            }
        }
    }
    private async Task Submid()
    {
        if (id != 0)
        {
            await Update();
        }
        else
        {
            await Create();
        }
 
        StateHasChanged();
    }
    //thông báo
    private void Message(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add(message, severity);
    }
}
