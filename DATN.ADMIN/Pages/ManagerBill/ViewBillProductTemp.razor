<AuthorizeView>
    <Authorized>
        @page "/ViewBillProductTemp"
        @using DATN.ADMIN.IServices
        @using DATN.Utilites
        @using DATN.ViewModels.DTOs.Booking
        @inject IDialogService _dialogservice;
        @inject ISnackbar SnackBar
        @using DATN.ViewModels.DTOs.Product
        <DATN.ADMIN.Components.Loadding _isVisible="isLoading" />

        <PageTitle>Danh sách hoá đơn tạm thời</PageTitle>
        <MudText Typo="Typo.h4" Style="text-align:center">Danh sách hoá đơn tạm thời</MudText>
        <div style="display: flex; justify-content: flex-end;">
            <MudButton Variant="Variant.Filled" Style="margin-bottom: 10px;" StartIcon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Primary" OnClick="@ExpandAllGroups">Mở hết danh sách</MudButton>
            <MudButton Variant="Variant.Filled" Style="margin-bottom: 10px;" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@(async()=>await OpenDialogBillInStore(Guid.Empty,DateTime.Now))">Tạo hóa đơn</MudButton>

        </div>

        <MudDataGrid Items="@lstBookingServices" Hover="true" Filterable="true" @ref="dataGrid" Groupable="true" GroupExpanded="false" MultiSelection="true">
            <Columns>
                <TemplateColumn Title="STT" Grouping GroupBy="@_groupBy" Sortable="false" Filterable="false">
                    <GroupTemplate Context="data">
                        <span style="font-weight:bold">Hóa đơn - @data.Grouping.Key</span>
                        <MudIconButton Variant="Variant.Text" Color="Color.Primary" Title="Thanh toán" OnClick="@(async()=>await OpenDialogBill(Guid.Empty,DateTime.Now,0,Convert.ToInt32(data.Grouping.Key.ToString())))">Thanh toán</MudIconButton>
                        <MudIconButton Variant="Variant.Text" Color="Color.Primary" Title="Xóa hóa đơn tạm" OnClick="@(async()=>await RemoveBill(Convert.ToInt32(data.Grouping.Key.ToString())))">Xóa hóa đơn</MudIconButton>
                    </GroupTemplate>
                </TemplateColumn>
                <PropertyColumn Property=" x=>
                    x.Name" Title="Tên sản phẩm" Sortable="false" Filterable="false" />
                <PropertyColumn Property="x=>x.SelectQuantityProduct" Title="Số Lượng" Sortable="false" Filterable="false" />
                <TemplateColumn Title="Giá" Sortable="false" Filterable="false">
                    <CellTemplate Context="data">
                        <span>   @CurrencyHelper.FormatCurrency((float)data.Item.Price)</span>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="ProductDetailView" />
            </PagerContent>
        </MudDataGrid>

        @code {
        private List<ProductDetailView> lstBookingServices = new List<ProductDetailView>();
        [Inject] private BookingService bookingService { get; set; }
        private bool isLoading = false;

        static bool _customizeGroupBy;
        MudDataGrid<ProductDetailView> dataGrid;
        [Parameter]
        public Guid guid { get; set; }
        protected override async Task OnInitializedAsync()
        {
            await Task.Delay(50);
            lstBookingServices = bookingService.ListProductDetail.Where(c => c.Term != null && c.Term != 0).ToList();

        }
        private Func<ProductDetailView, string> _groupBy = x =>
        {
            if (_customizeGroupBy)
            {
                return x.Term.Value.ToString();
            }
            else
            {
                return x.Term.ToString();
            }
        };
        void ExpandAllGroups()
        {
            dataGrid?.ExpandAllGroups();
        }
        private async Task OpenDialogBill(Guid? id, DateTime date, int? idBooking, int? idterm)
        {
            isLoading = true;
            await Task.Delay(30);
            var parameters = new DialogParameters();
            string nameDialog = "";

            DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Large,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true
            };
            parameters.Add("guid", id);
            parameters.Add("date", date);
            parameters.Add("idBooking", idBooking);
            parameters.Add("termId", idterm);
            var createUpdateDialog = await _dialogservice.ShowAsync<ViewBillCustomer>(nameDialog, parameters, options);
            var result = await createUpdateDialog.Result;
            if (!result.Canceled)
            {
                createUpdateDialog.Close();
            }
            isLoading = false;

        }
        public async Task RemoveBill(int id)
        {
            var listRemove = bookingService.ListProductDetail.Where(c => c.Term == id).ToList();
            bookingService.RemoveBillTerm(listRemove);
            await Task.Delay(1);
        }
        private async Task OpenDialogBillInStore(Guid? id, DateTime date)
        {
            string nameDialog = "";
            DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Large,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true
            };
            var createUpdateDialog = await _dialogservice.ShowAsync<ViewBillCustomer>(nameDialog, options);
            var result = await createUpdateDialog.Result;
            if (!result.Canceled)
            {
                createUpdateDialog.Close();
            }
        }
        }

    </Authorized>
    <NotAuthorized>
        <p>Không có quyền truy cập</p>
    </NotAuthorized>
</AuthorizeView>