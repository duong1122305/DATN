<AuthorizeView>
    <Authorized>
        @page "/viewbill"
        @using DATN.ADMIN.IServices
        @using DATN.Utilites
        @using DATN.ViewModels.DTOs.Booking
        @using DATN.ViewModels.DTOs.Payment
        @using DATN.ViewModels.DTOs.Product
        @using Newtonsoft.Json
        @inject IAddressService _addressServive;
        @inject IDialogService _dialogservice;
        @inject ISnackbar Snackbar
        @inject IJSRuntime jsRuntime;
        <style>
            .mud-dialog-width-lg {
                height: 680px;
                min-height: 680px;
            }
        </style>
        <MudContainer Class="invoice-container" Style="margin-top: 20px">
            <MudPaper Elevation="3" Class="invoice-paper">
                <div class="invoice-body">
                    @if (bill != null)
                    {
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="text-center flex-grow-1">
                                <MudText Typo="Typo.h3" Class="invoice-label" Style="color: hotpink;text-align:center;">THÔNG TIN HOÁ ĐƠN</MudText>
                            </div>
                            <div class="text-right">
                                <MudButton Class="invoice-label" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Print" Color="Color.Primary" OnClick="PrintBill" Style="margin:15px">In</MudButton>
                            </div>
                        </div>
                        <MudText Typo="Typo.body2" Class="invoice-info" Style="margin-left:10px">
                            @if (!bill.IsPayment)
                        {
                                <span><b>Ngày tạo:</b> @DateTime.Now.ToString("dd/MM/yyyy HH:mm")</span>

                                <br />
                            }
                            else
                            {
                                <span><b>Thời gian thanh toán: @bill.DateBooking</b></span>
                                <br />
                            }
                            <span><b>Khách hàng:</b> @bill.GuestName</span><br />
                            <span><b>Số điện thoại:</b> @bill.PhoneNumber</span><br />
                            <span><b>Địa chỉ:</b> @_addressServive.GetAddress(bill.Address)</span><br />
                        </MudText>

                        @if (guid != null)
                        {
                            <MudText Typo="Typo.h6" Class="invoice-label" Style="text-align:center;margin-bottom:5px">Danh sách dịch vụ đã sử dụng</MudText>
                            <MudTable Items="@bill.ListServiceBooked" Class="invoice-table">
                                <HeaderContent>
                                    <MudTh>Dịch vụ sử dụng</MudTh>
                                    <MudTh>Tên thú cưng</MudTh>
                                    <MudTh>Nhân viên làm dịch vụ</MudTh>
                                    <MudTh>Đơn giá</MudTh>
                                </HeaderContent>
                                <RowTemplate Context="data">
                                    <MudTd>@data.ServiceDetailName</MudTd>
                                    <MudTd>@data.PetName</MudTd>
                                    <MudTd>@data.NameStaff</MudTd>
                                    <MudTd>@CurrencyHelper.FormatCurrency((float)data.Price)</MudTd>
                                </RowTemplate>
                            </MudTable>
                        }

                        <br />
                        @if (bill.IsPayment)
                        {
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="@(async () => await OpenDialog())" Color="Color.Primary" Style="margin:15px" Disabled>Thêm sản phẩm</MudButton>
                        }
                        else
                        {
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="@(async () => await OpenDialog())" Color="Color.Primary" Style="margin:15px">Thêm sản phẩm</MudButton>
                        }
                        @if (idBooking != null && idBooking != 0)
                        {
                            if (bill.IsPayment)
                            {
                                <MudTable Items="@bill.ListProductDetail" Class="invoice-table">
                                    <HeaderContent>
                                        <MudTh>Tên sản phẩm</MudTh>
                                        <MudTh>Số lượng</MudTh>
                                        <MudTh>Đơn giá</MudTh>
                                    </HeaderContent>
                                    <RowTemplate Context="bill2">
                                        <MudTd>@bill2.Name</MudTd>
                                        <MudTd>
                                            <div class="quantity-input">
                                                <input type="number" @bind="bill2.SelectQuantityProduct" id="number2" class="form-control" min="1" max="@bill2.Quantity" disabled style="width:60px" />
                                            </div>
                                        </MudTd>
                                        <MudTd>@CurrencyHelper.FormatCurrency((float)bill2.Price)</MudTd>
                                        <MudTd>
                                        </MudTd>
                                    </RowTemplate>
                                </MudTable>
                            }
                            else
                            {
                                <MudTable Items="@bookingService.ListProductDetail.Where(x=>x.IdBooking == idBooking)" Class="invoice-table">
                                    <HeaderContent>
                                        <MudTh>Tên sản phẩm</MudTh>
                                        <MudTh>Số lượng</MudTh>
                                        <MudTh>Đơn giá</MudTh>
                                        <MudTh>Hành động</MudTh>
                                    </HeaderContent>
                                    <RowTemplate Context="data">
                                        <MudTd>@data.Name</MudTd>
                                        <MudTd>
                                            <div class="quantity-input">
                                                <button class="btn btn-sm btn-outline-secondary" @onclick="@( () => DecrementQuantity(data) )">-</button>
                                                <input type="number" @bind="data.SelectQuantityProduct" id="number2" class="form-control" min="1" max="@data.Quantity" disabled style="width:60px" />
                                                <button class="btn btn-sm btn-outline-secondary" @onclick="@( () => IncrementQuantity(data) )">+</button>

                                            </div>
                                        </MudTd>
                                        <MudTd>@CurrencyHelper.FormatCurrency((float)data.Price)</MudTd>
                                        <MudTd>
                                            <MudButton Variant="Variant.Filled" OnClick="@(() => RemoveProduct(@data))" Color="Color.Error">Xoá</MudButton>
                                        </MudTd>
                                    </RowTemplate>
                                </MudTable>
                            }
                        }
                        else
                        {
                            <MudTable Items="@bookingService.ListProductDetail.Where(c=>c.Term==termId)" Class="invoice-table">
                                <HeaderContent>
                                    <MudTh>Tên sản phẩm</MudTh>
                                    <MudTh>Số lượng</MudTh>
                                    <MudTh>Đơn giá</MudTh>
                                    <MudTh>Hành động</MudTh>
                                </HeaderContent>
                                <RowTemplate Context="data">
                                    <MudTd>@data.Name</MudTd>
                                    <MudTd>
                                        <div class="quantity-input">
                                            <button class="btn btn-sm btn-outline-secondary" @onclick="@( () => DecrementQuantity(data) )">-</button>
                                            <input type="number" @bind="data.SelectQuantityProduct" id="number2" class="form-control" min="1" max="@data.Quantity" disabled style="width:60px" />
                                            <button class="btn btn-sm btn-outline-secondary" @onclick="@( () => IncrementQuantity(data) )">+</button>

                                        </div>
                                    </MudTd>
                                    <MudTd>@CurrencyHelper.FormatCurrency((float)data.Price)</MudTd>
                                    <MudTd>
                                        <MudButton Variant="Variant.Filled" OnClick="@(() => RemoveProduct(@data))" Color="Color.Error">Xoá</MudButton>
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>

                        }
                        <style>
                            .outer-div {
                                display: flex;
                                justify-content: flex-end; /* Đẩy div ngoài về bên phải */
                                width: 100%;
                            }

                            .inner-div {
                                text-align: left; /* Căn trái nội dung trong div */
                            }
                        </style>
                        <div class="outer-div">
                            <div class="inner-div">
                                <br />
                                <span><b>Tạm tính: </b>@CurrencyHelper.FormatCurrency((float)@bill.TotalPrice)</span><br />
                                <br />
                                <span><b>Giảm giá:</b> @CurrencyHelper.FormatCurrency((float)@bill.ReducePrice)</span><br />
                                <br />
                                <span><b>Tổng tiền:</b> @CurrencyHelper.FormatCurrency((float)@bill.TotalPayment)</span><br />
                                @if (!bill.IsPayment)
                                {
                                    <MudRadioGroup T="int" @bind-value="selectedPaymentMethod">
                                        <MudRadio Value="1" Color="Color.Primary">Tiền mặt</MudRadio>
                                        <MudRadio Value="2" Color="Color.Secondary" UnCheckedColor="Color.Default">Chuyển khoản</MudRadio>
                                        <MudRadio Value="3" Color="Color.Secondary" UnCheckedColor="Color.Default">Momo</MudRadio>
                                    </MudRadioGroup>
                                    @if (selectedPaymentMethod == 2)
                                    {
                                        <MudButton OnClick="Payment" Variant="Variant.Filled" Color="Color.Success" Style="margin-bottom:5px">Thanh toán QR</MudButton>
                                    }
                                    else if (selectedPaymentMethod == 1)
                                    {
                                        <MudButton OnClick="@(async () => await PayMentInStore())" Variant="Variant.Filled" Color="Color.Success" Style="margin-bottom:5px">Thanh toán tiền mặt</MudButton>

                                    }
                                    else
                                    {
                                        <MudButton OnClick="@(async () => await PayMentQr())" Variant="Variant.Filled" Color="Color.Success" Style="margin-bottom:5px">Thanh toán momo</MudButton>
                                    }
                                }

                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="no-invoice">
                            <MudTypography Typo="Typo.body2">Không có hóa đơn nào được chọn.</MudTypography>
                        </div>
                    }
                </div>
            </MudPaper>
        </MudContainer>

        @code {
        [Parameter]
        public Guid? guid { get; set; }
        [Parameter]
        public DateTime date { get; set; }
        [Parameter]
        public int? idBooking { get; set; }
        [Parameter]
        public int? termId { get; set; }
        [Parameter]
        public Bill billInvoice { get; set; }
        [Inject]
        private IBookingViewServices _client { get; set; }
        private Bill bill = new Bill();

        [CascadingParameter] MudDialogInstance _dialogBox { get; set; }
        [Inject]
        private IHttpContextAccessor httpContextAccessor { get; set; }
        private int selectedPaymentMethod { get; set; } = 1;
        [Inject] private BookingService bookingService { get; set; }

        [Inject]
        NavigationManager navigationManager { get; set; }

        private async Task LoadData()
        {
            await OpenDialogReload();
            StateHasChanged();
        }
        protected override async Task OnInitializedAsync()
        {
            if (guid != null)
            {
                await LoadData();
            }
            if (idBooking == null)
            {
                termId = 1;
                var lst = bookingService.ListProductDetail;
                foreach (var item in lst)
                {
                    if (item.Term == termId)
                    {
                        termId++;
                    }
                }
            }

        }
        protected async Task Payment()
        {
            APIRequest request = new APIRequest()
            {
                accountName = "Meo Shop",
                accountNo = 37110001031335,
                acqId = 970418,
                addInfo = $"Thanh toán hóa đơn chăm sóc thú cưng ngày {date.ToString("dd/MM/yyyy")}",
                amount = bill.TotalPayment,
                format = "text",
                template = "compact2"
            };
            HttpClient client = new HttpClient();
            client.DefaultRequestHeaders.Add("x-client-id", "c43d080b-f369-4700-bd96-f96d79bcd172");
            client.DefaultRequestHeaders.Add("x-api-key", "26b18710-94ae-4c9c-8d22-a6880a530924");
            var response = await client.PostAsJsonAsync<APIRequest>("https://api.vietqr.io/v2/generate", request);
            var result = JsonConvert.DeserializeObject<APIResponse>(await response.Content.ReadAsStringAsync());
            if (result.code == "00")
            {
                string nameDialog = "Thanh toán";

                DialogOptions options = new DialogOptions()
                {
                    CloseOnEscapeKey = true,
                    Position = DialogPosition.Center,
                    MaxWidth = MaxWidth.Large,
                    CloseButton = true,
                    FullWidth = true,
                    DisableBackdropClick = true
                };
                DialogParameters parameter = new DialogParameters();
                parameter.Add("linkqr", result.data.qrDataURL);
                parameter.Add("idBooking", idBooking != null ? idBooking.Value : null);
                parameter.Add("idGuest", guid != null ? guid.Value : null);
                parameter.Add("TotalPrice", bill.TotalPrice);
                parameter.Add("dateBooking", date);
                parameter.Add("bookingService", bookingService);
                var createUpdateDialog = await _dialogservice.ShowAsync<ComponentPayment>(nameDialog, parameter, options);
                var result1 = await createUpdateDialog.Result;
                if (!result1.Canceled)
                {
                    createUpdateDialog.Close();
                    await LoadData();
                }
                _dialogBox.Close();
            }
        }
        public async Task PayMentQr()
        {
            try
            {
                var payment = new Payment()
                {
                    DateBooking = DateTime.Now,
                    LstProducts = bill.ListProductDetail,
                    Reduce = bill.ReducePrice,
                    Token = httpContextAccessor.HttpContext.Session.GetString("Key"),
                    TotalPrice = bill.TotalPrice,
                    VoucherId = bill.IdVoucher,
                    TypePaymenId = 2,
                    IdBooking = 0,
                    IdGuest = guid,
                };
                var response = await _client.PaymentQr(payment, idBooking);
                if (response.IsSuccess)
                {
                    if (response.Data.resultCode == 0)
                    {
                        navigationManager.NavigateTo(response.Data.payUrl);
                    }
                    else
                    {
                        Snackbar.Add(response.Data.message, Severity.Warning);
                    }
                }
                else
                {
                    Snackbar.Add(response.Error, Severity.Warning);
                }
            }
            catch (Exception e)
            {
                Snackbar.Add(e.Message, Severity.Warning);
            }
        }

        public async Task PayMentInStore()
        {

            var confirm = await Confirm("thanh toán");
            if (!confirm)
            {
                return;
            }
            DATN.ViewModels.DTOs.Booking.Payment payment;
            if (idBooking != 0 && idBooking != null)
            {
                payment = new Payment()
                {
                    IdBooking = idBooking.Value,
                    IdGuest = guid.Value,
                    TotalPrice = bill.TotalPrice,
                    TypePaymenId = selectedPaymentMethod,
                    Token = httpContextAccessor.HttpContext.Session.GetString("Key"),
                    LstProducts = bookingService.ListProductDetail.Where(x => x.IdBooking == idBooking).ToList(),
                    DateBooking = date,
                    Reduce = bill.ReducePrice,
                    VoucherId = bill.IdVoucher
                };
            }
            else
            {
                payment = new Payment()
                {
                    TotalPrice = bill.TotalPrice,
                    TypePaymenId = selectedPaymentMethod,
                    Token = httpContextAccessor.HttpContext.Session.GetString("Key"),
                    LstProducts = bookingService.ListProductDetail.Where(x => x.Term == termId).ToList(),
                    DateBooking = date,
                    Reduce = bill.ReducePrice,
                    VoucherId = bill.IdVoucher
                };
            }
            var respone = await _client.PaymentInStore(payment);
            if (respone.IsSuccess)
            {
                var listRemove = new List<ProductDetailView>();
                Snackbar.Add(respone.Data, Severity.Success);
                if (idBooking != 0 && idBooking != null)
                {
                    foreach (var item in bookingService.ListProductDetail)
                    {
                        if (item.IdBooking == idBooking.Value)
                        {
                            listRemove.Add(item);
                        }
                    }
                }
                else
                {
                    foreach (var item in bookingService.ListProductDetail)
                    {
                        if (item.Term == termId.Value)
                        {
                            listRemove.Add(item);
                        }
                    }
                }
                if (listRemove.Count > 0)
                {
                    bookingService.RemoveBillTerm(listRemove);
                }
                _dialogBox.Close();
            }
            else
            {
                Snackbar.Add(respone.Error, Severity.Error);
            }
        }

        public async Task OpenDialog()
        {

            string nameDialog = "Chọn sản phẩm";
            DialogParameters parameter = new DialogParameters();
            parameter.Add("guid", guid);
            parameter.Add("IdBooking", idBooking);
            parameter.Add("termId", termId);
            DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Large,
                CloseButton = true,
                FullWidth = false,
                DisableBackdropClick = true,
            };
            var createUpdateDialog = await _dialogservice.ShowAsync<SelectProductView>(nameDialog, parameter, options);
            var result = await createUpdateDialog.Result;
            if (!result.Canceled)
            {
                createUpdateDialog.Close();
                await LoadData();
                StateHasChanged();
            }
        }
        public async Task OpenDialogReload()
        {
            if (idBooking != 0 && idBooking != null)
            {
                var respone2 = await _client.CheckBill(idBooking, bookingService.ListProductDetail.Where(x => x.IdBooking == idBooking).ToList());
                if (respone2.IsSuccess)
                {
                    bill = respone2.Data;
                    StateHasChanged();
                }
            }
            else
            {
                var respone2 = await _client.CheckBill(idBooking, bookingService.ListProductDetail.Where(x => x.Term == termId).ToList());
                if (respone2.IsSuccess)
                {
                    bill = respone2.Data;
                    StateHasChanged();
                }
            }

        }
        public async Task PrintBill()
        {
            if (!bill.IsPayment)
            {
                Snackbar.Add("Hoá đơn chưa thanh toán", Severity.Warning);
                return;
            }
            await jsRuntime.InvokeVoidAsync("document.getElementById('contentbill').innerHTML.print()");
        }

        private async void RemoveProduct(ProductDetailView product)
        {
            var confirm = await Confirm("xoá");
            if (!confirm)
            {
                return;
            }
            // Gọi phương thức từ BookingService để xóa booking
            bookingService.RemoveProduct(product);
            await LoadData();
            Snackbar.Add("Đã xoá thành công.", Severity.Success);
            // Hiển thị thông báo hoặc cập nhật giao diện sau khi xoá thành công
        }
        private async Task<bool> Confirm(string text)
        {
            var confirm = await _dialogservice.ShowMessageBox("Thông báo", $"Xác nhận {text} dịch vụ?",
            yesText: "Xác nhận",
            cancelText: "Hủy", noText: null,
            options: new DialogOptions { Position = DialogPosition.Center, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true });
            StateHasChanged();
            if (!confirm.HasValue) return false;
            return confirm.Value;
        }

        //thêm sản phẩm
        async void IncrementQuantity(ProductDetailView product)
        {
            if (product.SelectQuantityProduct < product.Quantity)
            {
                product.SelectQuantityProduct++;
                await LoadData();
            }
        }

        //trừ sản phẩm
        async void DecrementQuantity(ProductDetailView product)
        {
            if (product.SelectQuantityProduct > 1)
            {
                product.SelectQuantityProduct--;
                await LoadData();
            }
        }
        }

    </Authorized>
    <NotAuthorized>
        <p>Không có quyền truy cập</p>
    </NotAuthorized>
</AuthorizeView>
