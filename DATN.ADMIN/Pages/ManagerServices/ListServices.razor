@page "/ListServices"

@using System.Net.Http.Json
@using DATN.ADMIN.Components
@using DATN.ADMIN.IServices
@using DATN.Data.Entities
@using DATN.ViewModels.Common
@using DATN.ViewModels.DTOs.Authenticate

@using DATN.ViewModels.DTOs.ServiceManager

@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IDialogService _dialogservice
<PageTitle>Danh sách dịch vụ</PageTitle>
<MudButton Variant="Variant.Filled" OnClick="@(async()=>await OpenDialog(null))" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary">Thêm dịch vụ</MudButton>
<MudButton Variant="Variant.Filled" Href="/ListServicesDetails" StartIcon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Primary">Dịch vụ chi tiết</MudButton>

<MudDataGrid Items="@lstServies" QuickFilter="@_quickFilter" Filterable="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Danh sách dịch vụ</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" MaxLength="50"></MudTextField>
    </ToolBarContent>
    <Columns>
        <TemplateColumn Title="STT" Sortable="false" Filterable="false">
                <CellTemplate>
                    <span>@(lstServies.IndexOf(context.Item) + 1)</span>
                </CellTemplate>
            </TemplateColumn>
        <PropertyColumn Property="x => x.Name" Title="Tên dịch vụ" Sortable="false" Filterable="false" />
        <TemplateColumn Title="Trạng thái" Sortable="false" Filterable="false">
            <CellTemplate>
                @if (!context.Item.IsDetele)
                {
                    <span>
                        <MudChip Color="Color.Success" title="Hoạt động">Phục vụ</MudChip>
                    </span>
                }
                else
                {
                    <span>
                        <MudChip Color="Color.Error" title="Hoạt động">Ngưng phục vụ</MudChip>
                    </span>
                }
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x=>x.Id" Title="Hành động" Filterable="false" Sortable="false">
            <CellTemplate>
                <MudButtonGroup Variant="Variant.Filled">
                    <MudButton IconSize="Size.Large"
                               OnClick="async () => await UpdateStatusService(context.Item.Id)"
                               StartIcon="@(context.Item.IsDetele ? Icons.Material.Filled.Done : Icons.Material.Filled.Delete)"
                               IconColor="@(context.Item.IsDetele ? Color.Surface : Color.Error)"
                               title="@(context.Item.IsDetele ? "Kích hoạt" : "Xoá")"></MudButton>
                    <MudButton IconSize="Size.Large" StartIcon="@Icons.Material.Filled.Edit" IconColor="Color.Warning" title="Sửa" OnClick="@(async()=>await OpenDialog(context.Item.Id))"></MudButton>
                </MudButtonGroup>
            </CellTemplate>
        </PropertyColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Service" />
    </PagerContent>
</MudDataGrid>
<style>
    .my-custom-class {
        backdrop-filter: blur(10px);
    }
</style>
@code {
    private List<Service> lstServies = new List<Service>();
    private string searchString = "";

    [Inject]
    private IServiceManagermentService _serviceManangerment { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var result = await _serviceManangerment.GetAll();
        if (result.Data != null && result.IsSuccess == true)
        {
            lstServies = result.Data;
        }
    }

    public async Task UpdateStatusService(int id)
    {
        var result = await _serviceManangerment.Remove(id);
        if (result.IsSuccess == true)
        {
            Message(result.Data, Severity.Success);
            await OnInitializedAsync();
        }
        else Message(result.Error, Severity.Error);
    }

    private async Task OpenDialog(int? id)
    {
        var parameters = new DialogParameters();
        string nameDialog = "Thêm mới dịch vụ";

        parameters.Add("id", id);
        if (id != null)
        {
            nameDialog = "Cập nhật dịch vụ";
            parameters.Add("id", id);
        }

        DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Small,
                CloseButton = true,

                FullWidth = true,
                DisableBackdropClick = true
            };
        try
        {
            var createUpdateDialog = await _dialogservice.ShowAsync<CreateUpServices>(nameDialog, parameters, options);
            var result = await createUpdateDialog.Result;
            if (!result.Canceled)
            {
                createUpdateDialog.Close();
                await OnInitializedAsync();
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    //tìm kiếm 
    private Func<Service, bool> _quickFilter => x =>
       {
       if (string.IsNullOrWhiteSpace(searchString))
           return true;

       if (x.Name.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
           return true;
       return false;
       };

    private void Message(string message, Severity severity)
    {
        Snackbar.Clear();
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
        Snackbar.Add(message, severity);
    }

}

