@page "/CreateUpdateServicesDetails"
@using DATN.ADMIN.IServices
@using DATN.Data.Entities
@using DATN.ViewModels.DTOs.ServiceDetail
@using Microsoft.JSInterop
@inject ISnackbar Snackbar
@inject IDialogService _diagService
<EditForm Model="@createServiceDetailVM" OnValidSubmit="@(async () => await Submit())">
    <MudItem xs="12" sm="12">
        <MudCard>
            <MudCardContent>
                @if (id == null || id == 0)
                {
                    <MudSelect T="int" Margin="Margin.Dense"
                               Label="Chọn dịch vụ"
                               For="@(() => createServiceDetailVM.ServiceId)">
                        <MudSelectItem Value="0">Chọn loại</MudSelectItem>
                        @foreach (var item in lstService)
                        {
                            if (!item.IsDetele)
                            {
                                <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                    <MudTextField T="string" Label="Tên dịch vụ chi tiết" @bind-Value="@createServiceDetailVM.Name" For="@(() => createServiceDetailVM.Name)" />
                    <MudTextField T="float" Label="Giá" Value="@tempPrice" ValueChanged="async (value) => await OnPriceChanged(value)" Immediate="true" For="@(() => createServiceDetailVM.Price)" />
                    <MudTextField T="string" id="formattedPriceInput" Variant="Variant.Text" Value="@formattedPrice" ReadOnly="true" />
                    <MudTextField T="double" Label="Thời gian làm" @bind-Value="@createServiceDetailVM.Duration" For="@(() => createServiceDetailVM.Duration)" />
                    <MudTextField T="string" Label="Mô tả" @bind-Value="@createServiceDetailVM.Description" For="@(() => createServiceDetailVM.Description)" />
                }
                else
                {
                    <MudTextField T="string" Label="Tên dịch vụ chi tiết" @bind-Value="@updateServiceDetailVM.ServiceDetailName" For="@(() => updateServiceDetailVM.ServiceDetailName)" />
                    <MudTextField T="float" Label="Giá" Value="@tempPrice" ValueChanged="async (value) => await OnPriceChanged(value)" Immediate="true" For="@(() => updateServiceDetailVM.Price)" />
                    <MudTextField T="string" id="formattedPriceInput" Variant="Variant.Text" Value="@formattedPrice" ReadOnly="true" />
                    <MudTextField T="double" Label="Thời gian làm" @bind-Value="@updateServiceDetailVM.Duration" For="@(() => updateServiceDetailVM.Duration)" />
                    <MudTextField T="string" Label="Mô tả" @bind-Value="@updateServiceDetailVM.Description" For="@(() => updateServiceDetailVM.Description)" />
                }
                <hr class="hr" />
                <div class="mt-5" style="text-align: end;">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">@_nameButton</MudButton>
                </div>
            </MudCardContent>
        </MudCard>
    </MudItem>
</EditForm>

<script>
    window.formatCurrencyVN = (number) => {
        const formattedPrice = number.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
        document.getElementById('formattedPriceInput').value = formattedPrice;
    };
</script>

@code {
    [Parameter]
    public int id { get; set; }

    [Parameter]
    public CreateServiceDetailVM createServiceDetailVM { get; set; } = new CreateServiceDetailVM();

    [Parameter]
    public UpdateServiceDetailVM updateServiceDetailVM { get; set; } = new UpdateServiceDetailVM();

    private List<Service> lstService = new List<Service>();

    [Inject]
    public IServiceManagermentService _serviceManagermentService { get; set; }

    [Inject]
    public IServiceDetailServices _serviceDetailService { get; set; }

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    private string formattedPrice = string.Empty;
    private float tempPrice;

    [CascadingParameter] MudDialogInstance _dialogBox { get; set; }

    string _nameButton = "";

    protected override async Task OnInitializedAsync()
    {
        createServiceDetailVM.ServiceId = 0;
        var result = await _serviceManagermentService.GetAll();
        if (result.IsSuccess)
        {
            lstService = result.Data;
        }

        if (id != null && id != 0)
        {
            _nameButton = "Cập nhật";
            var findServiceDetailById = await _serviceDetailService.GetById(id);
            var data = findServiceDetailById.Data;

            updateServiceDetailVM.ServiceDetailName = data.Name;
            updateServiceDetailVM.Price = data.Price;
            updateServiceDetailVM.Duration = data.Duration;
            updateServiceDetailVM.Description = data.Description;
            await OnPriceChanged(updateServiceDetailVM.Price);
        }
        else
        {
            _nameButton = "Thêm mới";
            await OnPriceChanged(createServiceDetailVM.Price);
        }
    }

    private async Task OnPriceChanged(float value)
    {
        tempPrice = value; // Cập nhật biến trung gian
        if (id != null && id != 0)
        {
            updateServiceDetailVM.Price = value; // Cập nhật giá trị thực
        }
        else
        {
            createServiceDetailVM.Price = value;
        }
        await FormatPrice(); // Định dạng giá
    }

    private async Task FormatPrice()
    {
        double price = id != null && id != 0 ? (double)updateServiceDetailVM.Price : (double)createServiceDetailVM.Price;
        await JSRuntime.InvokeVoidAsync("formatCurrencyVN", price);
    }

    private async Task Submit()
    {
        if (id == null || id == 0)
        {
            await Create();
        }
        else
        {
            await Update();
        }
    }

    public async Task Update()
    {
        if (await Confirm("cập nhật") == true)
        {
            var result = await _serviceDetailService.Update(id, updateServiceDetailVM);
            if (result.IsSuccess)
            {
                Message(result.Data, Severity.Success);
                _dialogBox.Close(DialogResult.Ok(true));
            }
            else
            {
                Message(result.Error, Severity.Error);
            }
        }
        else
        {
            Message("Có lỗi trong quá trình cập nhật", Severity.Error);
        }
    }

    private async Task<bool> Confirm(string text)
    {
        var confirm = await _diagService.ShowMessageBox("Thông báo", $"Xác nhận {text} dịch vụ chi tiết ?",
                    yesText: "Xác nhận",
                    cancelText: "Hủy", noText: null,
                    options: new DialogOptions { Position = DialogPosition.Center, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true });
        StateHasChanged();
        if (!confirm.HasValue) return false;
        return confirm.Value;
    }

    protected async Task Create()
    {
        var confirm = await Confirm("thêm mới");
        if (!confirm)
        {
            return;
        }
        var result = await _serviceDetailService.Create(createServiceDetailVM);
        if (result.IsSuccess)
        {
            Message("Thành công", Severity.Success);
            _dialogBox.Close(DialogResult.Ok(true));
        }
        else
        {
            Message(result.Error, Severity.Error);
        }

    }

    //thông báo
    private void Message(string message, Severity severity)
    {
        Snackbar.Clear();
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
        Snackbar.Add(message, severity);
    }
}
