<AuthorizeView Roles="Admin">
    <Authorized>
        @page "/CreateUpdateServices"

        @using DATN.ADMIN.IServices
        @using DATN.Data.Entities
        @using DATN.ViewModels.DTOs.ServiceManager
        @inject ISnackbar Snackbar
        @inject IDialogService _diagService
        <EditForm Context="data" Model="@service" OnValidSubmit="@(async () => await Submit())">
            <MudItem xs="12" sm="12">
                <MudCard>
                    <MudCardContent>

                        @if (id == 0 || id == null)
                        {
                            <MudTextField T="string" Label="Tên dịch vụ" @bind-Value="@service.Name" For="@(() => service.Name)" />
                            <MudTextField T="string" Label="Tên dịch vụ" @bind-Value="@service.Description" For="@(() => service.Description)" />
                        }
                        else
                        {
                            <MudTextField T="string" Label="Tên dịch vụ" @bind-Value="@serviceUpdate.Name" For="@(() => serviceUpdate.Name)" />
                            <MudTextField T="string" Label="Tên dịch vụ" @bind-Value="@serviceUpdate.Description" For="@(() => serviceUpdate.Description)" />
                        }
                        <hr class="hr" />
                        <div class="mt-5" style="text-align: end;">
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                                @_nameButton
                            </MudButton>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </EditForm>

        @code {
        [Parameter]
        public int id { get; set; }
        [CascadingParameter] MudDialogInstance _dialogBox { get; set; }


        [Parameter]
        public CreateServiceVM service { get; set; } = new CreateServiceVM();

        [Parameter]
        public UpdateServiceVM serviceUpdate { get; set; } = new UpdateServiceVM();
        // [Parameter]
        // public Service sev { get; set; } = new Service();
        string _nameButton = "";
        [Inject]
        private IServiceManagermentService _serviceManagerment { get; set; }

        protected async override Task OnInitializedAsync()
        {
            if (id != null && id != 0)
            {
                _nameButton = "Cập nhật";
                var findServiceById = await _serviceManagerment.GetById(id);
                serviceUpdate.Name = findServiceById.Data.Name;
                serviceUpdate.Description = findServiceById.Data.Desciption;
            }
            else
            {
                _nameButton = "Thêm mới";
            }
        }

        public async Task Create()
        {
            if (await Confirm("thêm mới") == true)

            {
                var result = await _serviceManagerment.Create(service);
                if (result.IsSuccess == true)
                {

                    Message("Thêm dịch vụ mới thành công", Severity.Success);
                    _dialogBox.Close(DialogResult.Ok(true));
                }
                else
                    Message(result.Error, Severity.Error);
            }
            else
            {
                return;
            }
        }


        public async Task Update()
        {
            var confirm = await Confirm("cập nhật");
            if (!confirm)
            {
                return;
            }

            if (serviceUpdate != null)
            {
                var result = await _serviceManagerment.Update(id, serviceUpdate);
                if (result.IsSuccess)
                {
                    Message(result.Data, Severity.Success);

                    _dialogBox.Close(DialogResult.Ok(true));
                }
                else
                {
                    Message(result.Error, Severity.Error);
                }
            }
            else
            {
                Message("Có lỗi trong quá trình cập nhật", Severity.Error);
            }

        }

        public async Task Submit()
        {
            if (id == null || id == 0)
            {
                await Create();
            }
            else
            {
                await Update();
            }
        }

        private async Task<bool> Confirm(string text)
        {
            var confirm = await _diagService.ShowMessageBox("Thông báo", $"Xác nhận {text} dịch vụ?",
            yesText: "Xác nhận",
            cancelText: "Hủy", noText: null,
            options: new DialogOptions { Position = DialogPosition.Center, MaxWidth = MaxWidth.Small, FullWidth = true });
            StateHasChanged();
            if (!confirm.HasValue) return false;
            return confirm.Value;

        }

        //thông báo
        private void Message(string message, Severity severity)
        {
            Snackbar.Clear();
            Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
            Snackbar.Configuration.MaxDisplayedSnackbars = 10;
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
            Snackbar.Add(message, severity);
        }
        }

    </Authorized>
    <NotAuthorized>
        <p>Không có quyền truy cập</p>
    </NotAuthorized>
</AuthorizeView>
