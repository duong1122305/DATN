@page "/ListServicesDetails"
@using System.Net.Http.Json
@using DATN.ADMIN.Components
@using DATN.ADMIN.IServices
@using DATN.Data.Entities
@using DATN.Utilites
@using DATN.ViewModels.Common
@using DATN.ViewModels.DTOs.Authenticate
@using DATN.ViewModels.DTOs.ServiceDetail
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IDialogService _dialogservice
<PageTitle>Danh sách dịch vụ chi tiết</PageTitle>
<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@(async()=>await OpenDialog(null))">Thêm</MudButton>

<MudButton Variant="Variant.Filled" Href="/ListServices" Style="margin-block-end" StartIcon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Primary">Danh sách dịch vụ</MudButton>

<MudDataGrid Items="@lstServiceName" QuickFilter="@_quickFilter" Filterable="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Danh sách dịch vụ chi tiết</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" MaxLength="50"></MudTextField>
    </ToolBarContent>
    <Columns>
        <TemplateColumn Title="STT" Sortable="false" Filterable="false">
            <CellTemplate>
                <span>@(lstServiceName.IndexOf(context.Item) + 1)</span>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.ServiceName" Title="Tên dịch vụ" Sortable="false" Filterable="false" />
        <PropertyColumn Property="x => x.ServiceDetailName" Title="Tên chi tiết" Sortable="false" Filterable="false" />
            <TemplateColumn Title="Giá" Sortable="false" Filterable="false">
                <CellTemplate>
                <span style="text-align:center;">@CurrencyHelper.FormatCurrency(context.Item.Price)</span>
            </CellTemplate>
            </TemplateColumn>
        <TemplateColumn Title="Thời gian làm" Sortable="false" Filterable="false">
            <CellTemplate>
                <span style="text-align:center;">@context.Item.Duration phút</span>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Description" Title="Mô tả" Sortable="false" Filterable="false" />
        <PropertyColumn Property="x => x.CreatedAt" Title="Ngày tạo" Sortable="false" Filterable="false" />
        <TemplateColumn Title="Trạng thái" Sortable="false" Filterable="false">
            <CellTemplate>
                @if (!context.Item.IsDeleted)
                {
                    <span>
                        <MudChip Color="Color.Success" title="Hoạt động">Phục vụ</MudChip>
                    </span>
                }
                else
                {
                    <span>
                        <MudChip Color="Color.Error" title="Hoạt động">Ngưng phục vụ</MudChip>
                    </span>
                }
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x=>x.ServiceDetailId" Title="Hành động" Filterable="false" Sortable="false">
            <CellTemplate>
                <MudButtonGroup Variant="Variant.Filled">
                    <MudButton IconSize="Size.Large"
                               OnClick="async () => await UpdateStatusService(context.Item.ServiceDetailId)"
                               StartIcon="@(context.Item.IsDeleted ? Icons.Material.Filled.Done : Icons.Material.Filled.Delete)"
                               IconColor="@(context.Item.IsDeleted ? Color.Surface : Color.Error)"
                               title="@(context.Item.IsDeleted ? "Kích hoạt" : "Xoá")"></MudButton>

                    <MudButton IconSize="Size.Large" StartIcon="@Icons.Material.Filled.Edit" IconColor="Color.Warning" title="Sửa" OnClick="@(async()=>await OpenDialog(context.Item.ServiceDetailId))"></MudButton>
                    <MudButton IconSize="Size.Large" StartIcon="@Icons.Material.Filled.RemoveRedEye" OnClick="@(async() => await OpenViewDetails(context.Item.ServiceDetailId))" IconColor="Color.Info" title="Xem chi tiết"></MudButton>
                </MudButtonGroup>
            </CellTemplate>
        </PropertyColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="GetServiceNameVM" />
    </PagerContent>
</MudDataGrid>
<MudDrawer @bind-Open="@open" Anchor="@anchor" Elevation="2" Variant="@DrawerVariant.Temporary" Width="800px">
    <div style="margin-block-end">
        <MudText Typo="Typo.h6">CHI TIẾT DỊCH VỤ</MudText>
        <MudToggleIconButton @bind-Toggled="@open" ToggledIcon="@Icons.Material.Filled.Close"></MudToggleIconButton>
    </div>
    <div style="margin:10px">
        <MudForm Style="p-4">
            <MudTextField T="string" Label="Tên dịch vụ" Required="true" RequiredError="Tên dịch vụ không được để trống" />
            <MudTextField T="string" Label="Tên chi tiết" Required="true" RequiredError="Tên chi tiết không được để trống" />
            <MudTextField T="string" Label="Giá" Required="true" RequiredError="Giá không được để trống" />
            <MudTextField T="string" Label="Thời gian làm" Required="true" RequiredError="Thời gian làm không được để trống" />
            <MudTextField T="string" Label="Mô tả" Required="true" RequiredError="Mô tả không được để trống" />
            <MudTextField T="string" Label="Trạng thái" Required="true" RequiredError="Trạng thái" />
            @*             <div class="d-flex">
            <MudRadioGroup T="string" Required="true" RequiredError="Account type is required!">
            <MudRadio Option="@("Personal")">Personal</MudRadio>
            <MudRadio Option="@("Professional")">Professional</MudRadio>
            </MudRadioGroup>
            </div> *@
            <div class="d-flex align-center justify-space-between" style="margin-top:10px">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Cập nhật</MudButton>
            </div>
        </MudForm>
    </div>
</MudDrawer>
<style>
    .my-custom-class {
        backdrop-filter: blur(10px);
    }
</style>
@code {
    // private List<ServiceDetail> lstServiesDetails = new List<ServiceDetail>();
    private string searchString = "";
    private List<GetServiceNameVM> lstServiceName = new List<GetServiceNameVM>();
    [Inject]
    public IServiceDetailServices _serviceDetailService { get; set; }

    bool open;
    Anchor anchor;
    protected override async Task OnInitializedAsync()
    {
        var result = await _serviceDetailService.GetServiceName();

        if (result != null)
        {
            lstServiceName = result.OrderByDescending(c => c.ServiceDetailId).ToList();
        }
    }

    public async Task UpdateStatusService(int id)
    {
        var result = await _serviceDetailService.Remove(id);
        if (result.IsSuccess == true)
        {
            Message(result.Data, Severity.Success);
            await OnInitializedAsync();
        }
        else Message(result.Error, Severity.Error);
    }

    void OpenDrawer(Anchor anchor)
    {
        open = true;
        this.anchor = anchor;

    }
    private Func<GetServiceNameVM, bool> _quickFilter => x =>
       {
           if (string.IsNullOrWhiteSpace(searchString))
               return true;
           if (x.ServiceName.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
               return true;
           // if (x.ServiceDetailName.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
           //     return true; khi nào có thông tin ở trường này thì bỏ cmt 
           if ($"{x.Description} {x.Price} {x.Duration}".Contains(searchString.Trim()))
               return true;
           return false;
       };

    private async Task OpenDialog(int? id)
    {
        var parameters = new DialogParameters();
        string nameDialog = "Thêm mới dịch vụ chi tiết";
        parameters.Add("id", id);
        if (id != null)
        {
            nameDialog = "Chỉnh sửa dịch vụ chi tiết";
            parameters.Add("id", id);
        }
        DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Small,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true
            };
        try
        {
            var createUpdateDialog = await _dialogservice.ShowAsync<CreateUpServicesDetails>(nameDialog, parameters, options);
            var result = await createUpdateDialog.Result;
            if (!result.Canceled)
            {
                createUpdateDialog.Close();
                await OnInitializedAsync();
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    private void Message(string message, Severity severity)
    {
        Snackbar.Clear();
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
        Snackbar.Add(message, severity);
    }
    private async Task OpenViewDetails(int? id)
    {
        var parameters = new DialogParameters();
        string nameDialog = "Dich vụ chi tiết";
        parameters.Add("id", id);
        DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Small,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true
            };
        try
        {
            var createUpdateDialog = await _dialogservice.ShowAsync<ViewServicesDetails>(nameDialog, parameters, options);
            var result = await createUpdateDialog.Result;
            if (!result.Canceled)
            {
                createUpdateDialog.Close();
                await OnInitializedAsync();
            }
        }
        catch (Exception)
        {

            throw;
        }

    }

}