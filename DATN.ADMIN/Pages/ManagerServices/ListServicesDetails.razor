<AuthorizeView Roles="Admin">
    <Authorized>
        @page "/ListServicesDetails"
        @using System.Net.Http.Json
        @using DATN.ADMIN.Components
        @using DATN.ADMIN.IServices
        @using DATN.Data.Entities
        @using DATN.Utilites
        @using DATN.ViewModels.Common
        @using DATN.ViewModels.DTOs.Authenticate
        @using DATN.ViewModels.DTOs.ServiceDetail
        @using MudBlazor;
        @inject HttpClient httpClient
        @inject ISnackbar Snackbar
        @inject IDialogService _dialogservice
        <PageTitle>Danh sách dịch vụ chi tiết</PageTitle>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@(async()=>await OpenDialog(null))">Thêm</MudButton>

        <MudButton Variant="Variant.Filled" Href="/ListServices" Style="margin-block-end" StartIcon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Primary">Danh sách dịch vụ</MudButton>
        <MudTable Items="@lstServiceName">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Danh sách dịch vụ chi tiết</MudText>
                <MudSpacer />
                <MudTextField T="string" Placeholder="Tìm kiếm, tên" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Small" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh Style="text-align:center;">STT</MudTh>
                <MudTh Style="text-align:center;">Tên chi tiết</MudTh>
                <MudTh Style="text-align:center;">Tên dịch vụ</MudTh>
                <MudTh Style="text-align:center;">Giá</MudTh>
                <MudTh Style="text-align:center;">Thời gian làm</MudTh>
                <MudTh Style="text-align:center;">Ngày tạo</MudTh>
                <MudTh Style="text-align:center;">Trạng thái</MudTh>
                <MudTh Style="text-align:center;">Hành động</MudTh>
            </HeaderContent>
            <RowTemplate Context="data">
                <MudTd DataLabel="STT" Style="text-align:center;">
                    @(lstServiceName.IndexOf(data) + 1)
                </MudTd>
                <MudTd DataLabel="Name" Style="text-align:center;">@data.Description</MudTd>
                <MudTd DataLabel="Name" Style="text-align:center;">@data.ServiceName</MudTd>
                <MudTd DataLabel="Name" Style="text-align:center;">@CurrencyHelper.FormatCurrency(data.Price)</MudTd>
                <MudTd DataLabel="Name" Style="text-align:center;">@data.Duration Phút</MudTd>
                <MudTd DataLabel="Name" Style="text-align:center;">@data.CreatedAt</MudTd>
                @if (!data.IsDeleted)
                {
                    <MudTd DataLabel="Email" Style="text-align:center;">
                        <MudChip Color="Color.Success" title="Hoạt động">Phục vụ</MudChip>
                    </MudTd>
                }
                else
                {
                    <MudTd DataLabel="Email" Style="text-align:center;">
                        <MudChip Color="Color.Error" title="Hoạt động">Ngưng phục vụ</MudChip>
                    </MudTd>
                }
                <MudTd Style="text-align:center;">
                    <MudButton IconSize="MudBlazor.Size.Large"
                               OnClick="async () => await UpdateStatusService(data.ServiceDetailId)"
                               StartIcon="@(data.IsDeleted ? Icons.Material.Filled.Done : Icons.Material.Filled.Delete)"
                               IconColor="@(data.IsDeleted ? Color.Surface : Color.Error)"
                               title="@(data.IsDeleted ? "Kích hoạt" : "Xoá")"></MudButton>

                    <MudButton IconSize="MudBlazor.Size.Large" StartIcon="@Icons.Material.Filled.Edit" IconColor="Color.Warning" title="Sửa" OnClick="@(async()=>await OpenDialog(data.ServiceDetailId))"></MudButton>
                    <MudButton IconSize="MudBlazor.Size.Large" StartIcon="@Icons.Material.Filled.RemoveRedEye" OnClick="@(async() => OpenViewDetails(data.ServiceDetailId))" IconColor="Color.Info" title="Xem chi tiết"></MudButton>
                </MudTd>

            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
        <MudDrawer @bind-Open="@open" Anchor="@anchor" Elevation="2" Variant="@DrawerVariant.Temporary" Width="800px">
            <div style="margin-block-end">
                <MudText Typo="Typo.h6">CHI TIẾT DỊCH VỤ</MudText>
                <MudToggleIconButton @bind-Toggled="@open" ToggledIcon="@Icons.Material.Filled.Close"></MudToggleIconButton>
            </div>
            <div style="margin:10px">
                <MudForm Style="p-4">
                    <MudTextField T="string" Label="Tên dịch vụ" Required="true" RequiredError="Tên dịch vụ không được để trống" />
                    <MudTextField T="string" Label="Tên chi tiết" Required="true" RequiredError="Tên chi tiết không được để trống" />
                    <MudTextField T="string" Label="Giá" Required="true" RequiredError="Giá không được để trống" />
                    <MudTextField T="string" Label="Thời gian làm" Required="true" RequiredError="Thời gian làm không được để trống" />
                    <MudTextField T="string" Label="Mô tả" Required="true" RequiredError="Mô tả không được để trống" />
                    <MudTextField T="string" Label="Trạng thái" Required="true" RequiredError="Trạng thái" />
                    @*             <div class="d-flex">
                    <MudRadioGroup T="string" Required="true" RequiredError="Account type is required!">
                    <MudRadio Option="@("Personal")">Personal</MudRadio>
                    <MudRadio Option="@("Professional")">Professional</MudRadio>
                    </MudRadioGroup>
                    </div> *@
                    <div class="d-flex align-center justify-space-between" style="margin-top:10px">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Cập nhật</MudButton>
                    </div>
                </MudForm>
            </div>
        </MudDrawer>
        <style>
            .my-custom-class {
                backdrop-filter: blur(10px);
            }
        </style>
        @code {
        // private List<ServiceDetail> lstServiesDetails = new List<ServiceDetail>();
        private List<GetServiceNameVM> lstServiceName = new List<GetServiceNameVM>();
        [Inject]
        public IServiceDetailServices _serviceDetailService { get; set; }

        bool open;
        MudBlazor.Anchor anchor;
        protected override async Task OnInitializedAsync()
        {
            var result = await _serviceDetailService.GetServiceName();

            if (result != null)
            {
                lstServiceName = result.OrderByDescending(p => p.ServiceDetailId).ToList();
            }
        }

        public async Task UpdateStatusService(int id)
        {
            var result = await _serviceDetailService.Remove(id);
            if (result.IsSuccess == true)
            {
                Message(result.Data, Severity.Success);
                await OnInitializedAsync();
            }
            else Message(result.Error, Severity.Error);
        }

        void OpenDrawer(MudBlazor.Anchor anchor)
        {
            open = true;
            this.anchor = anchor;

        }

        private async Task OpenDialog(int? id)
        {
            var parameters = new DialogParameters();
            string nameDialog = "Thêm mới dịch vụ chi tiết";
            parameters.Add("id", id);
            if (id != null)
            {
                nameDialog = "Chỉnh sửa dịch vụ chi tiết";
                parameters.Add("id", id);
            }
            DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Small,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true
            };
            try
            {
                var createUpdateDialog = await _dialogservice.ShowAsync<CreateUpServicesDetails>(nameDialog, parameters, options);
                var result = await createUpdateDialog.Result;
                if (!result.Canceled)
                {
                    createUpdateDialog.Close();
                    await OnInitializedAsync();
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        private void Message(string message, Severity severity)
        {
            Snackbar.Clear();
            Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
            Snackbar.Configuration.MaxDisplayedSnackbars = 10;
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
            Snackbar.Add(message, severity);
        }
        private async Task OpenViewDetails(int? id)
        {
            var parameters = new DialogParameters();
            string nameDialog = "Dich vụ chi tiết";
            parameters.Add("id", id);
            DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Small,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true
            };
            try
            {
                var createUpdateDialog = await _dialogservice.ShowAsync<ViewServicesDetails>(nameDialog, parameters, options);
                var result = await createUpdateDialog.Result;
                if (!result.Canceled)
                {
                    createUpdateDialog.Close();
                    await OnInitializedAsync();
                }
            }
            catch (Exception)
            {

                throw;
            }

        }

        }
    </Authorized>
    <NotAuthorized>
        <p>Không có quyền truy cập</p>
    </NotAuthorized>
</AuthorizeView>
