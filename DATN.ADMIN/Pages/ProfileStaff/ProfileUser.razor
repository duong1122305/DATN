@page "/profileUser"
@inherits LayoutComponentBase
@using System.IdentityModel.Tokens.Jwt
@using DATN.ADMIN.IServices
@using DATN.ADMIN.Services
@using DATN.ViewModels.DTOs.Authenticate
@using System.Security.Claims

<PageTitle>Hồ Sơ Người Dùng</PageTitle>

<MudGrid>
    <MudItem xs="12" sm="6">
        <MudText Typo="Typo.h6" Class="p-4">Hồ sơ người dùng</MudText>
        <MudPaper Class="pa-4">
            <MudForm @bind-IsValid="@success">
                <MudTextField T="string" Label="Tên người dùng" @bind-Value="@user.UserName" Required="true" RequiredError="Vui lòng không để trống!" />
                <MudTextField T="string" Label="Họ và tên" @bind-Value="@user.FullName" Required="true" RequiredError="Vui lòng không để trống" />
                <MudTextField T="string" Label="Mật khẩu" @bind-Value="@user.Password" InputType="InputType.Password" Required="true" RequiredError="Vui lòng không để trống" />
                <MudTextField T="string" Label="Số điện thoại" @bind-Value="@user.PhoneNumber" Required="true" RequiredError="Vui lòng không để trống" />
                <MudTextField T="string" Label="Email" @bind-Value="@user.Email" Required="true" RequiredError="Vui lòng không để trống" />
                <MudTextField T="string" Label="Địa chỉ" @bind-Value="@user.Address" Required="true" RequiredError="Vui lòng không để trống" />
                <div class="d-flex align-center justify-space-between pt-2">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Xác nhận</MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>
@code {


    [Inject]
    NavigationManager navi { get; set; }

    [Inject]
    IUserClientSev userClient { get; set; }

    [Inject]
    HttpContextAccessor _contextAccessor { get; set; }

    UserInfView user { get; set; } = new UserInfView();

    bool success = false;
    private string id = "";

    protected async override Task OnInitializedAsync()
    {
        var token = _contextAccessor.HttpContext.Session.GetString("Key");
        var tokenHandler = new JwtSecurityTokenHandler();
        var jwtSecurityToken = tokenHandler.ReadJwtToken(token);
        // var listClaims = jwtSecurityToken.Claims.ToArray();
        id = jwtSecurityToken.Claims.Where(c => c.Type == ClaimTypes.NameIdentifier).FirstOrDefault()?.Value;
        // foreach(var i in listClaims)
        // {
        //     if(i.Type == ClaimTypes.NameIdentifier)
        //     {
        //         id = i.Value;
        //     }
        // }

        var result = await userClient.GetInfoUser(id);
        if (result != null) user = result.Data;

        if (result == null) navi.NavigateTo("/NotFound");
    }
}