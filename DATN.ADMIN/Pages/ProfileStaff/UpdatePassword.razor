<AuthorizeView>
    <Authorized>
        @inject ISnackbar Snackbar
        @inject IDialogService _diagService;
        @inject HttpClient httpClient
        @using DATN.ADMIN.IServices
        @using DATN.ViewModels.Common
        @using DATN.ViewModels.DTOs.Authenticate
        @using System.Security.Claims
        @using System.IdentityModel.Tokens.Jwt

        <EditForm Context="data" Model="@user">
            <MudItem xs="12" sm="12">
                <MudCard>
                    <MudCardContent>
                        <MudTextField T="string" @bind-Value="user.OldPassword" Label="Nhập vào mật khẩu cũ" />
                        <MudTextField T="string" @bind-Value="user.NewPassword" Label="Nhập vào mật khẩu mới" />
                        <MudTextField T="string" Label="Nhập lại mật khẩu mới" @bind-Value="user.ConfirmPassword" />
                        <hr class="hr" />
                        <div class="mt-5" style="text-align: end;">
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" OnClick="@(async()=>await Update())" Color="Color.Primary" Class="ml-auto">Xác nhận</MudButton>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </EditForm>

        @code {
        [CascadingParameter] MudDialogInstance _dialogBox { get; set; }
        private bool display = false;
        //nó đây
        [Parameter]
        public UserChangePasswordView user { get; set; } = new UserChangePasswordView();

        [Inject]
        IUserClientSev userClient { get; set; }

        [Inject]
        HttpContextAccessor _contextAccessor { get; set; }

        protected async override Task OnInitializedAsync()
        {
            var token = _contextAccessor.HttpContext.Session.GetString("Key");
            var tokenHandler = new JwtSecurityTokenHandler();
            var jwtSecurityToken = tokenHandler.ReadJwtToken(token);
            // var listClaims = jwtSecurityToken.Claims.ToArray();
            user.UserName = jwtSecurityToken.Claims.Where(c => c.Type == ClaimTypes.Name).FirstOrDefault()?.Value;
        }

        //thêm
        protected async Task Update()
        {
            try
            {
                if (await Confirm() == true)
                {
                    var result = await userClient.ChangePassword(user);
                    if (result.IsSuccess == true)
                    {
                        Message("Đổi mật khẩu thành công", Severity.Success);
                        _dialogBox.Close(DialogResult.Ok(true));
                    }
                    else
                    {
                        Message("Đổi mật khẩu thất bại", Severity.Error);
                    }
                }

            }
            catch (Exception e)
            {
                throw new Exception(e.Message);
            }
        }
        //thông báo xác nhận
        private async Task<bool?> Confirm()
        {
            var confirm = await _diagService.ShowMessageBox("Thông báo",
            "Xác nhận thay đổi mật khẩu?",
            yesText: "Xác nhận",
            cancelText: "Hủy", noText: null, options: new DialogOptions { Position = DialogPosition.TopCenter, MaxWidth = MaxWidth.Small, FullWidth = true });
            StateHasChanged();
            return confirm;
        }

        //thông báo
        private void Message(string message, Severity severity)
        {
            Snackbar.Clear();
            Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
            Snackbar.Configuration.MaxDisplayedSnackbars = 10;
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
            Snackbar.Add(message, severity);
        }

        }
    </Authorized>
    <NotAuthorized>
        <p>Không có quyền truy cập</p>
    </NotAuthorized>
</AuthorizeView>
