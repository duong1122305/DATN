@inject ISnackbar Snackbar
@inject IDialogService _diagService;
@inject HttpClient httpClient
@using DATN.ADMIN.IServices
@using DATN.Data.Entities
@using DATN.ViewModels.Common
@using DATN.ViewModels.DTOs.Authenticate
@using DATN.ViewModels.DTOs.Guest
<EditForm Model="@guest">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<MudItem xs="12" sm="12">
		<MudCard>
			<MudCardContent>
				<MudTextField T="string" @bind-Value="@guest.Name" Label="Họ và tên" For="@(() => guest.Name)" Variant="Variant.Outlined" />
				<MudTextField T="string" @bind-Value="@guest.Address" Label="Địa chỉ" For="@(() => guest.Address)" Variant="Variant.Outlined" />
				<MudTextField T="string" @bind-Value="@guest.PhoneNumber" Label="Số điện thoại" For="@(() => guest.PhoneNumber)" Variant="Variant.Outlined" />
				<MudSelect T="int" @bind-Value="@Gender" Label="Giới tính" Clearable AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined">
					<MudSelectItem T="int" Value="1">Nam</MudSelectItem>
					<MudSelectItem T="int" Value="0">Nữ</MudSelectItem>
					<MudSelectItem T="int" Value="-1">Không xác định</MudSelectItem>

				</MudSelect>
				<MudTextField T="string" @bind-Value="@guest.Email" Label="Email" For="@(() => guest.Email)" Variant="Variant.Outlined" />
				<MudTextField T="string" @bind-Value="@guest.UserName" Label="Tên đăng nhập" For="@(() => guest.UserName)" Variant="Variant.Outlined" />
				<MudTextField T="string" @bind-Value="guest.Password" Label="Mật khẩu" For="@(() => guest.Password)" Variant="Variant.Outlined" />

				<hr class="hr" />
				<div class="mt-5" style="text-align: end;">
					<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" OnClick="@(async()=>await Submit())" Color="Color.Primary" Class="ml-auto">@_nameButton</MudButton>
				</div>
			</MudCardContent>
		</MudCard>
	</MudItem>
</EditForm>

@code {
	[Inject]
	private IGuestManagerClient _client { get; set; }

	[CascadingParameter] MudDialogInstance _dialogBox { get; set; }
	private string _nameButton = "Thêm mới";

	[Parameter]
	public GuestViewModel guest { get; set; } = new GuestViewModel();

	private bool IsNew = true;
	private int Gender = 1;

	protected async override Task OnInitializedAsync()
	{
		if (guest.UserName != null)
		{
			_nameButton = "Cập nhật";
			IsNew = false;
		}
	}

	//thêm
	protected async Task Create()
	{
		if (string.IsNullOrEmpty(guest.UserName))
		{
			_client.RegisterNoUser(new GuestRegisterNoUserRequest()
				{
					Name = guest.Name,
					Address = guest.Address,
					Gender = guest.Gender,
					PhoneNumber = guest.PhoneNumber,
				});
		}

	}
	//thông báo xác nhận
	private async Task<bool?> Confirm()
	{
		var confirm = await _diagService.ShowMessageBox("Thông báo",
	"Xác nhận cập nhật nhân viên?",
					yesText: "Xác nhận",
					cancelText: "Hủy", noText: null, options: new DialogOptions { Position = DialogPosition.TopCenter, MaxWidth = MaxWidth.Small, FullWidth = true });
		StateHasChanged();
		return confirm;
	}
	//cập nhật
	public async Task Update()
	{

	}
	private async Task Submit()
	{
		if (Gender != -1)
		{
			guest.Gender = Gender==1?true:false;
		}
		if (IsNew)
		{
			Create();
		}
		StateHasChanged();
	}

	//thông báo
	private void Message(string message, Severity severity)
	{
		Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
		Snackbar.Configuration.MaxDisplayedSnackbars = 10;
		Snackbar.Add(message, severity);
	}
	bool success = false;
} 