@using DATN.ViewModels.Common
@using DATN.ViewModels.DTOs.Authenticate
@inject ISnackbar Snackbar
@inject HttpClient httpClient
@if (user != null)
{
    <EditForm Model="@user" >
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField T="string" @bind-Value="user.FullName" Label="Họ tên" For="@(() => user.FullName)" />
                    <MudTextField T="string" @bind-Value="user.UserName" Label="Tên đăng nhập" For="@(() => user.UserName)" />
                    <MudTextField T="string" @bind-Value="user.Address" Label="Địa chỉ" For="@(() => user.Address)" />
                    <MudTextField T="string" @bind-Value="user.Email" Label="Email" For="@(() => user.Email)" />
                    <MudTextField T="string" @bind-Value="user.PhoneNumber" Label="Số điện thoại" For="@(() => user.PhoneNumber)" />
                    <MudTextField T="string" @bind-Value="user.Password" Label="Mật khẩu" For="@(() => user.Password)" />
                    <hr class="hr" />
                    <div class="mt-5" style="text-align: end;">
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" OnClick="@(async()=>await Create())" Color="Color.Primary" Class="ml-auto">@_nameButton</MudButton>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </EditForm>
}
else
{
 <DATN.ADMIN.Components.LoadingIndicator></DATN.ADMIN.Components.LoadingIndicator>
}
@code {
    [Parameter] 
    public UserInfView? userName { get; set; }
    [CascadingParameter]
    MudDialog _dialogBox{ get; set; }
    private string _nameButton = "Thêm mới";

    private List<UserInfView> _users;
    //nó đây
    private UserRegisterView user = new UserRegisterView();

    protected async override Task OnInitializedAsync()
    {
        var usrr = await httpClient.GetFromJsonAsync<ResponseData<List<UserInfView>>>("api/UserLogin/List-User");

        if (userName!= null)
        {
            _nameButton = "Cập nhật";
        }
    }

    protected async Task Create()
    {
        //gọi api thêm
        var result = await httpClient.PostAsJsonAsync<UserRegisterView>("api/UserLogin/User-Register",user);
        if (result.IsSuccessStatusCode)
        {
            Message("Thêm mới thành công", Severity.Success);
            StateHasChanged();
            _dialogBox.Close(DialogResult.Ok(true));
        }
        else
        {
            Message("Thêm mới thất bại", Severity.Error);
        }
    }

    //thông báo
    private void Message(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add(message, severity);
    }
    bool success = false;
}