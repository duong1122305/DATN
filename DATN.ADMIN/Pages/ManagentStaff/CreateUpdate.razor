@inject ISnackbar Snackbar
@inject IDialogService _diagService;
@inject HttpClient httpClient
@using DATN.ADMIN.IServices
@using DATN.Data.Entities
@using DATN.ViewModels.Common
@using DATN.ViewModels.DTOs.Authenticate
<EditForm Model="@user">
    <MudItem xs="12" sm="12">
        <MudCard>
            <MudCardContent>
                <MudTextField T="string" @bind-Value="user.FullName" Label="Họ và tên" For="@(() => user.FullName)" />
                <MudTextField T="string" @bind-Value="user.UserName" Label="Tên đăng nhập" For="@(() => user.UserName)" Disabled="display" />
                <MudTextField T="string" @bind-Value="user.Address" Label="Địa chỉ" For="@(() => user.Address)" />
                <MudTextField T="string" @bind-Value="user.Email" Label="Email" For="@(() => user.Email)" />
                <MudTextField T="string" @bind-Value="user.PhoneNumber" Label="Số điện thoại" For="@(() => user.PhoneNumber)" />
                <MudTextField T="string" @bind-Value="user.Password" Label="Mật khẩu" For="@(() => user.Password)" InputType="InputType.Password"/>
                <hr class="hr" />
                <div class="mt-5" style="text-align: end;">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" OnClick="@(async()=>await Submid())" Color="Color.Primary" Class="ml-auto">@_nameButton</MudButton>
                </div>
            </MudCardContent>
        </MudCard>
    </MudItem>
</EditForm>

@code {
    [Parameter]
    public string userName { get; set; }
    [CascadingParameter] MudDialogInstance _dialogBox { get; set; }
    private string _nameButton = "Thêm mới";
    private bool display = false;
    [Inject]
    private IUserClientSev _client {get; set;}
    //nó đây
    [Parameter]
    public UserRegisterView user { get; set; } = new UserRegisterView();

    protected async override Task OnInitializedAsync()
    {

    }

    //thêm
    protected async Task Create()
    {
        //gọi api thêm
        var result = await _client.Register(user);
        if (result.IsSuccess)
        {
            Message("Thêm mới thành công", Severity.Success);
            _dialogBox.Close(DialogResult.Ok(true));
        }
        else
        {
            Message("Thêm mới thất bại", Severity.Error);
        }
    }
    //thông báo xác nhận
    private async Task<bool?> Confirm()
    {
        var confirm = await _diagService.ShowMessageBox("Thông báo",
    "Xác nhận cập nhật nhân viên?",
           yesText: "Xác nhận",
                    cancelText: "Hủy", noText: null, options: new DialogOptions { Position = DialogPosition.TopCenter, MaxWidth = MaxWidth.Small, FullWidth = true });
        StateHasChanged();
        return confirm;
    }
    //cập nhật
    public async Task Update()
    {
        if (await Confirm() == true)
        {
            var response = await httpClient.GetFromJsonAsync<ResponseData<string>>($"api/UserLogin/Get-id-user?username={userName}");
            var result = await httpClient.PutAsJsonAsync<UserRegisterView>($"api/UserLogin/Update-inf?id={response.Data}", user);
            if (result.IsSuccessStatusCode)
            {
                Message("Cập nhật thành công", Severity.Success);
                _dialogBox.Close(DialogResult.Ok(true));
            }
            else
            {
                Message("Cập nhật thất bại", Severity.Error);
            }
        }
    }
    private async Task Submid()
    {
        if (user.Password != null)
        {
            var response = await httpClient.GetFromJsonAsync<ResponseData<string>>($"api/UserLogin/Get-id-user?username={user.UserName}");
            if (response.Data == null)
            {
                await Create();
            }
            else
            {
                Message("UserName bị trùng", Severity.Warning);
            }
        }
        else
        {
            var response = await httpClient.GetFromJsonAsync<ResponseData<string>>($"api/UserLogin/Get-id-user?username={userName}");
            if (response.IsSuccess)
            {
                await Update();
            }
            else
            {
                Message("chưa biết", Severity.Warning);
            }
        }
        StateHasChanged();
    }

    //thông báo
    private void Message(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add(message, severity);
    }
    bool success = false;
} 