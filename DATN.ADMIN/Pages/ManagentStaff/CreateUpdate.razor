@inject ISnackbar Snackbar
@inject IDialogService _diagService;
@inject HttpClient httpClient
@using DATN.ADMIN.IServices
@using DATN.Data.Entities
@using DATN.ViewModels.Common
@using DATN.ViewModels.DTOs.Authenticate
<EditForm Model="@user" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudItem xs="12" sm="12">
        <MudCard>
            <MudCardContent>
                <MudTextField T="string" @bind-Value="user.FullName" Label="Họ và tên" For="@(() => user.FullName)" MaxLength="50" />
                  @if (userName ==null)
                {
                    <MudTextField T="string" @bind-Value="user.Email" Label="Email" For="@(() => user.Email)" MaxLength="50" />
                }
                else
                {
                    <MudTextField T="string" @bind-Value="user.Email" Label="Email" For="@(() => user.Email)" MaxLength="50" Disabled/>
                }
                <MudTextField T="string" @bind-Value="user.PhoneNumber" Label="Số điện thoại" For="@(() => user.PhoneNumber)" MaxLength="10" />
                <MudField Label="Giới tính" Variant="Variant.Text" InnerPadding="false">
                    <MudRadioGroup @bind-Value="user.Gender" Name="Giới tính" style="justify-content:space-between">
                        <MudRadio Value="true" Color="Color.Primary">Nam</MudRadio>
                        <MudRadio Value="false" Color="Color.Secondary">Nữ</MudRadio>
                    </MudRadioGroup>
                </MudField>
                <DATN.ADMIN.Components.AddressComponent OnAddressChanged="HandleAddressChanged" AddressCode="@AddressCode"></DATN.ADMIN.Components.AddressComponent>
                <hr class="hr" />
                <div class="mt-5" style="text-align: end;">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">@_nameButton</MudButton>
                </div>
            </MudCardContent>
        </MudCard>
    </MudItem>
</EditForm>

@code {
    [Parameter]
    public string userName { get; set; }
    [CascadingParameter] MudDialogInstance _dialogBox { get; set; }
    private string _nameButton = "Thêm mới";
    [Inject]
    private IUserClientSev _client { get; set; }
    //nó đây
    [Parameter]
    public UserRegisterView user { get; set; } = new UserRegisterView();
    private string AddressCode = "";
    UserUpdateView view = new UserUpdateView();
    protected async override Task OnInitializedAsync()
    {
        if (userName != null)
        {
            _nameButton = "Cập nhật";
        }
    }
    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        StateHasChanged();
    }

    //thêm
    protected async Task Create()
    {
        var confirm = await Confirm("tạo mới");
        if (!confirm)
        {
            return;
        }
        //gọi api thêm
        var result = await _client.Register(user);
        if (result.IsSuccess)
        {
            Message(result.Data, Severity.Success);
            _dialogBox.Close();
        }
        else
        {
            Message(result.Error, Severity.Warning);
        }
        Message("Vui lòng nhập đủ dữ liệu!", Severity.Error);
    }
    //thông báo xác nhận
    private async Task<bool> Confirm(string text)
    {
        var confirm = await _diagService.ShowMessageBox("Thông báo", $"Xác nhận {text} nhân viên?",
                    yesText: "Xác nhận",
                    cancelText: "Hủy", noText: null,
                    options: new DialogOptions { Position = DialogPosition.Center, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true });
        StateHasChanged();
        if (!confirm.HasValue) return false;
        return confirm.Value;
    }
    //cập nhật
    public async Task Update()
    {
        var confirm = await Confirm("cập nhật");
        if (!confirm)
        {
            return;
        }
        view.FullName = user.FullName;
        view.Address = user.Address;
        view.PhoneNumber = user.PhoneNumber;
        user.Email = view.Email;
        view.Gender = user.Gender;
        var result = await _client.UpdateUser(view, userName);
        if (result.IsSuccess)
        {
            Message(result.Data, Severity.Success);
            _dialogBox.Close();
        }
        else
        {
            Message(result.Error, Severity.Warning);
        }

    }
    private async void OnValidSubmit(EditContext context)
    {
        if (_nameButton == "Thêm mới")
        {
            await Create();
        }
        else
        {
            await Update();
        }
        StateHasChanged();
    }

    //thông báo
    private void Message(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add(message, severity);
    }
    bool success = false;

    private void HandleAddressChanged(string address)
    {
        user.Address = address;
    }
} 