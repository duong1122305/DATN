<AuthorizeView Roles="Admin">
    <Authorized>
        @inject ISnackbar Snackbar
        @inject IDialogService _diagService;
        @inject HttpClient httpClient
        @using DATN.ADMIN.IServices
        @using DATN.Data.Entities
        @using DATN.ViewModels.Common
        @using DATN.ViewModels.DTOs.Authenticate
        <DATN.ADMIN.Components.Loadding _isVisible="isLoading" />

        <EditForm Context="data" Model="@user">
            <DataAnnotationsValidator />
            <MudItem xs="12" sm="12">
                <MudCard>
                    <MudCardContent>
                        <MudTextField T="string" @bind-Value="user.FullName" Label="Họ và tên" For="@(() => user.FullName)" MaxLength="50" />
                        @if (userName == null)
                        {
                            <MudTextField T="string" @bind-Value="user.Email" Label="Email" For="@(() => user.Email)" MaxLength="50" />
                        }
                        <MudTextField T="string" @bind-Value="user.PhoneNumber" Label="Số điện thoại" For="@(() => user.PhoneNumber)" MaxLength="10" />
                        <MudField Label="Giới tính" Variant="Variant.Text" InnerPadding="false">
                            <MudRadioGroup @bind-Value="user.Gender" Name="Giới tính" style="justify-content:space-between">
                                <MudRadio Value="true" Color="Color.Primary">Nam</MudRadio>
                                <MudRadio Value="false" Color="Color.Secondary">Nữ</MudRadio>
                            </MudRadioGroup>
                        </MudField>
                        @if (userName == null)
                        {
                            <MudSelect Class="mud-mb-2" T="RoleView" Label="Chức vụ" Width="200px" @bind-Value="role" AnchorOrigin="Origin.BottomCenter" Required>
                                @foreach (var item in lstRole)
                                {
                                    @if (item.NameRole == "ServiceStaff")
                                    {
                                        <MudSelectItem T="RoleView" Value="@item">Nhân viên dịch vụ</MudSelectItem>
                                    }
                                    else
                                    {
                                        <MudSelectItem T="RoleView" Value="@item">Lễ tân</MudSelectItem>
                                    }
                                }
                            </MudSelect>
                        }
                        <DATN.ADMIN.Components.AddressComponent OnAddressChanged="HandleAddressChanged" AddressCode="@AddressCode"></DATN.ADMIN.Components.AddressComponent>
                        <hr class="hr" />
                        <div class="mt-5" style="text-align: end;">
                            <MudButton ButtonType="ButtonType.Submit" OnClick="OnValidSubmit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">@_nameButton</MudButton>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </EditForm>

        @code {

        [Parameter]
        public string userName { get; set; }
        [CascadingParameter] MudDialogInstance _dialogBox { get; set; }
        private string _nameButton = "Thêm mới";
        [Inject]
        private IUserClientSev _client { get; set; }
        //nó đây
        [Parameter]
        public UserRegisterView user { get; set; } = new UserRegisterView();
        private string AddressCode = "";

        public List<RoleView> lstRole = new List<RoleView>();

        public RoleView role;
        private bool isLoading;

        protected async override Task OnInitializedAsync()
        {
            if (userName != null)
            {
                _nameButton = "Cập nhật";
                if (!string.IsNullOrEmpty(user.Address))
                {
                    AddressCode = user.Address;
                }
            }
            var respone = await _client.ListPosition();
            if (respone.IsSuccess)
            {
                lstRole = respone.Data;
            }
            else
            {
                lstRole = new List<RoleView>();
            }
        }


        //thêm
        protected async Task Create()
        {
            var confirm = await Confirm("tạo mới");
            if (!confirm)
            {
                return;
            }
            isLoading = true;
            await Task.Delay(500);
            //gọi api thêm
            var result = await _client.Register(user);

            if (result.IsSuccess)
            {
                var idUserAffterAdd = await _client.GetById(user.PhoneNumber);
                var addRole = new AddRoleForUserView()
                {
                    RoleId = role.IdRole.ToString(),
                    UserId = idUserAffterAdd.Data
                };
                var position = await _client.AddRoleForUser(addRole);
                Snackbar.Add(result.Data, Severity.Success);
                isLoading = false;
                StateHasChanged();
                _dialogBox.Close();
            }
            else
            {
                isLoading = false;
                Snackbar.Add(result.Error, Severity.Warning);
            }
            isLoading = false;
            StateHasChanged();

        }
        //thông báo xác nhận
        private async Task<bool> Confirm(string text)
        {
            var confirm = await _diagService.ShowMessageBox("Thông báo", $"Xác nhận {text} nhân viên?",
            yesText: "Xác nhận",
            cancelText: "Hủy", noText: null,
            options: new DialogOptions { Position = DialogPosition.Center, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true });
            StateHasChanged();
            if (!confirm.HasValue) return false;
            return confirm.Value;
        }
        //cập nhật
        public async Task Update()
        {
            isLoading = true;
            await Task.Delay(500);
            var confirm = await Confirm("cập nhật");
            if (!confirm)
            {
                return;
            }
            UserUpdateView view = new UserUpdateView()
            {
                FullName = user.FullName,
                Address = user.Address,
                Email = user.Email,
                PhoneNumber = user.PhoneNumber,
                Gender = user.Gender
            };
            var result = await _client.UpdateUser(view, userName);
            if (result.IsSuccess)
            {
                Snackbar.Add(result.Data, Severity.Success);
                isLoading = false;
                StateHasChanged();
                _dialogBox.Close();
            }
            else
            {
                isLoading = false;
                Snackbar.Add(result.Error, Severity.Warning);
            }
            isLoading = false;
            StateHasChanged();
        }
        private async Task OnValidSubmit()
        {
            if (userName != null)
            {
                await Update();
            }
            else
            {
                await Create();

            }
            StateHasChanged();
        }

        private void HandleAddressChanged(string address)
        {
            user.Address = address;
        }
        }
    </Authorized>
    <NotAuthorized>
        <p>Không có quyền truy cập</p>
    </NotAuthorized>
</AuthorizeView>