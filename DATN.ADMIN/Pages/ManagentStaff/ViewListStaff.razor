@page "/ListStaff"
@using System.Net.Http.Json
@using DATN.ADMIN.Components
@using DATN.ADMIN.IServices
@using DATN.Data.Entities
@using DATN.ViewModels.Common
@using DATN.ViewModels.DTOs.Authenticate
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IDialogService _dialogservice;
<PageTitle>Danh sách nhân viên</PageTitle>

<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@(async()=>await OpenDialog(null))" Style="margin-bottom: 10px">Thêm</MudButton>
<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@(async()=>await AddToShift())" Style="margin-bottom: 10px">Thêm vào ca làm</MudButton>
<MudSelect T="string" Label="Ca làm" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Disabled="@(!IsAnyUserSelected)" style="!width:100px; margin-bottom: 10px;">
    @foreach (var item in lstShift)
    {
        <MudSelectItem Value="@item.Name" style="width:100px; margin-bottom: 10px;">@item.Name</MudSelectItem>
    }
</MudSelect>
@if (lstUser.Count > 0 && lstUser != null)
{
    <MudTable Items="@lstUser" Hover="true" Filter="new Func<UserInfView,bool>(FilterFunc)">
        <ToolBarContent>

            <MudText Typo="Typo.h6">Danh sách nhân viên</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Tìm kiếm, tên" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="text-align:center;">ID</MudTh>
            <MudTh Style="text-align:center;"><MudTableSortLabel SortBy="new Func<UserInfView, object>(x=>x.FullName)">Tên nhân viên</MudTableSortLabel></MudTh>
            <MudTh Style="text-align:center;"><MudTableSortLabel SortBy="new Func<UserInfView, object>(x=>x.PhoneNumber)">SĐT</MudTableSortLabel></MudTh>
            <MudTh Style="text-align:center;"><MudTableSortLabel SortBy="new Func<UserInfView, object>(x=>x.Address)">Địa chỉ</MudTableSortLabel></MudTh>
            <MudTh Style="text-align:center;"><MudTableSortLabel SortBy="new Func<UserInfView, object>(x=>x.Email)">Email</MudTableSortLabel></MudTh>
            <MudTh Style="text-align:center;">Trạng thái</MudTh>
            <MudTh Style="text-align:center;">Hành động</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Checkbox" Style="text-align:center;">
                @if (!context.IsDeleted)
                {
                    <MudCheckBox @bind-Checked="selectedUsers[lstUser.IndexOf(context)]" />
                }
                else
                {
                    <MudCheckBox Disabled="@true" Checked="@false" />
                }
            </MudTd>
            <MudTd DataLabel="Name" Style="text-align:center;">@context.FullName</MudTd>
            <MudTd DataLabel="PhoneNumber" Style="text-align:center;">@context.PhoneNumber</MudTd>
            <MudTd DataLabel="Address" Style="text-align:center;">@context.Address</MudTd>
            <MudTd DataLabel="Email" Style="text-align:center;">@context.Email</MudTd>
            @if (!context.IsDeleted)
            {
                <MudTd DataLabel="Email" Style="text-align:center;">
                    <MudChip Icon="@Icons.Material.Filled.VerifiedUser" Color="Color.Success" title="Hoạt động">Hoạt động</MudChip>
                </MudTd>
            }
            else
            {
                <MudTd DataLabel="Email" Style="text-align:center;">
                    <MudChip Icon="@Icons.Material.Filled.Close" Color="Color.Error" title="Ngưng hoạt động">Ngưng hoạt động</MudChip>
                </MudTd>
            }
            <MudTd Style="text-align:center;">
                @if (context.IsDeleted)
                {
                    <MudButton IconSize="Size.Large" IconColor="Color.Success" StartIcon="@Icons.Material.Filled.Done" Color="Color.Surface" title="Kích hoạt" OnClick="@(async()=>await activeAc(context.UserName))" Style="margin-right: 5px"></MudButton>
                }
                else
                {
                    <MudButton IconSize="Size.Large" StartIcon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="@(async()=>await deleteStaff(context.UserName))" title="Xoá" Style="margin-right: 5px"></MudButton>
                }
                <MudButton IconSize="Size.Large" StartIcon="@Icons.Material.Filled.Edit" IconColor="Color.Warning" OnClick="@(async()=>await OpenDialog(context.UserName))" title="Sửa" Style="margin-right: 5px"></MudButton>
                <MudButton IconSize="Size.Large" StartIcon="@Icons.Material.Filled.RemoveRedEye" IconColor="Color.Info" OnClick="@(async()=>await OpenDialogDetails(context.UserName))" title="Xem chi tiết" Style="margin-right: 5px"></MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}
else
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
<style>
    .my-custom-class {
        backdrop-filter: blur(10px);
    }
</style>
@code {
    //button trạng thái
    private bool _disableElevation = false;
    private string searchString = "";
    private UserInfView _userView = new UserInfView();
    private List<UserInfView> lstUser = new List<UserInfView>();
    [Inject]
    private IUserClientSev _client { get; set; }
    private UserUpdateView updateUserView = new UserUpdateView();

    private bool IsAnyUserSelected => selectedUsers.Any(selected => selected);
    private List<Shift> lstShift = new List<Shift>();
    private Shift shift = new Shift();

    //lưu trạng thái của từng nhân viên khi ấn checkbox
    private List<bool> selectedUsers = new List<bool>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    // load lai du lieu
    protected async Task LoadData()
    {
        var user = await _client.GetAll();
        lstUser = user.Data;
        selectedUsers = Enumerable.Repeat(false, lstUser.Count).ToList();
        var shift = await httpClient.GetFromJsonAsync<ResponseData<List<Shift>>>("api/UserLogin/Get-List-Shift");
        lstShift = shift.Data;
    }


    private bool FilterFunc(UserInfView element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Address.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.FullName.Contains(searchString, StringComparison.OrdinalIgnoreCase) || element.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase) || element.Position.Contains(searchString, StringComparison.OrdinalIgnoreCase) || element.PhoneNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    //hoi truoc khi xoa
    private async Task<bool?> Confirm()
    {
        var confirm = await _dialogservice.ShowMessageBox("Thông báo",
                    "Xác nhận xóa nhân viên?",
           yesText: "Xác nhận",
                    cancelText: "Hủy", noText: null, options: new DialogOptions { Position = DialogPosition.TopCenter, MaxWidth = MaxWidth.Small, FullWidth = true });
        StateHasChanged();
        return confirm;
    }

    //Thông báo hỏi khi xoá
    private async Task deleteStaff(string userName)
    {
        if (await Confirm() == true)
        {
            var response2 = await _client.GetByIdRemove(userName);
            if (response2.IsSuccess)
            {
                Message($"Đã xoá nhân viên {userName}", Severity.Success);
                await LoadData();
            }
            else
            {
                Message("Không tìm thấy nhân viên", Severity.Error);
            }
        }
    }

    private async Task activeAc(string username)
    {
        var repon = await _client.activeUser(username);
        if (repon.IsSuccess)
        {
            Message("Đã kích hoạt trạng thái", Severity.Success);
            await LoadData();
        }
        else
        {
            Message("Chưa kích hoạt", Severity.Success);
        }
    }

    //thêm sửa !
    private async Task OpenDialog(string username)
    {
        var parameters = new DialogParameters();
        string nameDialog = "Thêm mới nhân viên";
        if (username != null)
        {
            _userView = lstUser.FirstOrDefault(c => c.UserName == username);
            var updateView = new UserRegisterView()
                {
                    UserName = username,
                    FullName = _userView.FullName,
                    Address = _userView.Address,
                    PhoneNumber = _userView.PhoneNumber,
                    Email = _userView.Email,
                };
            parameters.Add("username", username);
            parameters.Add("user", updateView);
            nameDialog = "Cập nhật nhân viên";
        }
        DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Small,
                CloseButton = true,
                FullWidth = true
            };
        var createUpdateDialog = await _dialogservice.ShowAsync<CreateUpdate>(nameDialog, parameters, options);
        var result = await createUpdateDialog.Result;
        if (!result.Canceled)
        {
            createUpdateDialog.Close();
            await LoadData();
        }
    }
    //xem chi tiết
    private async Task OpenDialogDetails(string username)
    {
        var parameters = new DialogParameters();
        string nameDialog = "Chi tiết nhân viên";
        if (username != null)
        {
            _userView = lstUser.FirstOrDefault(c => c.UserName == username);
            var updateView = new UserRegisterView()
                {
                    UserName = username,
                    FullName = _userView.FullName,
                    Address = _userView.Address,
                    PhoneNumber = _userView.PhoneNumber,
                    Email = _userView.Email,
                };
            parameters.Add("username", username);
            parameters.Add("user", updateView);
        }
        DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Small,
                CloseButton = true,
                FullWidth = true
            };
        var createUpdateDialog = await _dialogservice.ShowAsync<CreateUpdate>(nameDialog, parameters, options);
        var result = await createUpdateDialog.Result;
        if (!result.Canceled)
        {
            createUpdateDialog.Close();
            await LoadData();
        }
    }
    //thêm nhân viên vào ca làm
    private async Task AddToShift()
    {
        var selectedUserIndexes = selectedUsers.Select((value, index) => (value, index)).Where(pair => pair.value).Select(pair => pair.index).ToList();
        var selectedUser1s = selectedUserIndexes.Select(index => lstUser[index]).ToList();
        // Xử lý logic để thêm selectedUsers vào một ca làm
        if (selectedUser1s.Count > 0 && selectedUser1s != null)
        {

        }

    }

    //messenge
    private void Message(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add(message, severity);
    }




}