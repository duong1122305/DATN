@page "/ListStaff"
@using System.Net.Http.Json
@using DATN.ADMIN.Components
@using DATN.ViewModels.Common
@using DATN.ViewModels.DTOs.Authenticate
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IDialogService _dialogservice;
<PageTitle>Danh sách nhân viên</PageTitle>

@if (lstUser != null)
{
    <MudTable Items="@lstUser" Hover="true" Filter="new Func<UserInfView,bool>(FilterFunc1)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Danh sách nhân viên</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Tìm kiếm, tên" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-0"></MudTextField>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@(async()=>await OpenDialog(null))">Thêm</MudButton>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="text-align:center;">ID</MudTh>
            <MudTh Style="text-align:center;"><MudTableSortLabel SortBy="new Func<UserInfView, object>(x=>x.FullName)">Tên nhân viên</MudTableSortLabel></MudTh>
            <MudTh Style="text-align:center;"><MudTableSortLabel SortBy="new Func<UserInfView, object>(x=>x.PhoneNumber)">Số điện thoại</MudTableSortLabel></MudTh>
            <MudTh Style="text-align:center;"><MudTableSortLabel SortBy="new Func<UserInfView, object>(x=>x.Address)">Địa chỉ</MudTableSortLabel></MudTh>
            <MudTh Style="text-align:center;"><MudTableSortLabel SortBy="new Func<UserInfView, object>(x=>x.Email)">Email</MudTableSortLabel></MudTh>
            <MudTh Style="text-align:center;">Trạng thái</MudTh>
            <MudTh Style="text-align:center;">Xác thực</MudTh>
            <MudTh Style="text-align:center;">Hành động</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="STT" Style="text-align:center;">
                @(lstUser.IndexOf(context) + 1)
            </MudTd>
            <MudTd DataLabel="Name" Style="text-align:center;">@context.FullName</MudTd>
            <MudTd DataLabel="PhoneNumber" Style="text-align:center;">@context.PhoneNumber</MudTd>
            <MudTd DataLabel="Address" Style="text-align:center;">@context.Address</MudTd>
            <MudTd DataLabel="Email" Style="text-align:center;">@context.Email</MudTd>
            @if (!context.IsDeleted)
        {
                <MudTd DataLabel="Email" Style="text-align:center;">Còn hoạt động</MudTd>
            }
            else
            {
                <MudTd DataLabel="Email" Style="text-align:center;">Không còn hoạt động</MudTd>
            }
            <MudTd DataLabel="Email" Style="text-align:center;">
                <MudChip Icon="@Icons.Material.Filled.VerifiedUser" Color="Color.Success">Đã xác thực</MudChip>
            </MudTd>
            <MudTd Style="text-align:center;">
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(async()=>await deleteStaff(context.UserName))">Xoá</MudButton>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Warning" OnClick="@(async()=>await OpenDialog(context.UserName))">Sửa</MudButton>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Details" Color="Color.Tertiary">Xem</MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}
else
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
<style>
    .my-custom-class {
        backdrop-filter: blur(10px);
    }
</style>
@code {
    //button trạng thái
    private bool _disableElevation = false;
    private string searchString1 = "";
    private UserInfView _userView = new UserInfView();
    private List<UserInfView> lstUser = new List<UserInfView>();


    // 
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    // load lai du lieu
    protected async Task LoadData()
    {
        var user = await httpClient.GetFromJsonAsync<ResponseData<List<UserInfView>>>("api/UserLogin/List-User");
        lstUser = user.Data;
    }

    private bool FilterFunc1(UserInfView element) => FilterFunc(element, searchString1);

    private bool FilterFunc(UserInfView element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Address.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.FullName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Email} {element.Position} {element.PhoneNumber}".Contains(searchString))
            return true;
        return false;
    }

    //tạo sự kiện để mở xem detail

    private async Task OpenDialog(string userName)
    {
        var options = new DialogOptions { ClassBackground = "my-custom-class", CloseButton = true };
        _dialogservice.Show<CreateUpdate>("Thêm nhân viên", options);
        await OnInitializedAsync();
    }


    //Thông báo hỏi khi xoá
    private async void OnButtonClicked(UserInfView user)
    {
        //     bool result = await _dialogservice.ShowMessageBox(
        //         "Thông báo",
        //         "Bạn có muốn xoá nhân viên?",
        //         yesText: "Xoá", cancelText: "Huỷ", noText: null, new DialogOptions{ ClassBackground = "my-custom-class", CloseButton = true});
        // StateHasChanged();
        //     if (result)
        //     {
        //         await DeleteServer(user.UserName);
        //     }

        var options = new MessageBoxOptions()
            {
                Title = "Xác nhận xoá",
                Message = $"Bạn có chắc muốn xoá nhân viên '{user.FullName}'?",
                YesText = "Xoá",
                CancelText = "Huỷ"
            };
        var updateCreate = await _dialogservice.ShowAsync<DialogComponent>(nameDialog, parameters, options);
        var result = await updateCreate.Result;
        if (!result.Canceled)
        {
            updateCreate.Close();
            await LoadData();
        }
    }


    //Thông báo hỏi khi xoá
    private async Task deleteStaff(string userName)
    {
        if (await Confirm()==true)
        {
            var response = await httpClient.GetFromJsonAsync<ResponseData<string>>($"api/UserLogin/remove?id={user.Data}");
            if (response.IsSuccess)
            {
                var respone = await httpClient.GetFromJsonAsync<ResponseData<string>>($"api/UserLogin/remove?id={result.Data}");
                if (respone.IsSuccess)
                {
                    Message($"Đã xoá nhân viên{userName}", Severity.Success);
                    await LoadData();
                }
                Message("Xoá thất bại", Severity.Error);
            }
        }else
        {
            Message("Xoá không thành công", Severity.Error);
        }
    }

    //hoi truoc khi xoa
    private async Task<bool?> Confirm()
    {
        var confirm = await _dialogservice.ShowMessageBox("Thông báo",
                    "Xác nhận xóa nhân viên?",
           yesText: "Xác nhận",
                    cancelText: "Hủy", noText: null, options: new DialogOptions { Position = DialogPosition.TopCenter, MaxWidth = MaxWidth.Small, FullWidth = true });
            StateHasChanged();
            return confirm;
   }

   //messenge
    private void Message(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add(message, severity);
    }




}