@page "/ListCategoryProduct"
@using System.Net.Http.Json
@using DATN.ADMIN.Components
@using DATN.ADMIN.IServices
@using DATN.Data.Entities
@using DATN.ViewModels.Common
@using DATN.ViewModels.DTOs.Authenticate
@using DATN.ViewModels.DTOs.Category
@using DATN.ViewModels.DTOs.CategoryProduct
@inject HttpClient httpClient
@inject IAddressService _addressServive;
@inject ISnackbar Snackbar
@inject IDialogService _dialogservice;

<PageTitle>Danh sách danh mục gồm sản phẩm</PageTitle>
<MudText Typo="Typo.h6">Danh sách danh mục gồm sản phẩm</MudText>

<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@(async()=>await OpenDialog(null))" Style="margin-bottom: 10px" title="Thêm">Thêm</MudButton>


<MudSelect T="UserStatus" Label="Trạng thái" Variant="Variant.Outlined" @bind-Value="selectedStatus" style="width: 200px; margin-bottom: 10px;" @onchange="HandleStatusChange">
    <MudSelectItem Value="UserStatus.All">Tất cả</MudSelectItem>
    <MudSelectItem Value="UserStatus.Active">Đang hoạt động</MudSelectItem>
    <MudSelectItem Value="UserStatus.Inactive">Ngừng hoạt động</MudSelectItem>
</MudSelect>


@if (lstCateProducts.Count > 0 && lstCateProducts != null)
{
    <MudDataGrid Items="@lstCateProducts" Groupable="false" QuickFilter="@_quickFilter" Hover="true" Filterable="true">
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" MaxLength="50"></MudTextField>
        </ToolBarContent>
        <Columns>
            <TemplateColumn Title="STT" Sortable="false" Filterable="false">
                <CellTemplate>
                    <span>@(lstCateProducts.IndexOf(context.Item) + 1)</span>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.Name" Title="Tên danh mục" Sortable="false" Filterable="false" />
            <PropertyColumn Property="x => x.Category" Title="Mô tả" Sortable="false" Filterable="false" />
                <TemplateColumn Title="Trạng thái">
                <CellTemplate>
                    @if (context.Item.IsDeleted == true)
                    {
                        <MudChip Color="Color.Error" title="Hoạt động">Ngưng hoạt động</MudChip>
                        
                    }
                    else
                    {
                        <MudChip Color="Color.Success" title="Hoạt động">Hoạt động</MudChip>

                    }
                </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="Hành động">
                <CellTemplate>
                    <MudButtonGroup Variant="Variant.Filled">
                        @if (context.Item.IsDeleted == true)
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Done" Color="Color.Surface" title="Kích hoạt" OnClick="@(async()=>await ActiveStatus(context.Item.Id))"></MudIconButton>
                        }
                        else
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(async()=>await DeleteStatus(context.Item.Id))" title="Xoá"></MudIconButton>
                        }
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" OnClick="@(async()=>await OpenDialog(context.Item.Id))" title="Sửa"></MudIconButton>
                    </MudButtonGroup>
                </CellTemplate>
                </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="CategoryProductView" />
        </PagerContent>
    </MudDataGrid>

}
else
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
<style>
    .my-custom-class {
        backdrop-filter: blur(10px);
    }
</style>
@code {

    //button trạng thái
    private bool _disableElevation = false;
    private string searchString = "";
    private List<CategoryProductView> lstCateProducts = new List<CategoryProductView>();

    [Inject]
    private IProductsServices _client {get;set;}
    private enum UserStatus
    {
        All = -1, // lấy tất cả isdeleted
        Active = 0, // (IsDeleted = false)
        Inactive = 1 //(IsDeleted = true)
    }

    private UserStatus selectedStatus = UserStatus.All;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();

    }

    // load lai du lieu
    protected async Task LoadData()
    {
        var respone = await _client.ListCategoryProduct();
        if (respone.IsSuccess)
        {
            lstCateProducts = respone.Data.OrderByDescending(x => x.Id).ToList();
        }else
        {
            lstCateProducts = new List<CategoryProductView>();
        }
    }

    private async Task HandleStatusChange(ChangeEventArgs e)
    {
        selectedStatus = (UserStatus)e.Value;
        await LoadData();
    }

    private Func<CategoryProductView, bool> _quickFilter => x =>
     {
             if (string.IsNullOrWhiteSpace(searchString))
                 return true;

             if (x.Name.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
                 return true;

             if (x.Category.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
                 return true;
         return false;
     };

    //hoi truoc khi xoa
    private async Task<bool?> Confirm()
    {
        var confirm = await _dialogservice.ShowMessageBox("Thông báo",
                    "Xác nhận xoá danh mục này?",
           yesText: "Xác nhận",
                    cancelText: "Hủy", noText: null, options: new DialogOptions { Position = DialogPosition.TopCenter, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true });
        StateHasChanged();
        return confirm;
    }

    //Thông báo hỏi khi xoá
    private async Task DeleteStatus(int? id)
    {
        if (await Confirm() == true)
        {
            var response2 = await _client.RemoveCategoryProduct(Convert.ToInt32(id));
            if (response2.IsSuccess)
            {
                Message(response2.Data, Severity.Success);
                await LoadData();
            }
            else
            {
                Message(response2.Error, Severity.Error);
            }
        }
    }

    private async Task ActiveStatus(int? id)
    {
        var repon = await _client.ActiveCategoryProduct(Convert.ToInt32(id));
        if (repon.IsSuccess)
        {
            Message(repon.Data, Severity.Success);
            await LoadData();
        }
        else
        {
            Message(repon.Error, Severity.Success);
        }
    }

    //thêm sửa !
    private async Task OpenDialog(int? id)
    {
        // if (isEditing)
        // {
        //     return; // Exit if already editing
        // }

        // isEditing = true; // Set flag to true to indicate editing in progress
        // var parameters = new DialogParameters();
        // string nameDialog = "Thêm mới nhân viên";
        // if (username != null)
        // {
        //     _userView = lstUser.FirstOrDefault(c => c.UserName == username);
        //     var updateView = new UserRegisterView()
        //         {
        //             FullName = _userView.FullName,
        //             Address = _userView.Address,
        //             PhoneNumber = _userView.PhoneNumber,
        //             Email = _userView.Email,
        //             Gender = _userView.Gender == "Nam" ? true : false
        //         };
        //     parameters.Add("username", username);
        //     parameters.Add("user", updateView);
        //     nameDialog = "Cập nhật nhân viên";
        // }
        // DialogOptions options = new DialogOptions()
        //     {
        //         CloseOnEscapeKey = true,
        //         Position = DialogPosition.Center,
        //         MaxWidth = MaxWidth.Small,
        //         CloseButton = true,
        //         FullWidth = true,
        //         DisableBackdropClick = true
        //     };
        // var createUpdateDialog = await _dialogservice.ShowAsync<CreateUpdate>(nameDialog, parameters, options);
        // var result = await createUpdateDialog.Result;
        // isEditing = false;
        // if (!result.Canceled)
        // {
        //     createUpdateDialog.Close();
        //     await LoadData();
        //     StateHasChanged();
        // }
    }

    // private void HandleShiftChange(ChangeEventArgs e)
    // {
    //     // Cập nhật giá trị của biến shiftId khi có sự thay đổi trong dropdown
    //     selectedShiftId = Convert.ToInt32(e.Value);
    // }
   

   
    //hỏi trước khi thêm
    private async Task<bool?> Confirm2()
    {
        var confirm = await _dialogservice.ShowMessageBox("Thông báo",
                    "Xác nhận thêm ca cho nhân viên?",
           yesText: "Xác nhận",
                    cancelText: "Hủy", noText: null, options: new DialogOptions { Position = DialogPosition.Center, MaxWidth = MaxWidth.Small, FullWidth = true });
        StateHasChanged();
        return confirm;
    }
  

    //messenge
    private void Message(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add(message, severity);
    }
}