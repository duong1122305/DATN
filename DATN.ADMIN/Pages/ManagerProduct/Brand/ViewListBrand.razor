@* @page "/ListBrand"
@using System.Net.Http.Json
@using DATN.ADMIN.Components
@using DATN.ADMIN.IServices
@using DATN.Data.Entities
@using DATN.ViewModels.Common
@using DATN.ViewModels.DTOs.Authenticate
@inject HttpClient httpClient
@inject IAddressService _addressServive;
@inject ISnackbar Snackbar
@inject IDialogService _dialogservice;

<PageTitle>Danh sách nhân viên</PageTitle>
<MudText Typo="Typo.h3">Danh sách nhãn hàng</MudText>


<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@(async()=>await OpenDialog(null))" Style="margin-bottom: 10px" title="Thêm">Thêm</MudButton>
<MudSelect T="UserStatus" Label="Trạng thái" Variant="Variant.Outlined" @bind-Value="selectedStatus" style="width: 200px; margin-bottom: 10px;" @onchange="HandleStatusChange">
    <MudSelectItem Value="UserStatus.All">Tất cả</MudSelectItem>
    <MudSelectItem Value="UserStatus.Active">Đang hoạt động</MudSelectItem>
    <MudSelectItem Value="UserStatus.Inactive">Ngừng hoạt động</MudSelectItem>
</MudSelect>


@if (lstUser.Count > 0 && lstUser != null)
{
    <MudDataGrid Items="@lstUser" Groupable="false" QuickFilter="@_quickFilter" Hover="true" Filterable="true">
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" MaxLength="50"></MudTextField>
        </ToolBarContent>
        <Columns>
            <TemplateColumn Title="Chọn" Sortable="false" Filterable="false">
                <CellTemplate>
                    @if (!context.Item.IsDeleted)
                    {
                        <MudCheckBox @bind-Checked="selectedUsers[lstUser.IndexOf(context.Item)]" />
                    }
                    else
                    {
                        <MudCheckBox Disabled="@true" Checked="@false" />
                    }
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="STT" Sortable="false" Filterable="false">
                <CellTemplate>
                    <span>@(lstUser.IndexOf(context.Item) + 1)</span>
                </CellTemplate>
            </TemplateColumn>

            <PropertyColumn Property="x => x.FullName" Title="Tên nhân viên" Sortable="false" Filterable="false" />
            <PropertyColumn Property="x => x.UserName" Title="Mã nhân viên" Sortable="false" Filterable="false" />
            <PropertyColumn Property="x => x.PhoneNumber" Title="SĐT" Sortable="false" Filterable="false" />
            <TemplateColumn Title="Giới tính" Sortable="false" Filterable="false">
                <CellTemplate>
                    @if (context.Item.Gender == "Nam")
                    {
                        <span>Nam</span>
                    }
                    else
                    {
                        <span>Nữ</span>
                    }
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.Email" Title="Email" Sortable="false" Filterable="false" />
            <TemplateColumn Title="Địa chỉ" SortBy="@(x => $"{x.Address}")" Style="width:400px;" Sortable="false" Filterable="false">
                <CellTemplate>
                    @(_addressServive.GetAddress(context.Item.Address))
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x=>x.IsDeleted" Title="Trạng thái" SortBy="@(x => $"{x.IsDeleted}")" Sortable="false" Filterable="false">
                <CellTemplate>
                    @if (!context.Item.IsDeleted)
                    {
                            <MudChip Color="Color.Success" title="Hoạt động">Hoạt động</MudChip>
                    }
                    else
                    {
                            <MudChip Color="Color.Error" title="Hoạt động">Ngưng hoạt động</MudChip>
                    }
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x=>x.UserName" Title="Hành động" Filterable="false" Sortable="false">
                <CellTemplate>
                    <MudButtonGroup Variant="Variant.Filled">
                        @if (context.Item.IsDeleted)
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Done" Color="Color.Surface" title="Kích hoạt" OnClick="@(async()=>await activeAc(context.Item.UserName))"></MudIconButton>
                        }
                        else
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(async()=>await deleteStaff(context.Item.UserName))" title="Xoá"></MudIconButton>
                        }
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" OnClick="@(async()=>await OpenDialog(context.Item.UserName))" title="Sửa"></MudIconButton>
                    </MudButtonGroup>
                </CellTemplate>
            </PropertyColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="UserInfView" />
        </PagerContent>
    </MudDataGrid>

}
else
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
<style>
    .my-custom-class {
        backdrop-filter: blur(10px);
    }
</style>
@code {

    //button trạng thái
    private bool _disableElevation = false;
    private string searchString = "";
    private List<CategoryView> lstUser = new List<UserInfView>();
    private bool isEditing = false;
    [Inject]
    private IUserClientSev _client { get; set; }
    [Inject]
    IEmployeeScheduleSer _client2 { get; set; }
    private UserUpdateView updateUserView = new UserUpdateView();

    private bool IsAnyUserSelected => selectedUsers.Any(selected => selected);
    private List<Shift> lstShift = new List<Shift>();
    private Shift shift { get; set; }

    //lưu trạng thái của từng nhân viên khi ấn checkbox
    private List<bool> selectedUsers = new List<bool>();
    private int selectedShiftId;
    private enum UserStatus
    {
        All = -1, // lấy tất cả isdeleted
        Active = 0, // (IsDeleted = false)
        Inactive = 1 //(IsDeleted = true)
    }

    private UserStatus selectedStatus = UserStatus.All;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();

    }

    // load lai du lieu
    protected async Task LoadData()
    {
        var user = await _client.GetAll();
        lstUser = user.Data;
        selectedUsers = Enumerable.Repeat(false, lstUser.Count).ToList();
        var shift = await httpClient.GetFromJsonAsync<ResponseData<List<Shift>>>("api/UserLogin/Get-List-Shift");
        lstShift = shift.Data;
        StateHasChanged();
    }

    private async Task HandleStatusChange(ChangeEventArgs e)
    {
        selectedStatus = (UserStatus)e.Value;
        await LoadData();
    }

    private Func<UserInfView, bool> _quickFilter => x =>
     {
             if (string.IsNullOrWhiteSpace(searchString))
                 return true;

             if (x.FullName.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
                 return true;

             if (x.PhoneNumber.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
                 return true;

             if ($"{x.Address} {x.Position} {x.Email}".Contains(searchString.Trim()))
                 return true;
         return false;
     };

    //hoi truoc khi xoa
    private async Task<bool?> Confirm()
    {
        var confirm = await _dialogservice.ShowMessageBox("Thông báo",
                    "Xác nhận xóa nhãn hàng?",
           yesText: "Xác nhận",
                    cancelText: "Hủy", noText: null, options: new DialogOptions { Position = DialogPosition.TopCenter, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true });
        StateHasChanged();
        return confirm;
    }

    //Thông báo hỏi khi xoá
    private async Task deleteStaff(string userName)
    {
        if (await Confirm() == true)
        {
            var response2 = await _client.GetByIdRemove(userName);
            if (response2.IsSuccess)
            {
                Message($"Đã xoá nhãn hàng {userName}", Severity.Success);
                await LoadData();
            }
            else
            {
                Message("Không tìm thấy nhãn hàng", Severity.Error);
            }
        }
    }

    private async Task activeAc(string username)
    {
        var repon = await _client.activeUser(username);
        if (repon.IsSuccess)
        {
            Message("Đã kích hoạt trạng thái", Severity.Success);
            await LoadData();
        }
        else
        {
            Message("Chưa kích hoạt", Severity.Success);
        }
    }

    //thêm sửa !
    private async Task OpenDialog(string username)
    {
        if (isEditing)
        {
            return; // Exit if already editing
        }

        isEditing = true; // Set flag to true to indicate editing in progress
        var parameters = new DialogParameters();
        string nameDialog = "Thêm mới nhãn hàng";
        if (username != null)
        {
            _userView = lstUser.FirstOrDefault(c => c.UserName == username);
            var updateView = new UserRegisterView()
                {
                    FullName = _userView.FullName,
                    Address = _userView.Address,
                    PhoneNumber = _userView.PhoneNumber,
                    Email = _userView.Email,
                    Gender = _userView.Gender == "Nam" ? true : false
                };
            parameters.Add("username", username);
            parameters.Add("user", updateView);
            nameDialog = "Cập nhật nhãn hàng";
        }
        DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Small,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true
            };
        var createUpdateDialog = await _dialogservice.ShowAsync<CreateUpdate>(nameDialog, parameters, options);
        var result = await createUpdateDialog.Result;
        isEditing = false;
        if (!result.Canceled)
        {
            createUpdateDialog.Close();
            await LoadData();
            StateHasChanged();
        }
    }

    private void HandleShiftChange(ChangeEventArgs e)
    {
        // Cập nhật giá trị của biến shiftId khi có sự thay đổi trong dropdown
        selectedShiftId = Convert.ToInt32(e.Value);
    }
    //thêm nhân viên vào ca làm tháng tiếp theo
   
    //hỏi trước khi thêm
    private async Task<bool?> Confirm2()
    {
        var confirm = await _dialogservice.ShowMessageBox("Thông báo",
                    "Xác nhận thêm nhãn hàng?",
           yesText: "Xác nhận",
                    cancelText: "Hủy", noText: null, options: new DialogOptions { Position = DialogPosition.Center, MaxWidth = MaxWidth.Small, FullWidth = true });
        StateHasChanged();
        return confirm;
    }
  

    //messenge
    private void Message(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add(message, severity);
    }
} *@