@page "/ListBrand"
@using System.Net.Http.Json
@using DATN.ADMIN.Components
@using DATN.ADMIN.IServices
@using DATN.Data.Entities
@using DATN.ViewModels.Common
@using DATN.ViewModels.DTOs.Authenticate
@using DATN.ViewModels.DTOs.Brand
@inject HttpClient httpClient
@inject IAddressService _addressServive;
@inject ISnackbar Snackbar
@inject IDialogService _dialogservice;

<PageTitle>Danh sách thương hiệu</PageTitle>
<MudText Typo="Typo.h3" Style="text-align:center">Danh sách thương hiệu</MudText>





@if (lstBrand.Count > 0 && lstBrand != null)
{
    <MudDataGrid Items="@lstBrand" Groupable="false" QuickFilter="@_quickFilter" Hover="true" Filterable="true">
        <ToolBarContent>
            <div style="width:200px">
                <MudSelect T="UserStatus" Label="Trạng thái" Variant="Variant.Outlined" @bind-Value="selectedStatus" style="width: 200px; margin-bottom: 10px;" @onchange="HandleStatusChange">
                    <MudSelectItem Value="UserStatus.All">Tất cả</MudSelectItem>
                    <MudSelectItem Value="UserStatus.Active">Đang hoạt động</MudSelectItem>
                    <MudSelectItem Value="UserStatus.Inactive">Ngừng hoạt động</MudSelectItem>
                </MudSelect>
            </div>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" MaxLength="50"></MudTextField>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@(async()=>await OpenDialog(null))" Style="margin-bottom: 10px" title="Thêm">Thêm</MudButton>

        </ToolBarContent>
        <Columns>
            <TemplateColumn Title="STT" Sortable="false" Filterable="false">
                <CellTemplate>
                    <span>@(lstBrand.IndexOf(context.Item) + 1)</span>
                </CellTemplate>
            </TemplateColumn>

            <PropertyColumn Property="x => x.Name" Title="Tên thương hiệu" Sortable="false" Filterable="false" />
            <PropertyColumn Property="x => x.Description" Title="Mô tả" Sortable="false" Filterable="false" />
            <TemplateColumn Title="Trạng thái" Sortable="false" Filterable="false">
                <CellTemplate>
                    @if (context.Item.Status != true)
                    {
                        <MudChip Color="Color.Error" title="Hoạt động">Ngưng hoạt động</MudChip>
                    }
                    else
                    {
                        <MudChip Color="Color.Success" title="Hoạt động">Hoạt động</MudChip>

                    }
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x=>x.Id" Title="Hành động" Filterable="false" Sortable="false">
                <CellTemplate>
                    <MudButtonGroup Variant="Variant.Filled">
                        @if (context.Item.Status !=true)
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Done" Color="Color.Surface" title="Kích hoạt" OnClick="@(async()=>await ActiveBrand(context.Item.Id.Value))"></MudIconButton>
                        }
                        else
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(async()=>await DeleteBrand(context.Item.Id.Value))" title="Xoá"></MudIconButton>


                        }
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" OnClick="@(async()=>await OpenDialog(context.Item.Id.Value))" title="Sửa"></MudIconButton>
                    </MudButtonGroup>
                </CellTemplate>
            </PropertyColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="BrandView" />
        </PagerContent>
    </MudDataGrid>

}
else
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
<style>
    .my-custom-class {
        backdrop-filter: blur(10px);
    }
</style>
@code {


    private string searchString = "";
    private List<BrandView> lstBrand = new List<BrandView>();
    [Inject]
    private IBrandServices _client { get; set; }



    private enum UserStatus
    {
        All = -1, // lấy tất cả isdeleted
        Active = 0, // (IsDeleted = false)
        Inactive = 1 //(IsDeleted = true)
    }

    private UserStatus selectedStatus = UserStatus.All;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();

    }

    // load lai du lieu
    protected async Task LoadData()
    {
        var brand = await _client.ListBrand();
        if (brand.IsSuccess)
        {
            lstBrand = brand.Data.OrderByDescending(x => x.Id).ToList();
        }
        else
        {
            lstBrand = new List<BrandView>();
        }
        StateHasChanged();
    }

    private async Task HandleStatusChange(ChangeEventArgs e)
    {
        selectedStatus = (UserStatus)e.Value;
        await LoadData();
    }

    private Func<BrandView, bool> _quickFilter => x =>
     {
         if (string.IsNullOrWhiteSpace(searchString))
             return true;

         if (x.Name.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
             return true;

         if (x.Description.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
             return true;
         return false;
     };

    //hoi truoc khi xoa
    private async Task<bool?> Confirm()
    {
        var confirm = await _dialogservice.ShowMessageBox("Thông báo",
                    "Xác nhận xóa thương hiệu?",
           yesText: "Xác nhận",
                    cancelText: "Hủy", noText: null, options: new DialogOptions { Position = DialogPosition.TopCenter, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true });
        StateHasChanged();
        return confirm;
    }

    //Thông báo hỏi khi xoá
    private async Task DeleteBrand(int id)
    {
        if (await Confirm() == true)
        {
            var response2 = await _client.RemoveBrand(id);
            if (response2.IsSuccess)
            {
                Message(response2.Data, Severity.Success);
                await LoadData();
            }
            else
            {
                Message(response2.Error, Severity.Error);
            }
        }
    }

    private async Task ActiveBrand(int id)
    {
        var repon = await _client.Active(id);
        if (repon.IsSuccess)
        {
            Message(repon.Data, Severity.Success);
            await LoadData();
        }
        else
        {
            Message(repon.Error, Severity.Success);
        }
    }

    //thêm sửa !
    private async Task OpenDialog(int? id)
    {
        var parameters = new DialogParameters();
        string nameDialog = "Thêm mới thương hiệu sản phẩm";
        parameters.Add("id", id);
        if (id != null)
        {
            var brand = lstBrand.FirstOrDefault(x => x.Id == id);
            parameters.Add("brand", brand);
            nameDialog = "Cập nhật thương hiệu sản phẩm";
        }
        DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Small,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true
            };
        var createUpdateDialog = await _dialogservice.ShowAsync<CreateUpdateBrand>(nameDialog, parameters, options);
        var result = await createUpdateDialog.Result;
        if (!result.Canceled)
        {
            createUpdateDialog.Close();
            await LoadData();
            StateHasChanged();
        }
    }
    //hỏi trước khi thêm
    private async Task<bool?> Confirm2()
    {
        var confirm = await _dialogservice.ShowMessageBox("Thông báo",
                    "Xác nhận thêm thương hiệu sản phẩm?",
           yesText: "Xác nhận",
                    cancelText: "Hủy", noText: null, options: new DialogOptions { Position = DialogPosition.Center, MaxWidth = MaxWidth.Small, FullWidth = true });
        StateHasChanged();
        return confirm;
    }


    //messenge
    private void Message(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add(message, severity);
    }
}