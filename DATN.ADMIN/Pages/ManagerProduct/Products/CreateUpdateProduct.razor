@page "/CreateUpdateProdcut"

@using DATN.ADMIN.IServices
@using DATN.Data.Entities
@using DATN.ViewModels.DTOs.Brand
@using DATN.ViewModels.DTOs.Category
@using DATN.ViewModels.DTOs.Product
@using DATN.ViewModels.DTOs.ServiceManager
@using MudBlazor
@inject ISnackbar Snackbar
@inject IDialogService _diagService
<EditForm Model="@_product" OnValidSubmit="@(async () => await Submit())">
    <MudItem xs="12" sm="12">
        <MudCard>
            <MudCardContent>

                @if (id == 0 || id == null)
                {
                    <div class="mud-select">
                        <label class="mud-input-label">Chọn danh mục</label>
                        <select @bind="_product.IdCategoryProduct" required>
                            @foreach (var i in lstCate)
                            {
                                <option value="@i.Id">@i.Name</option>
                            }
                        </select>
                    </div>
                    <div class="mud-select">
                        <label class="mud-input-label">Chọn thương hiệu</label>
                        <select @bind="_product.IdBrand" required>
                            @foreach (var i in lstBrand)
                            {
                                <option value="@i.Id">@i.Name</option>
                            }
                        </select>
                    </div>
                    <MudTextField T="string" Label="Tên" @bind-Value="@_product.Name" For="@(() => _product.Name)" />
                    <MudTextField T="string" Label="Mô Tả" @bind-Value="@_product.Description" For="@(() => _product.Description)" />
                }
                else
                {
                    <MudTextField T="string" Label="Tên danh mục" @bind-Value="@product.Name" For="@(() => product.Name)" />
                    <MudTextField T="string" Label="Mô tả" @bind-Value="@product.Description" For="@(() => product.Description)" />
                    <div class="mud-select">
                            <label class="mud-input-label">Chọn danh mục</label>
                        <select @bind="product.CategoryProduct" required>
                            @foreach (var i in lstBrand)
                            {
                                <option value="@i.Id">@i.Name</option>
                            }
                        </select>
                    </div>
                    <div class="mud-select">
                        <label class="mud-input-label">Chọn thương hiệu</label>
                        <select @bind="product.Brand" required>
                            @foreach (var i in lstCate)
                            {
                                <option value="@i.Id">@i.Name</option>
                            }
                        </select>
                    </div>
                }
                <hr class="hr" />
                <div class="mt-5" style="text-align: end;">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                        @_nameButton
                    </MudButton>
                </div>
            </MudCardContent>
        </MudCard>
    </MudItem>
</EditForm>

@code {
    [Parameter]
    public int id { get; set; }
    [CascadingParameter] MudDialogInstance _dialogBox { get; set; }

    [Parameter]
    public CreateProductView _product { get; set; } = new CreateProductView();

    [Parameter]
    public ProductView product { get; set; } = new ProductView();
    string _nameButton = "";
    [Inject]
    private IProductServices _client { get; set; }
    [Inject]
    private IBrandServices _brandClient{ get; set; }
    private List<BrandView> lstBrand = new List<BrandView>();

    [Inject]
    private ICategoryServices _cateClient{ get; set; }
    private List<CategoryView> lstCate = new List<CategoryView>();



    protected async override Task OnInitializedAsync()
    {
        var brand = await _brandClient.ListBrand();
        var cate = await _cateClient.ListCategory();
        if (brand.IsSuccess && cate.IsSuccess)
        {
            lstBrand = brand.Data;
            lstCate = cate.Data;
            if (id != null && id != 0)
            {
                _nameButton = "Cập nhật";
            }
            else
            {
                _nameButton = "Thêm mới";
            }
        }
        
    }
    public async Task Create()
    {
        if (await Confirm("thêm mới") == true)

        {
            var result = await _client.CreateProduct(_product);
            if (result.IsSuccess)
            {

                Message(result.Data, Severity.Success);
                _dialogBox.Close(DialogResult.Ok(true));
            }
            else
                Message(result.Error, Severity.Error);
        }
        else
        {
            return;
        }
    }


    public async Task Update()
    {
        var confirm = await Confirm("cập nhật");
        if (!confirm)
        {
            return;
        }

        if (product != null)
        {
            

            var result = await _client.UpdateProduct(_product);
            if (result.IsSuccess)
            {
                Message(result.Data, Severity.Success);

                _dialogBox.Close(DialogResult.Ok(true));
            }
            else
            {
                Message(result.Error, Severity.Error);
            }
        }
        else
        {
            Message("Có lỗi trong quá trình cập nhật", Severity.Error);
        }

    }

    public async Task Submit()
    {
        if (id == null || id == 0)
        {
            await Create();
        }
        else
        {
            await Update();
        }
    }

    private async Task<bool>
    Confirm(string text)
    {
        var confirm = await _diagService.ShowMessageBox("Thông báo", $"Xác nhận {text} sản phẩm?",
        yesText: "Xác nhận",
        cancelText: "Hủy", noText: null,
        options: new DialogOptions { Position = DialogPosition.Center, MaxWidth = MaxWidth.Small, FullWidth = true });
        StateHasChanged();
        if (!confirm.HasValue) return false;
        return confirm.Value;

    }

    //thông báo
    private void Message(string message, Severity severity)
    {
        Snackbar.Clear();
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
        Snackbar.Add(message, severity);
    }
}
<style>
    .mud-select {
        display: inline-block;
        position: relative;
        margin-bottom: 1rem;
        width: 100%;
    }

    .mud-input-label {
        display: block;
        margin-bottom: 0.5rem;
        color: #495057; /* màu chữ */
    }

    .mud-select select {
        display: block;
        width: 100%;
        padding: 0.75rem 1.25rem;
        font-size: 1rem;
        line-height: 1.5;
        color: #495057;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

        /* hiệu ứng khi hover */
        .mud-select select:hover {
            border-color: #b3b3b3;
        }

        .mud-select select:focus {
            border-color: #80bdff;
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }
</style>