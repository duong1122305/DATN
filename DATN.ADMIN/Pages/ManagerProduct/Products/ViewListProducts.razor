<AuthorizeView Roles="Admin">
    <Authorized>
        @page "/ListProduct"
        @using System.Net.Http.Json
        @using DATN.ADMIN.Components
        @using DATN.ADMIN.IServices
        @using DATN.Data.Entities
        @using DATN.ViewModels.Common
        @using DATN.ViewModels.DTOs.Authenticate
        @using DATN.ViewModels.DTOs.Category
        @using DATN.ViewModels.DTOs.Product
        @inject HttpClient httpClient
        @inject IAddressService _addressServive;
        @inject ISnackbar Snackbar
        @inject IDialogService _dialogservice;

        <PageTitle>Danh sách sản phẩm</PageTitle>
        <MudText Typo="Typo.h3" Style="text-align:center;margin-bottom:10px">Danh sách sản phẩm</MudText>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@(async()=>await OpenDialog(null))" Style="margin-bottom: 10px" title="Thêm">Thêm</MudButton>
        @if (lstProduct != null)
        {
            <MudDataGrid Items="@lstProduct" Groupable="false" QuickFilter="@_quickFilter" Hover="true" Filterable="true">

                <ToolBarContent>
                    <div style="width:200px">
                        <MudSelect T="ProductStatus" Label="Trạng thái" Variant="Variant.Outlined" style="width: 200px; margin-bottom: 10px;" ValueChanged="HandleStatusChange">
                            <MudSelectItem Value="ProductStatus.All">Tất cả</MudSelectItem>
                            <MudSelectItem Value="ProductStatus.Active">Đang hoạt động</MudSelectItem>
                            <MudSelectItem Value="ProductStatus.Inactive">Ngừng hoạt động</MudSelectItem>
                        </MudSelect>
                    </div>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0" MaxLength="50"></MudTextField>
                    <MudSpacer />
                </ToolBarContent>
                <Columns>
                    <TemplateColumn Title="STT" Sortable="false" Filterable="false">
                        <CellTemplate Context="data">
                            <span>@(lstProduct.IndexOf(data.Item) + 1)</span>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Ảnh" Sortable="false" Filterable="false">
                        <CellTemplate Context="data">
                            <MudImage Src="@data.Item.Url" Alt="Ảnh sản phẩm" Height="100" Width="100" Elevation="25" Class="rounded-lg" Style="border-radius: 50%;" />
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.Name" Title="Tên sản phẩm" Sortable="false" Filterable="false" />
                    <PropertyColumn Property="x => x.CategoryProduct" Title="Tên danh mục" Sortable="false" Filterable="false" />
                    @* 		<PropertyColumn Property="x => x.Description" Title="Mô tả" style="width:400px" Sortable="false" Filterable="false" /> *@

                    <TemplateColumn Title="Mô tả" Sortable="false" Filterable="false">
                        <CellTemplate Context="data">
                            @{
                                var des = data.Item.Description;
                                if (des!.Length > 100)
                                {
                                    des = data.Item.Description!.Substring(0, 100) + "...";
                                }
                            }
                            <span title="@data.Item.Description" class="rounded-lg">@des</span>
                        </CellTemplate>
                    </TemplateColumn>

                    <PropertyColumn Property="x => x.Brand" Title="Thương hiệu" Sortable="false" Filterable="false" />
                    <PropertyColumn Property="x => x.Price" Title="Giá bán (VNĐ)" Sortable="false" Filterable="false" />
                    <TemplateColumn Title="Trạng thái" Sortable="false" Filterable="false">
                        <CellTemplate Context="data">
                            @if (!data.Item.Status)
                            {
                                <MudChip Color="Color.Error" title="Ngưng hoạt động">Ngưng hoạt động</MudChip>
                            }
                            else
                            {
                                <MudChip Color="Color.Success" title="Hoạt động">Hoạt động</MudChip>

                            }
                        </CellTemplate>
                    </TemplateColumn>

                    <TemplateColumn Title="Hành động" Sortable="false" Filterable="false">
                        <CellTemplate Context="data">
                            <MudButtonGroup Variant="Variant.Filled">
                                @if (!data.Item.Status)
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.Done" Color="Color.Surface" title="Kích hoạt" OnClick="@(async()=>await ActiveProduct(data.Item.Id.Value))"></MudIconButton>
                                }
                                else
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(async()=>await DeleteProduct(data.Item.Id.Value))" title="Xoá"></MudIconButton>

                                }
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" OnClick="@(async()=>await OpenDialog(data.Item.Id))" title="Sửa"></MudIconButton>
                                <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Default" OnClick="@(async()=>await OpenDetails(data.Item.Id))" title="Xem chi tiết"></MudIconButton>
                            </MudButtonGroup>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="ProductView" />
                </PagerContent>
            </MudDataGrid>

        }
        else
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        }
        <style>
            .my-custom-class {
                backdrop-filter: blur(10px);
            }
        </style>
        @code {
        private string searchString = "";
        private ProductView product = new ProductView();
        private List<ProductView> lstProduct = new List<ProductView>();
        [Inject]
        private IProductServices _client { get; set; }


        private enum ProductStatus
        {
            All = 0, // lấy tất cả isdeleted
            Active = -1, // (IsDeleted = false)
            Inactive = 1 //(IsDeleted = true)
        }

        private ProductStatus selectedStatus = ProductStatus.All;


        protected override async Task OnInitializedAsync()
        {
            await LoadData();

        }

        // load lai du lieu
        protected async Task LoadData()
        {
            var respone = await _client.ListProduct();
            if (respone.IsSuccess)
            {
                lstProduct = respone.Data.ToList();
                if (selectedStatus == ProductStatus.All)
                {
                    lstProduct = respone.Data.ToList();
                }
                else if (selectedStatus == ProductStatus.Active)
                {
                    lstProduct = respone.Data.Where(x => x.Status == true).ToList();
                }
                else if (selectedStatus == ProductStatus.Inactive)
                {
                    lstProduct = respone.Data.Where(x => x.Status != true).ToList();


                }
                if (lstProduct.Count == 0)
                {
                    Message("Danh sách lọc bị trống", Severity.Warning);
                }
            }
            else
            {
                lstProduct = new List<ProductView>();
            }
        }

        private async Task HandleStatusChange(ProductStatus e)
        {
            selectedStatus = e;
            await LoadData();
        }

        private Func<ProductView, bool> _quickFilter => x =>
        {
            if (selectedStatus == ProductStatus.All && x.Status == true || selectedStatus == ProductStatus.All && x.Status == false)
            {
                if (string.IsNullOrWhiteSpace(searchString))
                    return true;
                if (x.Name.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
                    return true;
                if (x.Brand.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
                    return true;
                if (x.CategoryProduct.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
                    return true;
            }
            else if (selectedStatus == ProductStatus.Active && x.Status == true)
            {
                if (string.IsNullOrWhiteSpace(searchString))
                    return true;
                if (x.Name.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
                    return true;
                if (x.Brand.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
                    return true;
                if (x.CategoryProduct.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
                    return true;
            }
            else
            {
                if (string.IsNullOrWhiteSpace(searchString))
                    return true;

                if (x.Name.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
                    return true;
                if (x.Brand.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
                    return true;
                if (x.CategoryProduct.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
                    return true;
            }
            return false;
        };

        //hoi truoc khi xoa
        private async Task<bool?> Confirm()
        {
            var confirm = await _dialogservice.ShowMessageBox("Thông báo",
            "Xác nhận cập nhật trạng thái sản phẩm này?",
            yesText: "Xác nhận",
            cancelText: "Hủy", noText: null, options: new DialogOptions { Position = DialogPosition.TopCenter, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true });
            StateHasChanged();
            return confirm;
        }

        //Thông báo hỏi khi xoá
        private async Task DeleteProduct(int id)
        {
            if (await Confirm() == true)
            {
                var response2 = await _client.RemoveProduct(id);
                if (response2.IsSuccess)
                {
                    Message(response2.Data, Severity.Success);
                    await LoadData();
                }
                else
                {
                    Message(response2.Error, Severity.Error);
                }
            }
        }

        private async Task ActiveProduct(int id)
        {
            var repon = await _client.ActiveProduct(id);
            if (repon.IsSuccess)
            {
                Message(repon.Data, Severity.Success);
                await LoadData();
            }
            else
            {
                Message(repon.Error, Severity.Success);
            }
        }

        //thêm sửa !
        private async Task OpenDialog(int? id)
        {

            var parameters = new DialogParameters();
            string nameDialog = "Thêm mới sản phẩm";
            if (id != null)
            {
                product = lstProduct.FirstOrDefault(x => x.Id == id);
                parameters.Add("product", product);
                nameDialog = "Cập nhật sản phẩm";
            }
            DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraLarge,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true
            };
            var createUpdateDialog = await _dialogservice.ShowAsync<CreateUpdateProduct>(nameDialog, parameters, options);
            var result = await createUpdateDialog.Result;
            if (!result.Canceled)
            {
                createUpdateDialog.Close();
                await LoadData();
            }
            StateHasChanged();
        }
        private async Task OpenDetails(int? id)
        {

            var parameters = new DialogParameters();
            // var cate = lstProduct.FirstOrDefault(x => x.Id == id);
            parameters.Add("id", id);
            string nameDialog = "Sản phẩm chi tiết";
            DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Medium,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true
            };
            var createUpdateDialog = await _dialogservice.ShowAsync<DetailsProductView>(nameDialog, parameters, options);
            var result = await createUpdateDialog.Result;
            if (!result.Canceled)
            {
                createUpdateDialog.Close();
                await LoadData();
            }
            StateHasChanged();
        }
        //messenge
        private void Message(string message, Severity severity)
        {
            Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
            Snackbar.Configuration.MaxDisplayedSnackbars = 10;
            Snackbar.Add(message, severity);
        }
        }
    </Authorized>
    <NotAuthorized>
        <p>Không có quyền truy cập</p>
    </NotAuthorized>
</AuthorizeView>
