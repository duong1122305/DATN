@inject ISnackbar Snackbar
@inject IDialogService _diagService;
@inject HttpClient httpClient
@using DATN.ADMIN.IServices
@using DATN.Data.Entities
@using DATN.ViewModels.Common
@using DATN.ViewModels.DTOs.Authenticate
<EditForm Model="@Voucher">
    <MudItem xs="12" sm="12">
        <MudCard>
            <MudCardContent>
                <MudTextField T="string" @bind-Value="Voucher.VoucherName" Label="VoucherName" For="@(() => Voucher.VoucherName)" />
                <MudDatePicker @bind-Date="startDate" Label="Ngày bắt đầu" Editable="true" />
                <MudDatePicker @bind-Date="endDate" Label="Ngày kết thúc" Editable="true" />
                <MudTextField T="string" @bind-Value="Voucher.Description" Label="Mô tả" For="@(() => Voucher.Description)" />
                <MudTextField T="int" @bind-Value="Voucher.Quantity" Label="Số lượng" For="@(() => Voucher.Quantity)" />
                <MudTextField T="decimal" @bind-Value="Voucher.DiscountPercent" Label="% Giảm" For="@(() => Voucher.DiscountPercent)" />
                <MudTextField T="string" @bind-Value="Voucher.VoucherCode" Label="VoucherCode" For="@(() => Voucher.VoucherCode)" />
                <MudTextField T="double" @bind-Value="Voucher.MinMoneyApplicable" Label="Số tiền giảm tối thiểu" For="@(() => Voucher.MinMoneyApplicable)" />
                <MudTextField T="double" @bind-Value="Voucher.MaxMoneyDiscount" Label="Số tiền giảm tối đa" For="@(() => Voucher.MaxMoneyDiscount)" />
                <hr class="hr" />
                <div class="mt-5" style="text-align: end;">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" OnClick="@(async()=>await Submid())" Color="Color.Primary" Class="ml-auto">@_nameButton</MudButton>
                </div>
            </MudCardContent>
        </MudCard>
    </MudItem>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public VoucherView Voucher { get; set; } = new VoucherView();
    [CascadingParameter] MudDialogInstance _dialogBox { get; set; }
    private string _nameButton = "Thêm mới";
    [Inject]
    private IVoucherServices _client { get; set; }

    private DateTime? startDate;
    private DateTime? endDate;
    protected async override Task OnInitializedAsync()
    {
        if (Id > 0)
        {
            _nameButton = "Cập nhật";
            startDate = new DateTime(Voucher.StartDate.Year, Voucher.StartDate.Month, Voucher.StartDate.Day);
            endDate = new DateTime(Voucher.EndDate.Year, Voucher.EndDate.Month, Voucher.EndDate.Day);
        }
    }

    //thêm
    protected async Task Create()
    {

        Voucher.StartDate = startDate.Value;
        Voucher.EndDate = endDate.Value;
        //gọi api thêm
        var result = await _client.CreateVoucher(Voucher);

        if (result.IsSuccess)
        {
            Message(result.Data, Severity.Success);
            _dialogBox.Close(DialogResult.Ok(true));
        }
        else
        {
            Message(result.Error, Severity.Error);
        }
    }
    //thông báo xác nhận
    private async Task<bool?> Confirm()
    {
        var confirm = await _diagService.ShowMessageBox("Thông báo",
    "Xác nhận cập nhật voucher?",
           yesText: "Xác nhận",
                    cancelText: "Hủy", noText: null, options: new DialogOptions { Position = DialogPosition.TopCenter, MaxWidth = MaxWidth.Small, FullWidth = true });
        StateHasChanged();
        return confirm;
    }
    //cập nhật
    public async Task Update()
    {
        if (await Confirm() == true)
        {
            Voucher.StartDate = startDate.Value;
            Voucher.EndDate = endDate.Value;
            var result = await _client.UpdateVoucher(Voucher);
            if (result.IsSuccess)
            {
                Message(result.Data, Severity.Success);
                _dialogBox.Close(DialogResult.Ok(true));
            }
            else
            {
                Message(result.Error, Severity.Error);
            }

        }
    }
    private async Task Submid()
    {
        if (Voucher.Id == null || Voucher.Id == 0)
        {
            await Create();
        }
        else
        {
            await Update();
        }
        StateHasChanged();
    }

    //thông báo
    private void Message(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add(message, severity);
    }
    bool success = false;
} 