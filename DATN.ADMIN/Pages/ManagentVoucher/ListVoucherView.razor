@page "/ListVoucher"
@using System.Net.Http.Json
@using DATN.ADMIN.IServices
@using DATN.Utilites
@using DATN.ViewModels.Common
@using DATN.ViewModels.DTOs.Authenticate
@using DATN.ViewModels.Enum
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IDialogService _dialogservice;
<PageTitle>Danh sách mã giảm giá</PageTitle>
<MudText Typo="Typo.h4" Style="text-align:center">Danh sách mã giảm giá</MudText>

<MudDataGrid Items="@lstVoucher" Hover="true" QuickFilter="@_quickFilter" Filterable="true" >
    <ToolBarContent>
       <div>
            <MudSelect T="Status" Label="Trạng thái" Variant="Variant.Outlined" style="width: 200px; margin-bottom: 10px;"
                       ValueChanged="Change" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem Value="Status.All">Tất cả</MudSelectItem>
                <MudSelectItem Value="Status.GoingOn">Hoạt động</MudSelectItem>
                <MudSelectItem Value="Status.NotOccur">Chưa bắt đầu</MudSelectItem>
                <MudSelectItem Value="Status.Expired">Hết hạn</MudSelectItem>
            </MudSelect>
       </div>
       <div style="margin-left:15px;display:flex">
               <div>
                    <MudStack>
                        <MudDateRangePicker @ref="_picker" Label="Chọn khoảng ngày cần tìm" @bind-DateRange="_dateRange"
                                            AutoClose="@_autoClose" PickerVariant="PickerVariant.Dialog">
                            <PickerActions>
                                <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Xoá</MudButton>
                                <MudButton OnClick="@(() => _picker.Close(false))">Đóng</MudButton>
                                <MudButton Color="Color.Primary" OnClick="@(() => _picker.Close())">Ok</MudButton>
                            </PickerActions>
                        </MudDateRangePicker>
                    </MudStack>
               </div>
                <div style="margin-top:20px">
                    <MudButton OnClick="@SearchByDate">Tìm kiếm</MudButton>
                </div>
       </div>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Tìm kiếm, tên" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-0" Immediate="true"></MudTextField>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@(async()=>await OpenDialog(null))">Thêm</MudButton>
    </ToolBarContent>
    <Columns>
        <TemplateColumn Title="STT" Sortable="false" Filterable="false">
           <CellTemplate>
               <span>
                    @(lstVoucher.IndexOf(context.Item) + 1)
               </span>
           </CellTemplate>
       </TemplateColumn>
        <PropertyColumn Property="x=>x.VoucherName" Title="Tên" Sortable="false" Filterable="false" />
        <PropertyColumn Property="x=>x.VoucherCode" Title="Mã" Sortable="false" Filterable="false" />
        <TemplateColumn Title="Giảm" Sortable="false" Filterable="false">
                <CellTemplate>
                    <span>@context.Item.DiscountPercent %</span>
                </CellTemplate>
            </TemplateColumn>
        <PropertyColumn Property="x=>x.Quantity" Title="Số lượng" Sortable="false" Filterable="false" style="text-align:center;"/>
        <PropertyColumn Property="x=>x.Description" Title="Mô tả" Sortable="false" Filterable="false" />
        <PropertyColumn Property="x=>x.StartDate" Title="Bắt đầu" Sortable="false" Filterable="false" Style="width:50px"/>
        <PropertyColumn Property="x=>x.EndDate" Title="Kết thúc" Sortable="false" Filterable="false" Style="width:50px" />
        <PropertyColumn Property="x=>x.MinMoneyApplicable" Title="Giá áp dụng" Sortable="false" Filterable="false" />
        <PropertyColumn Property="x=>x.MaxMoneyDiscount" Title="Giảm tối đa" Sortable="false" Filterable="false" />
        <TemplateColumn Title="Trạng thái" Sortable="false" Filterable="false">
           <CellTemplate>
                @if (context.Item.Status == VoucherStatus.GoingOn)
                {
                    <span>
                        <MudChip Color="Color.Success" title="Đang diễn ra">Đang diễn ra</MudChip>
                    </span>
                }
                else if (context.Item.Status == VoucherStatus.Expired)
                {
                    <span>
                        <MudChip Color="Color.Error" title="Đã quá hạn">Đã kết thúc</MudChip>
                    </span>
                }
                else
                {
                    <span>
                        <MudChip Color="Color.Surface" title="Chưa diễn ra">Chưa diễn ra</MudChip>
                    </span>
                }
           </CellTemplate>
       </TemplateColumn>
        <PropertyColumn Property="x=>x.Id" Title="Hành động" Sortable="false" Filterable="false">
            <CellTemplate>
                <MudButtonGroup Variant="Variant.Filled">
                 
                    @if (context.Item.Status == VoucherStatus.NotOccur)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" title="Xoá" OnClick="@(async()=>await ChangeStatus(Convert.ToInt32(context.Item.Id)))"></MudIconButton>
                        <MudIconButton Color="Color.Warning" Icon="@Icons.Material.Filled.Edit" OnClick="@(async()=>await OpenDialog(context.Item.Id))" Title="Sửa"></MudIconButton>
                    }
                    else
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" title="Xoá" OnClick="@(async()=>await ChangeStatus(Convert.ToInt32(context.Item.Id)))" Disabled></MudIconButton>
                        <MudIconButton Color="Color.Warning" Icon="@Icons.Material.Filled.Edit" OnClick="@(async()=>await OpenDialog(context.Item.Id))" Title="Sửa" Disabled></MudIconButton>
                    }
                    <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Tertiary" title="Xem chi tiết"></MudIconButton>
                </MudButtonGroup>
            </CellTemplate>
       </PropertyColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="VoucherView" />
    </PagerContent>
</MudDataGrid>

@code {

    //button trạng thái
    private bool _disableElevation = false;
    private string searchString = "";
    private List<VoucherView> lstVoucher = new List<VoucherView>();

    private VoucherView voucherView = new VoucherView();
    [Inject]
    private IVoucherServices _client { get; set; }


    private MudDateRangePicker _picker;
    private DateRange _dateRange;
    private bool _autoClose;



    private enum Status
    {
        Expired = -1,
        All = 0, //hết hạn
        GoingOn = 1, //còn hạn
        NotOccur = 2 //chưa bắt đầu
    }

    private Status selectedStatus = Status.All;

    private async Task Change(Status selected)
    {
        selectedStatus = selected;
        await LoadData();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        var voucher = await _client.GetAll();
        lstVoucher = voucher.Data.OrderByDescending(x=>x.Id).ToList();
        if (selectedStatus == Status.All)
        {
            lstVoucher = voucher.Data.OrderByDescending(x => x.Id).ToList();
        }
        else if (selectedStatus == Status.Expired)
        {
            lstVoucher = voucher.Data.Where(x => x.Status == VoucherStatus.Expired).ToList();
        }
        else if (selectedStatus == Status.GoingOn)
        {
            lstVoucher = voucher.Data.Where(x => x.Status == VoucherStatus.GoingOn).ToList();
        }
        else 
        {
            lstVoucher = voucher.Data.Where(x => x.Status == VoucherStatus.NotOccur).ToList();
        }
    }
    // lọc ngày
    private async Task SearchByDate()
    {
        var voucher = await _client.GetAll();
        if (_dateRange != null && _dateRange.Start.HasValue && _dateRange.End.HasValue)
        {
            var lstFilter = voucher.Data.Where(x =>
                 x.StartDate.Date >= _dateRange.Start.Value.Date &&
                 x.EndDate.Date <= _dateRange.End.Value.Date
             ).ToList();
            if (lstFilter.Any())
            {
                lstVoucher = lstFilter;
            }
            else
            {
                lstVoucher = null;
                Message("Không có dữ liệu trong khoảng ngày bạn tìm kiếm!", Severity.Warning);
                await LoadData();
            }
        }
      
        else
        {
            lstVoucher = voucher.Data.OrderByDescending(x => x.Id).ToList(); // Không có khoảng ngày, hiển thị tất cả
        }
    }


    private Func<VoucherView, bool> _quickFilter => x =>
     {
         if (string.IsNullOrWhiteSpace(searchString))
             return true;

         if (x.VoucherCode.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
             return true;

         if (x.VoucherName.Contains(searchString.Trim(), StringComparison.OrdinalIgnoreCase))
             return true;

         if ($"{x.StartDate} {x.EndDate} {x.MinMoneyApplicable} {x.MaxMoneyDiscount} {x.DiscountPercent}".Contains(searchString.Trim()))
             return true;
         return false;
     };
    //overlay màn
    private bool isVisible;

    public void OpenOverlay()
    {
        isVisible = true;
        StateHasChanged();
    }
    //thêm sửa !
    private async Task OpenDialog(int? id)
    {
        var parameters = new DialogParameters();
        string nameDialog = "Thêm mới voucher";
        if (id != null)
        {
            voucherView = lstVoucher.FirstOrDefault(c => c.Id == id);
            parameters.Add("Id", id);
            parameters.Add("Voucher", voucherView);
            nameDialog = "Cập nhật voucher";
        }
        DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Small,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true
            };
        var createUpdateDialog = await _dialogservice.ShowAsync<CreateVoucherUp>(nameDialog, parameters, options);
        var result = await createUpdateDialog.Result;
        if (!result.Canceled)
        {
            createUpdateDialog.Close();
            await LoadData();
        }
    }

    private async Task ChangeStatus(int id)
    {

        if (await Confirm()==true)
        {
            //gọi api thêm
            var result = await _client.ChangeStatusVoucher(id);

            if (result.IsSuccess)
            {
                Message(result.Data, Severity.Success);
                await LoadData();
            }
            else
            {
                Message(result.Error, Severity.Error);
            }
        }
    }
    //thông báo
    private void Message(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add(message, severity);
    }

    private async Task<bool?> Confirm()
    {
        var confirm = await _dialogservice.ShowMessageBox("Thông báo", $"Xác nhận kết thúc voucher sớm?",
                    yesText: "Xác nhận",
                    cancelText: "Hủy", noText: null,
                    options: new DialogOptions { Position = DialogPosition.Center, MaxWidth = MaxWidth.Small, FullWidth = true });
        return confirm;
    }


}