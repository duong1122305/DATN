@page "/ListVoucher"
@using System.Net.Http.Json
@using DATN.ADMIN.IServices
@using DATN.ViewModels.Common
@using DATN.ViewModels.DTOs.Authenticate
@using DATN.ViewModels.Enum
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IDialogService _dialogservice;
<PageTitle>Danh sách mã giảm giá</PageTitle>

<MudTable Items="@lstVoucher" Hover="true" Filter="new Func<VoucherView,bool>(FilterFunc)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Danh sách mã giảm giá</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Tìm kiếm, tên" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-0"></MudTextField>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@(async()=>await OpenDialog(null))">Thêm</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh Style="text-align:center;">STT</MudTh>
        <MudTh Style="text-align:center;">VoucherName</MudTh>
        <MudTh Style="text-align:center;">Voucher Code</MudTh>
        <MudTh Style="text-align:center;">% Giảm giá</MudTh>
        <MudTh Style="text-align:center;">Mô tả</MudTh>
        <MudTh Style="text-align:center;">Ngày bắt đầu</MudTh>
        <MudTh Style="text-align:center;">Ngày kết thúc</MudTh>
        <MudTh Style="text-align:center;">Số tiền tối thiểu</MudTh>
        <MudTh Style="text-align:center;">Số tiền giảm tối đa</MudTh>
        <MudTh Style="text-align:center;">Trạng thái</MudTh>
        <MudTh Style="text-align:center;">Hành động</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="STT" Style="text-align:center;">
            @(lstVoucher.IndexOf(context) + 1)
        </MudTd>
        <MudTd DataLabel="VoucherName" Style="text-align:center;">@context.VoucherName</MudTd>
        <MudTd DataLabel="VoucherCode" Style="text-align:center;">@context.VoucherCode</MudTd>
        <MudTd DataLabel="DiscourPercent" Style="text-align:center;">@context.DiscountPercent</MudTd>
        <MudTd DataLabel="Description" Style="text-align:center;">@context.Description</MudTd>
        <MudTd DataLabel="StartDate" Style="text-align:center;">@context.StartDate.ToString("dd/MM/yyyy")</MudTd>
        <MudTd DataLabel="EndDate" Style="text-align:center;">@context.EndDate.ToString("dd/MM/yyyy")</MudTd>
        <MudTd DataLabel="MinMoneyApplicable" Style="text-align:center;">@context.MinMoneyApplicable</MudTd>
        <MudTd DataLabel="MaxMoneyDiscount" Style="text-align:center;">@context.MaxMoneyDiscount</MudTd>
        @if (context.Status == VoucherStatus.GoingOn)
        {
            <MudTd DataLabel="MaxMoneyDiscount" Style="text-align:center;">
                <MudChip Color="Color.Info" title="Đang diễn ra">Đang diễn ra</MudChip>
            </MudTd>
        }
        else if (context.Status == VoucherStatus.Expired)
        {
            <MudTd DataLabel="MaxMoneyDiscount" Style="text-align:center;">
                <MudChip Color="Color.Error" title="Đã quá hạn">Đã quá hạn</MudChip>
            </MudTd>
        }
        else
        {
            <MudTd DataLabel="MaxMoneyDiscount" Style="text-align:center;">
                <MudChip Color="Color.Surface" title="Chưa diễn ra">Chưa diễn ra</MudChip>
            </MudTd>
        }
        <MudTd Style="text-align:center;">
            <MudButtonGroup Variant="Variant.Filled">
                @if (context.Status == VoucherStatus.NotOccur)
                {
                    <MudIconButton Color="Color.Warning" Icon="@Icons.Material.Filled.Edit" OnClick="@(async()=>await OpenDialog(context.Id))" Title="Sửa"></MudIconButton>
                }
                else
                {
                    <MudIconButton Color="Color.Warning" Icon="@Icons.Material.Filled.Edit" OnClick="@(async()=>await OpenDialog(context.Id))" Title="Sửa" Disabled></MudIconButton>
                }
                <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Tertiary" title="Xem chi tiết"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" title="Xoá" OnClick="@(async()=>await ChangeStatus(Convert.ToInt32(context.Id)))"></MudIconButton>
            </MudButtonGroup>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {

    //button trạng thái
    private bool _disableElevation = false;
    private string searchString = "";
    private List<VoucherView> lstVoucher = new List<VoucherView>();
    [CascadingParameter] MudDialogInstance _dialogBox { get; set; }

    private VoucherView voucherView = new VoucherView();
    [Inject]
    private IVoucherServices _client { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        var voucher = await _client.GetAll();
        lstVoucher = voucher.Data;
    }

    private bool FilterFunc(VoucherView voucher)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (voucher.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (voucher.VoucherCode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{voucher.StartDate} {voucher.EndDate} {voucher.DiscountPercent}".Contains(searchString))
            return true;
        return false;
    }
    //overlay màn
    private bool isVisible;

    public void OpenOverlay()
    {
        isVisible = true;
        StateHasChanged();
    }
    //thêm sửa !
    private async Task OpenDialog(int? id)
    {
        var parameters = new DialogParameters();
        string nameDialog = "Thêm mới voucher";
        if (id != null)
        {
            voucherView = lstVoucher.FirstOrDefault(c => c.Id == id);
            parameters.Add("Id", id);
            parameters.Add("Voucher", voucherView);
            nameDialog = "Cập nhật voucher";
        }
        DialogOptions options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Small,
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true
            };
        var createUpdateDialog = await _dialogservice.ShowAsync<CreateVoucherUp>(nameDialog, parameters, options);
        var result = await createUpdateDialog.Result;
        if (!result.Canceled)
        {
            createUpdateDialog.Close();
            await LoadData();
        }
    }

    private async Task ChangeStatus(int id)
    {

       if (await Confirm()==true)
        {
            //gọi api thêm
            var result = await _client.ChangeStatusVoucher(id);

            if (result.IsSuccess)
            {
                Message(result.Data, Severity.Success);
                _dialogBox.Close(DialogResult.Ok(true));
            }
            else
            {
                Message(result.Error, Severity.Error);
            }
        }
    }
    //thông báo
    private void Message(string message, Severity severity)
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add(message, severity);
    }

    private async Task<bool?> Confirm()
    {
        var confirm = await _dialogservice.ShowMessageBox("Thông báo", $"Xác nhận kết thúc voucher sớm?",
                    yesText: "Xác nhận",
                    cancelText: "Hủy", noText: null,
                    options: new DialogOptions { Position = DialogPosition.Center, MaxWidth = MaxWidth.Small, FullWidth = true });
        return confirm;
    }


}