    @using System.Security.Policy
@using DATN.ADMIN.IServices
    @using DATN.Aplication.CustomProvider
    @using System.IdentityModel.Tokens.Jwt
    @using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@using DATN.Utilites
    @inject IDialogService _dialogservice
    @inject AuthenticationStateProvider AuthenticationStateProvider
    @inherits LayoutComponentBase
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="5">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="DrawerToggle" />
        <MudSpacer />
        <MudAvatar>
            <MudImage Src="@urlImg"></MudImage>
        </MudAvatar>
        <p>@mess</p>
        <MudMenu Label="@name" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Class="mr-3">
            <MudMenuItem Href="/profileUser">Hồ sơ</MudMenuItem>
            <MudMenuItem OnClick="logOut">Đăng xuất</MudMenuItem>
        </MudMenu>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
        <img src="./img/logo_name.png" alt="Website Logo" style="padding-left:45px;width: 200px; height: 120px;" />
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer Class="mt-5 px-8 " MaxWidth="MaxWidth.False">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>
@code {
    [Inject]
    protected NavigationManager navigationManager { get; set; }
    [Inject]
    protected IHttpContextAccessor httpContextAccessor { get; set; }
    protected HubConnection hubConnection;
    [Inject]
    protected IUserClientSev _ser { get; set; }

    bool _drawerOpen = true;
    private string name = "";
    private string mess = "";
    private string urlImg = Contant.ImgUser;
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    private async Task logOut()
    {
        var confirm = await Confirm();
        if (confirm == true)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.Identity.IsAuthenticated)
            {
                // Xoá session (nếu có)
                httpContextAccessor.HttpContext.Session.Remove("Key");
                httpContextAccessor.HttpContext.Session.Clear();
                await OnInitializedAsync();
            }
        }
    }
    protected async override Task OnInitializedAsync()
    {
        var session = httpContextAccessor.HttpContext!.Session.GetString("Key");

        var url= httpContextAccessor.HttpContext!.Request.Path;
        if (url == "/_blazor")
        {
            url = "/";
        }
        if (string.IsNullOrEmpty(session))
        {
            // navigationManager.NavigateTo("/dangnhap?rnd=" + Guid.NewGuid().ToString(), true);
            navigationManager.NavigateTo($"/dangnhap", true);

        }
        else
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var jwtSecurityToken = tokenHandler.ReadJwtToken(session);
            // var listClaims = jwtSecurityToken.Claims.ToArray();
            name = jwtSecurityToken.Claims.Where(c => c.Type == ClaimTypes.Name).FirstOrDefault()?.Value!;
            string idUser = jwtSecurityToken.Claims.Where(c => c.Type == ClaimTypes.NameIdentifier).FirstOrDefault()?.Value!;
            string fullName = jwtSecurityToken.Claims.Where(c => c.Type == ClaimTypes.UserData).FirstOrDefault()?.Value!;
            httpContextAccessor.HttpContext.Session.SetString("id",idUser);
            httpContextAccessor.HttpContext.Session.SetString("fullName",fullName);

          
            var user =await _ser.GetInfoUser(idUser);
            urlImg = user.Data.ImgUrl;
        }

        navigationManager.LocationChanged += HandleLocationChanged;
        hubConnection = new HubConnectionBuilder()
       .WithUrl(navigationManager.ToAbsoluteUri("https://localhost:7259/notification"))
       .WithAutomaticReconnect()
       .Build();
        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            mess = user + message;
        });
        // await hubConnection.StartAsync();
    }
    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        if (e.Location.Contains("/booking"))
        {
            _drawerOpen = false;
            StateHasChanged();
        }
    }
    private async Task<bool?> Confirm()
    {
        var confirm = await _dialogservice.ShowMessageBox("Thông báo",
                    "Bạn có muốn đăng xuất không?",
           yesText: "Xác nhận",
                    cancelText: "Hủy", noText: null, options: new DialogOptions { Position = DialogPosition.TopCenter, MaxWidth = MaxWidth.Small, FullWidth = true });
        StateHasChanged();
        return confirm;
    }
}
@*
<script src="~\lib\microsoft\signalr\dist\browser\signalr.js"></script>
<script>

    var connection = new signalR.HubConnectionBuilder().withUrl("/notification").build();

    connection.on("ReceiveMessage", function (user, message) {
        alert("So key");
    });

    connection.start().then(function () {
        alert("connected");
    }).catch(function (err) {
        return console.error(err.toString());
    });
</script> *@