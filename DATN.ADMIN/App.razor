@using DATN.Aplication.CustomProvider
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Routing
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt
<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="typeof(MainLayout)">
                <Authorizing>
                    <h3>Authorizing...</h3>
                </Authorizing>
                <NotAuthorized>
                    <h3>Not authorized</h3>
                </NotAuthorized>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <DATN.ADMIN.Components.NotFound></DATN.ADMIN.Components.NotFound>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    [Inject]
    protected IHttpContextAccessor httpContextAccessor { get; set; }

    [Inject]
    CustomAuthenticationStateProvider authenticationStateProvider { get; set; }

    [Inject]
    protected NavigationManager navigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (httpContextAccessor.HttpContext.Request.Path != "/qrcode")
        {
            var key = httpContextAccessor.HttpContext.Session.GetString("Key");
            if (key != null)
            {
                var authenState = await authenticationStateProvider.GetAuthenticationStateAsync();
                if (!authenState.User.Identity.IsAuthenticated)
                {
                    navigationManager.NavigateTo("/dangnhap");
                }
            }
            else
            {
                navigationManager.NavigateTo("/dangnhap");
            }
        }
    }
}
