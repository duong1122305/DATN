@page "/upload-img"
<style>
    .img_upload .mud-image {
        margin-top: 0 !important;
        margin-right: 0 !important;
    }
</style>
<div style="display: flex; ">
    <MudFileUpload T="IBrowserFile" Context="fileInput" FilesChanged="ChooseFile" Style="margin-left:50px">
        <ButtonTemplate>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload" HtmlTag="label" for="@fileInput">Thêm ảnh</MudButton>
        </ButtonTemplate>
    </MudFileUpload>
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" Style="height: 38px; margin-top: 5px; margin-left:20px" StartIcon="@Icons.Material.Filled.ClearAll" OnClick="ClearAll">Xoá toàn bộ</MudButton>
</div>

@if (lstDisplayFile.Count() > 0)
{
    <div style=" display: flex; flex-wrap: wrap;" class="img_upload">
        @foreach (var fileUrl in lstDisplayFile)
        {
            <MudBadge Icon="@Icons.Material.Filled.Close" Color="Color.Error" Overlap="false" Bordered="true" Class="mx-6 my-4" OnClick="@(() => Delete(fileUrl))">
                <MudImage Src="@fileUrl" Height="200" Alt="Selected Image" Elevation="25" Class="rounded-lg ma-4" />
            </MudBadge>
        }
    </div>
}

@code {
    [Inject]
    public IDialogService _dialogService { set; get; }
    private string url = "";
    private IBrowserFile selectedFile;
    [Parameter]
    public EventCallback<List<IBrowserFile>> lstFileReturn { set; get; }

    private List<IBrowserFile> lstBrowerFile = new List<IBrowserFile>();
    private List<string> lstDisplayFile = new List<string>();

    private void ChooseFile(IBrowserFile file)
    {
        selectedFile = file;
        ConvertToBase64();
    }

    private async Task ConvertToBase64()
    {
        using (var ms = new MemoryStream())
        {
            await selectedFile.OpenReadStream().CopyToAsync(ms);
            var buffer = ms.ToArray();
            url = $"data:{selectedFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
            lstDisplayFile.Add(url);
            lstBrowerFile.Add(selectedFile);
            await lstFileReturn.InvokeAsync(lstBrowerFile);
            StateHasChanged();
        }
    }

    private async Task Delete(string url)
    {
        var index = lstDisplayFile.IndexOf(url);
        lstDisplayFile.Remove(url);
        lstBrowerFile.RemoveAt(index);
        await lstFileReturn.InvokeAsync(lstBrowerFile);
        StateHasChanged();
    }

    private async Task ClearAll()
    {
        var confirm = await _dialogService.ShowMessageBox("Thông báo", $"Xác nhận xoá toàn bộ ảnh",
                    yesText: "Xác nhận",
                    cancelText: "Hủy", noText: null,
                    options: new DialogOptions { Position = DialogPosition.TopCenter, MaxWidth = MaxWidth.Small, FullWidth = true });
        if (confirm.HasValue && confirm.Value)
        {
            lstDisplayFile.Clear();
            lstBrowerFile.Clear();
            await lstFileReturn.InvokeAsync(lstBrowerFile);
            StateHasChanged();
        }
    }
}
