@page "/upload-img"
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<MudStack Style="width: 100%">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                   AppendMultipleFiles
                   OnFilesSelected="OnFilesSelected"
                   Hidden="false"
                   InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
                   InputStyle="opacity:0"
                   @ondragenter="SetDragClass"
                   @ondragleave="ClearDragClass"
                   @ondragend="ClearDragClass">
        <ButtonTemplate>
            <MudPaper Height="300px" Outlined="true" Class="@_dragClass">
                <MudText Typo="Typo.h6">Drag and drop files here or click</MudText>
                @foreach (var file in _fileNames)
                {
                    <MudChip Color="Color.Dark" Text="@file" />
                }
            </MudPaper>
            <MudToolBar DisableGutters="true" Class="relative d-flex justify-end gap-4 z-30">
                <MudButton HtmlTag="label" Color="Color.Primary" for="@context.Id" Variant="Variant.Filled">
                    Open file picker
                </MudButton>
                <MudButton OnClick="@Upload" Color="Color.Primary" Disabled="@(!_fileNames.Any())" Variant="Variant.Filled">
                    Upload
                </MudButton>
                <MudButton OnClick="@Clear" Color="Color.Error" Disabled="@(!_fileNames.Any())" id="ok" Variant="Variant.Filled">
                    Clear
                </MudButton>
            </MudToolBar>
        </ButtonTemplate>
    </MudFileUpload>
</MudStack>
<script>
</script>
@code {
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string _dragClass = DefaultDragClass;
    private readonly List<string> _fileNames = new();
    private readonly List<IBrowserFile> _files = new();

    private async Task Clear()
    {
        _fileNames.Clear();
        _files.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }

    private void OnFilesSelected(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            _fileNames.Add(file.Name);
            _files.Add(file);
        }
    }

    private async Task Upload()
    {
        foreach (var file in _files)
        {
            var fileUrl = await UploadFileToGoogleDrive(file);
            var isSuccess = await SendFileUrlToBackend(fileUrl);
            if (isSuccess)
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
                Snackbar.Add($"File '{file.Name}' uploaded successfully!");
            }
            else
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
                Snackbar.Add($"Failed to upload file '{file.Name}'");
            }
        }
    }

    private async Task<string> UploadFileToGoogleDrive(IBrowserFile file)
    {
        try
        {
            var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/interop.js");
            var fileUrl = await module.InvokeAsync<string>("uploadFileToGoogleDrive", file);

            return fileUrl;
        }
        catch (Exception ex)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Add($"Failed to upload file: {ex.Message}");
            return null;
        }
    }

    private async Task<bool> SendFileUrlToBackend(string fileUrl)
    {
        try
        {
            var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/interop.js");
            var isSuccess = await module.InvokeAsync<bool>("sendFileUrlToBackend", fileUrl);

            return isSuccess;
        }
        catch (Exception ex)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Add($"Failed to send file URL to backend: {ex.Message}");
            return false;
        }
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
}
